%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: UStA_Stacked_PR.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Duncan Stewart
%%CreationDate: 28/03/2014
%%BoundingBox: 0 0 49 60
%%HiResBoundingBox: 0 0 48.3320 59.8115
%%CropBox: 0 0 48.3320 59.8115
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">St Andrews stacked Logo PR Col</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2014-03-27T13:22:44Z</xmp:CreateDate>
         <xmp:ModifyDate>2014-03-27T13:22:45Z</xmp:ModifyDate>
         <xmp:MetadataDate>2014-03-27T13:22:45Z</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>208</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADQAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYqgtV1vRdIhSbVr+20+GRuEct1NHCrNSvENIVBNB0ycMcpfSCWM5xjuTSWf8AKw/IH/Uz&#xA;aV/0nW3/ADXln5bL/Nl8i1/mMf8AOj8w7/lYfkD/AKmbSv8ApOtv+a8fy2X+bL5FfzGP+dH5h3/K&#xA;w/IH/UzaV/0nW3/NeP5bL/Nl8iv5jH/Oj8w7/lYfkD/qZtK/6Trb/mvH8tl/my+RX8xj/nR+Yd/y&#xA;sPyB/wBTNpX/AEnW3/NeP5bL/Nl8iv5jH/Oj8w7/AJWH5A/6mbSv+k62/wCa8fy2X+bL5FfzGP8A&#xA;nR+Yd/ysPyB/1M2lf9J1t/zXj+Wy/wA2XyK/mMf86PzDv+Vh+QP+pm0r/pOtv+a8fy2X+bL5FfzG&#xA;P+dH5h3/ACsPyB/1M2lf9J1t/wA14/lsv82XyK/mMf8AOj8w7/lYfkD/AKmbSv8ApOtv+a8fy2X+&#xA;bL5FfzGP+dH5hN9O1PTdStVu9Ou4b20ckJcW8iyxkqaEB0LKaHKpQMTRFFsjISFg2ETkWTsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVeN/wDOSMS3Fn5Xs5am3uNSCyqNqgqF6/Jjm17LNGR8nXdoCxEH&#xA;+cxTzhbfkx5b8x3miP5NkumsygaddQu0DF41k+yZD050zU5e3s8JGPP5f8S9b2f7Ew1OGOWxHivb&#xA;fvrvQunp+VmoWl3d2f5d3M1vZLzuJF1G6oBXt8e5pvQdt8ws3tbPFKMZyAlPly/4lty+w+DHIRlk&#xA;iDLl9X/FID9N/kt/1Is3/cSuv+a8yf8ARDn/ABX/ABLf/wAm+h/PHyl/xTv03+S3/Uizf9xK6/5r&#xA;x/0Q5/xX/Er/AMm+h/PHyl/xSaaTYfl1q6GTS/yxv7yNeskN7eugI7cg3Gv04Y9v6k8hf4/quLn9&#xA;i9LhNZM0Inzv/ilHVU/LDSJBHqn5bXtk7fYE99eR8qfylmFfoxl2/qBzFfL/AIlng9h9PmF48sJe&#xA;6z/vkD+m/wAlv+pFm/7iV1/zXg/0Q5/xX/Et/wDyb6H88fKX/FO/Tf5Lf9SLN/3Err/mvH/RDn/F&#xA;f8Sv/Jvofzx8pf8AFI/U0/KzTIrWa/8Ay8uII72P1bctqV18S/8AB7HvQ75jYPa2eUyECCYGjy/4&#xA;low+w+DISI5Inh2O0v8Ailfy/pf5R+aV1WxsfKkmm3lvp1zd29099dTASRKAvwGQDYtXfwzZaPtv&#xA;NkyCJ/R+pwu1/Y+Gjw+JYlvXXuPm9F/5x0mL/ljaqRT0rm5Qe9ZOX/G2ZnaY/fH3B57s7+5Hxem5&#xA;r3NdirsVdirsVdirsVdirsVdirsVdirsVdirx38/Qr655DifeOTVKMnYj1IB/HNr2b9OT+r+t1+u&#xA;+qH9Zg3nbQLrzL+b+r2FoQgMqGeVuiRxxxq7U779BnAdsa+GmEsku+gO89z692Zqo6fs6E5d23vJ&#xA;KO1Lz5YeUr628v6HbLJp+nvx1NnHxzPTi4B/m7lvHbpnKYOx562Es+aVTmPR3RHT+zu82vD2bPVR&#xA;OXKfXL6fLu/H6Uj/ADA8p2UEEPmXRCDouo8W9OnH0nfcUU0+E+HY5sexu0ZyJ0+b+9h9o/X97mdl&#xA;66UicOX+8h9qD/LLy3p+u+ZuGpk/ovTreXUL9RWrQwUqu2+7MK+2dNhgJHfkNy29tayeDBcPrnIR&#xA;j7y9l1/8xPK3lt49P1ae5WZEUDQtHCxJaIVqiSSI8JLgHfjJT/JHfNlmjHaV+6O1PGaXsjPqQZ4x&#xA;Gv5+Tfi8wCDt8Piv07zb5R84adc28csmoaWoB1LSNSVfrEEJPH6zDICxIjLVb42IG4IOzAZYzHUx&#xA;6g8x5gozaDUaOYJAhP8AhnD6Sf5pHn02HnfTgPmzQ/0D5k1HSOZkWynaNJD1ZOqE+5UiuYE48MiO&#xA;57/Q6nx8McnLiDJ/InlnT7fTpPN+vb6ZZ1a1tx8RlkVuIYgdg+wB6nrt15ntfXzlkGlwf3kuZ7h/&#xA;Z9nLd1vaWsnKY0+L65cz3BN9J842XneW78va9CsIvHL6VKgqYmVfhWu3xCla99x4DMHUdmT7PEc+&#xA;A3wD1jv8/wAcubi59BLRgZsRvh+rz/H7VP8ALbQbzRvPuq6NeU5vpl3H6inYxuqsrr16gd87TsPW&#xA;xzmGSHIuP7R545+z+OPLiH6Wd/8AONMjP+XDKekd/Oq/LjG362zs+1R+9+D5d2af3XxerZrXPdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirx786isn5hflnCBycamWdKV+E3Fpv8A8Kc2mg/usv8AV/QX&#xA;W63+8x+/9TzDz9q17ZfmfrGoWbmG5t71/Tcf5FF38QwG4zhtbhhl44TFxJL7X2VgjPQ44S3BgyqG&#xA;28nedoYfMV9Ithc6eAdbgBCiRVX4STWvEno3Wnw9aEcXKeq7PJwQHHGf92e78d3Lq6yU9RoycMRx&#xA;CX0Hu/H7WE+d/OEvmC+WOBfq+kWnwWNqBxAUbc2UbciPuG2dB2T2YNNC5erLLeR/R+ObueztAMEb&#xA;O+SXMobyd5kk8v6u10KmC5gls7oKAW9KdeJZQafEpowHelM3EZENnaGjGox8PUESHvH6+SE8xXv1&#xA;7X9RvuYkF3cSzhwSQRK5fvv3yJlZtt0mPgxRhy4YgfJGeTNXt9J1k3ly7C2FvPFOiU5SJPGYmRa/&#xA;tUeq+432qcINFp7R05y4+GP1cQI8qN/oQGvaxda1rN7qt1QT3srTOo6LyOyj2UbDGUrNnq36XTxw&#xA;4o448oik98i+c/0HcPZX6/WNDvfgu4GHILy+EyAb12+0O4zS9r9l/mIicPTmh9J/R+rucPtLs/xh&#xA;xQ2yR5H9DLrmHyt5Btp9W06QX2oamCdHRjyEULAHlUVqu/2up2Hic0eOWp7SkMWQcGPH9fmfx06c&#xA;+51MJZ9dIY5jhjD6/MpZ+TF1c6h+Zcct5I00l7DdC5c9W5REn5dO2d12fCOOcYxFAcvk3e0uKMdC&#xA;YgUAY182ef8AOMDs35f3wJqF1SYKPAfV4D+s52Xa396P6v6S+Qdln92ff+p6/mrdk7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXjv5rn1Pzc/LyFATIlwZGH+T60Z/wCNDm10f9xkdfqv77H8Uq03z3+U&#xA;2q+atU07zXodrYakt7PENScFoJikrKGkY7xsad/h9x0zEzdiCuOI4r383Z6f2mzw/d+JKIjsO7Z6&#xA;dD+W35ePFzh0a0aGZQQyCquhow3BoRsDmsOixXvHk7H+WtWf8pJv/lV35ff9WG1/4A/1x/KY+771&#xA;/lvWf6pJhuu2f5baf5wtfK8Plqy+tSRG6ubq6b0LZIeEjCkg9RuVYjWq0+/awaCG220r772r9bOP&#xA;bOrMZnxZejh/2V/8S3f6H5LtrG51GLy9plxb2sbyGOCO7mikEaljS+WIQoaDYFSK998vj2ZiJAo7&#xA;/jlduPLt/WAX4kvx50qp5b8lxUa60PSER91a6W809QD2R54XWX5jj8sB7OxdAfv+4p/l7Wf6pL7v&#xA;0LfImm/lx5on1SybyxbW1/o8ix3fEc4WEjyqhickMf7k15KMploIAcVbEkDc9G/J21q4y4fFlfDG&#xA;X+mFsu/5Vd+X3/Vhtf8AgD/XK/ymPu+9h/Les/1SShqXkL8sdPs3vNS0uxtrO3X455/gRFrWlWNB&#xA;ucMNDjJqMdz72J7c1URZySDzvy359/Lif8y9H0ryh5fhCySTJJrLK0Tf3En9wh3oe5ftUU75sx2N&#xA;HFA5DtIOtye0efUS8IzlKEud+W6Y/wDOM4VfL2vIoAC6o4Cjag9JKbZldq/VH+q67s76Zf1i9izV&#xA;OxdirsVdirsVdirsVdirsVdirsVdirsVdirx38yv/J2eQv8AZf8AEzm10v8Ai+R1+o/v8fxfOXmO&#xA;R5PMOqSOau93OzHxJlYnN7i+ke50eb65e8sj8h/m15u8myLFZXH1rS6/HplyS0VCakx942/1dvEH&#xA;MfUaOGXnz727T6yeLluO59J+Qvzh8o+cVSCCb6jqxHxabckByab+k32ZR8vi8QM0Op0U8W53j3u8&#xA;0+rhl5bHuYj5nuFt/wA/LOUymEjTkCuHijbkyXIUK037urE0HLr0yB+mH+f/AL1z8I9GX/kn/wBP&#xA;E58z6rZnQtXSa/gNy1pcK0c2tH6xURMOJtIV+rk9fhB3y7EPXEef839PNw8gPCT5d/4CPt9Zti1b&#xA;bUYWcIykWWuLeyEKDXlHeqsYp3Zd8gY+XzjX3MhfP9P62O/kXJHL5p88yxuJI3ntWR1IYMpluyCC&#xA;NiDkcv8AdR/rT+9vz/3x/wCF4v8Acph+YP5+eV/LXq2WlldZ1hfhMcTf6PE3/FkorUj+Va+BIy/T&#xA;dnTyby9MXX6jXwx7DeT5x84effNHm68+s61eGVFJMFonwW8Vf5Ixt/sjVvE5vcGnhiFRDo82onkP&#xA;qKZ/kzMIvzP8vsRWtwUp/rxuv8chrheGXubND/fR/HR7V/zjqAB5uAFANUIAH+yzU9p/wf1XbaD+&#xA;P+sXsWap2DsVdirsVdirsVdirsVdirsVdirsVdirsVeO/mV/5OzyF/sv+JnNrpf8XyOv1H9/j+L5&#xA;w1//AI72pf8AMVN/ycbN7j+ke50eb6z7ygMm1NqzIwdCVZSCrA0II6EHFILO/Lv5jadJfxt550xv&#xA;MMAjSAXvrSx3kcSElRyV0WUDkdn3/wArMDUaESjUaHWqBH7HZaXtKeOVknusEg1+l7ZpX5d/kt52&#xA;0c3GgKU6Bri1uJluoCf2WSZpONf8pKHtmplmzYTUgK7qFO0EceYcQJvvs2hvNnlz8ifI1gg1a09W&#xA;8KD07ZJ53u5yB9plWRFHL+ZuK5LGc+fYVw+4UPsRLJj0+9kHyJsvDNd8+zXBvbXy7aDy9pF8EW5t&#xA;LeaWSSdIuQQTyyMWanqN8K0XxBzcYNJGAF71y2AA9wdPqddPJInf1c97J95YnmW4LsVZf+UX/ky/&#xA;Lv8AzFr+o5ja3+5l7nL0P99F7f8A847f9Nf/ANtQ/wDG2ajtP+D+q7bQfx/1i9izVOwdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirx382K235t/l3d9BLcG3qR8O80a0Hv+9/Vm10e+DIPJ12qNZsZ975&#xA;4832/wBX8263b8Svo391HxPUcZmFPwzeYTcInyDpc4/eS95SjLGl2KojT9Ov9SvIrLT7eS7u5jxi&#xA;ghUu7H2UZGUhEWdgyhAyNAWX0D+VX5B6vpN3Druv6jNp10gqlhYylHAI3E86Hp4qn/Bds0us7RjI&#xA;cMRY7y7rR6CUTxSO/cGN/mF+RmrG91HU/LGoP5iWGUjULaV/Uv45SAxVm6TGhB7Nv0OWaPtXHL0y&#xA;qJHy/Yx1vZOWFTFkS3F8yP0vHJYpYZXimRo5YyVkjcFWVgaEEHcEZuAbdMRWxW4odirOvyPiaX81&#xA;NAVQCRJM+/glvIx/AZh681hl+OrmaD++j+Oj2T/nGcet5e16/oT9Z1Rx6h6txiR9/wDkZ+OavtXa&#xA;UR/Rdp2abjI98nsWap2LsVdirsVdirsVdirsVdirsVdirsVdirsVeOf85FcrH/CHmEbDS9THxiux&#xA;bhMOn/MNm17M34498fx97ru0NuCXdL8fc8S/N7TzYfmV5giIAEt01ypHQi5UTg/8lM22ileKPu+5&#xA;1OtjWWTD8ynFem+RfyJ8x69D+k9ab9BaEimV7i4WkzxqORKRtTitP2noO4rmv1HaEIbR9UnYafs+&#xA;U95emL6I8jeUvJnl7QxN5Shhuo5oyVv0kSWS5K12NwKinJaUHwg9s0eozZJyqe3l3fB3WDFCEfR/&#xA;a8X88XPm3XNW+r61qP1VIys76LdGKP6tyQc/h5JHIFLN6ZLEsu9a5r8vZ/iTkPFjQ5fosdHr+zu2&#xA;IabBCUdPPjltKXLlzo+q/dskP5feaNQ8t+YylpK88LsyelE6KkrKdiDKfSXmFpzIJods02PIYGw9&#xA;h2rooanDchR8+ny327u97n5i/LTyx5/0O01DVrSOz1m5topf0hZOrsrOganqD4JkFdq126HvnUaP&#xA;XZMYB6d3R8l1+hxnJKO/pJANUdu8fofPPn/8m/N3k9pLiSL9IaOpqupW4JVRX/dybtGfn8PvnQ6b&#xA;XQy7cpdzzuo0U8e/OPewPMxwmffkzW38xanrHRdF0e/vS3ShEPpr9JMmYWu3iI/zpAOdoNpmX82J&#xA;L3P/AJxy082v5ZwTEU+vXVxcfOjCGv8AyRzUdqSvN7gHa9nRrEPN6fmuc52KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KsC/PLQm1j8tNVSNec9iFvogO3oNykP/Irnmb2fk4cw89nE1uPixH5vHdX8heYP&#xA;zITyvruhxowvdNS11e7lYKkVzYt6DvId2+NeJVQCTm0hqI4OKMuh29xddk08s/DKPUb/AAereRPy&#xA;S8o+T4l1G8Uarq0I9Rr2dR6cRXcmGLcLT+Y1bwIzW6jXzy7DaLn6fRQx785d7zLz7561y41E6pC5&#xA;tbnn6drdWUmoRKkXD+6kS6SOJuQY7oqkndh0zQdoZ5iRxA+mJ+PLqR+t9F9m+ysGTGMshcpx3EqI&#xA;+rbhF2OQ3I36PQPI35ieVbT8uBHpY4anpdqTNpZI9eSbrJKgYj1FZiX26DbbBj1UY4tvqH4twe0e&#xA;xs51nr/u5y2l/CB0G3LueM+ZvOtx5p1f9J63bReqtutui2q+kNm+2xYuSaM1Knw7Zr8uQzNnm9po&#xA;+zRpcfBiJriv1b/BlP5YaWfMGviG2s4v0RHNJLcQXEUF1CVoAvqQtJE6UUAB05fET2qBPTYzKdft&#xA;dV21m/L4blI+IQACDKJ+Bog+41tXV6D5Oh8xebtHm1iPzNdaXqkNxNAmlwJF9VtPTYhIZIGSsnwU&#xA;NS2ZmCMskeISo93QfB5/tCWHSZBjOGM4GIPESeKV8yJXtv5Mm8reary7vrny15khjtvMVonNlTeC&#xA;7t22E8Nex/aU9PvAycGY3wy2kPtdXr9BCMBmwkywy7+cT/NkxD8wP+cefLuu+rfeXymjaoxLNEAf&#xA;qkrH+ZF3j+abf5JzeabtOcNpeofa81qOz4T3j6T9jy6bytrfkH8v/Mq6zb/V9W1y5t9JsVVg5aFP&#xA;9InkQrXkjiifPNiM0c2WPD9MQT+hwfClhxSv6pGn0h5H0I6D5P0fSGAWW0tY0nA6eqV5Sn6XJzQ6&#xA;jJx5DLvLusMOCAj3BPMpbHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqsmhinheGZBJFKpSRGFQysK&#xA;EEeBGEGleK/lVdv5F8/6x+XWouVs7yU3ehTOdm5LsK+LxqB/rKR3zbayPjYhlHMbF1mlPhZDiPI7&#xA;h7TdXNva20t1cyLFbwI0s0rmioiDkzE+AArmpAJNB2RNbvAta8/+TrvW7lPMwg81aRMCbW6tbVrO&#xA;8tnR6iEktE7REHr6hr+Ga7V5sZyEGOw287Hns9r2T2VrI6cTxTMJyPFvXAYyG1D1b+8W8x1e406+&#xA;1CZ9JsGtLYl5EiLmVwoBY1ICKAAK0C7ZrDze008JwgPElxH5fj5qF9pV/YJE15C0DSluEUg4vRaf&#xA;FxO/E8qA+II7HFnizwyE8Juvx+Pgyr8v/wA1dc8nCS2ijS+0yVub2cpK8X7tG4rxJ77Ee2X4dRLH&#xA;y5Oq7V7DxaypE8Mx1H6Qz3Qte07zZrk+reTJX8u+cmQy3WnzkPZX6r9oPx/a3+1xB7+LC6EuOVw9&#xA;M+7oXQ6rSz0mIY9SPG0/ISH1Q/Z+PJjnn3V9U1Gex85Rm8s76wumsdWs1YKbGaJYwFhkUBgk3xn4&#xA;tuVRlOaZkePlLl7nY9l6fHjEtMeGUZR4oH+eDfMd8dvg9V/LrztP5h1XUbSyheTy9pkaQ22pys7y&#xA;Tzc2+Ms6oSXjoWBGx+eZ+lzGRIH0jr+O95Xtfs0afHGUjWaZsxFUBQ7u4/P4MMvJf+Vk/nTb20B9&#xA;byz5P/eTSDeOS4DAnfoecqBfdUJGdLEeBpyT9c3jSfGz1/DD73uGad2bsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVee/nB+Xc/mnSYdR0hjD5m0c+vpsyHgzhTyMXLahqKoezeAJzO0Wp8OVS+iX&#xA;NxNXp/EjcfqjyXflX+Zlt5u059M1RRbeZ7BTFqdhIvAvxPBpFQ9iftr+ydulKjWaQ4jcfoPIrpdS&#xA;Mgo7THMJJqf5TsPMGmavq8k2uxtLd3GtyMrSBUETPBFBbqWbjy2oORJptvTNZk0WPJMyB4fL9vR6&#xA;bS+0GbBp/CA6bSjsRvdnv226fEsf0Pzf5P8AL3m+2t7eytbfRmklt7n61azQX9o8lDyl9WSUMGZF&#xA;DEBeIFOK03w5zw45iMRysSPP5O3Gi1ur08suScjKUYyhEbAjuP8AS35bfHpf58+Z9JuZ9IbRr6wv&#xA;pPTmFz6aW90yq3AxnmVk4/tU3B75XrZxkRRBcv2X0WSIn4kZx3FfVHvvbZjeifk/reueV5Ne0+6h&#xA;vpZoi0VqC6SicSKWUtIFQn0+W/Lr9+U49NKceKLstT7QYsGcYZgxAPPaqo92/OmNeTQ9v5rtEku7&#xA;nTpUeSMz2alrlXMbIEjUdWdjwp75VA78yPc7PtGpaeVRjMbbS+nmNz5Dm+pPKHlGx8vaVNao8t1N&#xA;ezPd39xdlXllmlA5F+Pw9s3WHCIRrnb5b2h2hPUZBI1ERHDER5ABg/5sfmDPZGPyN5OT1/M2pUhZ&#xA;bYU+qxuN/s7K5X/gV+I02zcaHSCvEntCLotZqpXwR3yS+xlf5ZeQbPyV5Zi02MiW+lPrajcj/dkx&#xA;FCFr+wn2V+/qTmPq9Scs76dG3TYBihTLMxnIdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;eZfmV+U0uq3q+afKU36L83Wp9QSxtwW5oKUY9Fem3LoejbbjYaXWcI4J7w+5wtTpOI8cNpoTyj+b&#xA;cGtC48oechL5c8zlGtZJQfq4kZxx5ROf7qQ1qvY9VPTJ5tEYfvMfqgxw6sS9E/TP8clHXPyJttR1&#xA;6KKC4nh0dYpJp7yWb15jcSEgRRo1AqLRWJpv0rnP5NBE+oS3J5V+Pk9tovajJhhwmANAAdOXf1Jr&#xA;rfwQtn+U9l5JtDrM0j6trUEhNjHHbzTRim/MwRHlULWvJwvTvSscWiEQZS34d/1c23W+0WTVkYYD&#xA;w4ToG/t36DzYlonnP805W1e28uR3N/BcNR5glzc/V36MYXnLPGzeEhY/TvmINRlkSR17h91cnd5O&#xA;yuz8UcfikR4e+QuX9b+d7/7GT/lL+Vd/ZXa+Z/MRmsJbZmeKBpWickfaacFF+Dv9vfvt1u0mlJPE&#xA;du7vdd7QdvQlA4cXDKJG5qx8N/0bI3zh+cGo6zqLeU/y1hOo6rNVZ9WQVhgXozRsfh2/343wjtyJ&#xA;zqMGiEBx5th3PnGXVmR4MW8u/oGTflj+Vtj5PtpLy7l/SHmS+HK/1J6saseTRxlvi48tyx3Y7nsB&#xA;j6vVnKaG0ByDfptKMYs7yPMs7zDcp2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVi/&#xA;nn8t/K/nOz9LVrfjdIKW+oQ0W4j70DUPJf8AJao+nMjT6qeI+nl3NGfTwyipB5ol5+bH5VfBexnz&#xA;X5Pi+zcLy9e3jG25+N4wB2bkngRmw4cGp5eibhcWbBz9cPtDP9B8/wDkj8wNJuNO0/UWhnvIXins&#xA;mIgvEV1KtwB5VoD9pKgZhZdNkwmyNvsczFqIZR6T+tLvMX5mflz+Xtj+ibL05bqGoj0iwozByd/V&#xA;fdUJPXkeXscGl7PnPkOGLPWdpXK8kjKfzLEhoH5qfmm6y+YJG8r+UXIdNOjqJpk6jkpozf60lF7q&#xA;mZ3iYdP9Prn3uB4eXP8AV6Id3X8finrHlPyb5d8qaaNP0S0W3i2Msp+KWVh+1I53Y/gO1M1ubPPI&#xA;bkXYYsMcYqITrKWx2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvOfOP5Fe&#xA;TPMMpvLRG0TVK8hd2QCoWrWrw7LX3XiffM/B2hkhsfUPNw82ihM39J7wj/JH5PeS/KTJcWtsbzU1&#xA;3/SN3SSQH/isUCR/7EV98hqNbky7E0O4M8Gkhj5DfvZvmG5LsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirA/zglvLfRtJuLO8ubKZ9XsLR3tZ5YOUN1cJHKjCNlDVXoTuvamKpl5wtCLj&#xA;y3HFc3kKNqC20qwXU8Rli+rTScJCrrzJaFfiY199ziqSQ/nRYP8AWJn8vatDp9jqX6H1K/dLb0re&#xA;5M624DcJ2Mg9VgCYuQG3jiqvqP5hR6NL5xvpbHVLxPL7Wz3ljW0KpC8Rb17Xi9TGUX1HEjcv8kbj&#xA;FUw1L8yNN0z1Zb20mWzgsLfUJ7uJopkX63J6VvAAjktJLJVUp8JpWtMVQOsfm7pukW2sSXmk331j&#xA;RbeG9ubaI2srNa3DMizK6z8CEdCrjlUdgRviq8fmtbN6ca6FqSXs6Tz2thcrBazzQQen+8iSeWPm&#xA;X9YcUHxbHlxO2KqWq+eJ7TUvMZgt9RS907QYtSt7G4W3+rEMZuEqIj+qH5gpKHZdk2HQlVboP5mX&#xA;rJ5QsdW0a8S88yQIq6kwto7ZrhLYTzHiszsqsoLIKVPQdMVTq3892P8AhnUPMeoWk+n6dYSTx/vP&#xA;TkeYW8hhLRLEz8hJIvGP+bbsRiqEvPzFWzu5tNvdJu7HVW0+bUtOgm9F1uVgFZI1eKR1EkdRzUkb&#xA;GoJxVb+U0k975Qs9auxejUNXgt7u9e9lMiySyQI7S2yepKsULc/hReNKfZGKszxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2Kse89+Uz5p8vtpsd21hdxzQXdjeqgk9K4tpFljYxkqHFVoRXFULaeX/N9&#xA;5qdhd+YtSsZYNLdp7W1sLaWESXJieESzPLNKeKpK1I1HXfkaDFUlX8rNVPlfXtEk1eAy61rC64l0&#xA;to4WGY3sd5JEYzOfUSsIVTzU74qnmk+UL6HXvMGpapc215a+YY4YrixSB0CCCMwgc2lk5q6MeXwj&#xA;fFUlj/KGE/lxd+T7jVJJp52RrfVWjVniFo6GxXgdmWGOGNWH7XxHYtiq/Vvy+8yaz5T1PQrq+0qw&#xA;k1SJbaW4sNOdAIxUu5VrirM+1BUBd/tYqq+e/IWs+bLeKzu59Lms2tnhniu7F5zFO5I+tWriZHjc&#xA;KaAcvpxVq2/LO8hvJy2qrLYzeX4fLfB4WNwIoFk43DTGXi8jNMxYcAMVSPzPos0Hk7y/5Lvtdik8&#xA;6RXNmfLt1ZwiKeP6qwT6z6DSSVVLdZPVb7O5FOgxVmnmPyLpms+RZvJ6SPZ2Rt4re1mj+J4TbFWg&#xA;cVpy4PGp98VS278k69q11b6lrF/aPqlhYXVhp7Q27iFXvgiT3MimTkzGOIBUDALvua7Kp95P0O70&#xA;HyxpmiXNyl42l20VnHcxxmEPHAgjQlC8tG4rv8WKpxirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;YH/ysDzLqVhqGseWNBg1LRtOluIQ9xem2uLtrRmSU20SwTpx5oQpkdeXgOuKshtvN2lyahpWlT87&#xA;fV9WszfRWTKzFI0CmTm4HCqs4Xriqd4qxTRPzF0jVvPWt+UIUKXmjxRTCYn4ZwxKT+mKdIJOKMa/&#xA;aJHbFWV4q7FWLea/NuqaJ5g8uWEdjDPp+uXn1KW7aZllik9N5RSER8WBWP7XqfRirKcVWGCEzCYx&#xA;qZlUqstByCncgN1piq/FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXkEnkKXTtF1PzF+X&#xA;/nS80PT5Dc3wsbgRXGnJKjMZQEmTlEpdTy609+mKpVpqP5j8/eStU8wXN1p+o6v5blupora8uLMe&#xA;srwMFjWORSqulXaPv3rTFXrfnHzANA8u3epKolulCw2FuTT1rudhFbxD/XldR+OKvIPMmk+bfJEH&#xA;lfzfe2FlFD5WkMOu3tnezXU93bajKBdyyQtZWwqZ5DNs5oxO3cKsh866fban+b3ky3N3dnT9Ts9R&#xA;luYYLy4jhlEMKGOixyBVBDmvCnIda4qxe51zU/JujfmZp2jXc9vp+jalpyWMjM9y9lBqAiFy0Xql&#xA;zRFYlAdgd8VT3zhpPlLTvO/5eNpczNqF5qfqkm7lnM8C20g9d1kkfm1WWklK7nfFVy+S7HXfza81&#xA;WF1qWpCztrbS71LaO9m4rOzyPuHZ/g+DaM/D8XT7NFWOeWLbz3568ijXIGsLPzJ9fkmfzDcandJc&#xA;2UkF18VubNbVokiEChPS9XiwPJtziqd6t9Y8t/mjrWjae0q3fnGwtz5dlZ3kS1uPUMN6Y1Ziq+nG&#xA;31lh340Hhiq3yHDN5hn0byprDSvqXkG4uYdamDyR+tHD+609WAI5pcI4l3rX0t+uKoeS51rQdYt9&#xA;U17SzrGmXmuAWPnDTLxhcxrNdlYLa4tnWrQivpFVPGnT4qHFXuWKuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxVja/lv5FW6kuV0W25TSetLFxJgaUty9QwE+iW5b141riqO1jyj5Y1q7srzVtLtr6605u&#xA;dlLPGrtEag/DX3UHFV+t+WfL2urAus6dBqC2r+pbi4RZBG5/aXl0O3XFVTVfL+iavYiw1SyhvbIU&#xA;pbTqHj22FVOxxVAQ+QvJkM9ncRaLaJPp4C2MixKGhUdoj+wPYYqiT5V8tG7v7ttLtmudUj9HUpWi&#xA;Um4joF4TVHxigA+LFUutfyx/L21hEFv5esY41mW4UCFarKgIV1JFQVBNKdMVTC18p+WrTVpNYttN&#xA;t4dVmqZr5EAmeoI+J+p2PfFUFL+XPkWXWH1iTRLRtQkkE0svpijyqeQkeP7DOGFQxWtd8VTmbStO&#xA;n1C21Ga2jkv7JZI7W5YVeNZuPqBT25cBXFXW2laba315fW9tHFeagYze3CqA8piXhHzPfiuwxVLb&#xA;TyP5StLtLq30yFJY5WuYRQmOOdiS00cZJjSQljV1UH3xVPMVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVf/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:59F8CEBD2A206811A120DF0CF3DE0832</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:59F8CEBD2A206811A120DF0CF3DE0832</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:58F8CEBD2A206811A120DF0CF3DE0832</stRef:instanceID>
            <stRef:documentID>xmp.did:58F8CEBD2A206811A120DF0CF3DE0832</stRef:documentID>
            <stRef:originalDocumentID>uuid:ED579150C5B7DD11811493F8744A25C3</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:OriginalDocumentID>uuid:ED579150C5B7DD11811493F8744A25C3</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:74117FD020071168B976CBD4A7D04F06</stEvt:instanceID>
                  <stEvt:when>2011-01-18T11:56:10Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:74117FD420071168B976CBD4A7D04F06</stEvt:instanceID>
                  <stEvt:when>2011-01-18T12:12:02Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:74117FD520071168B976CBD4A7D04F06</stEvt:instanceID>
                  <stEvt:when>2011-01-18T12:15:14Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0380117407206811871F82082B23A4D6</stEvt:instanceID>
                  <stEvt:when>2014-03-05T09:11:55Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FB7F117407206811A120DF0CF3DE0832</stEvt:instanceID>
                  <stEvt:when>2014-03-27T09:37:51Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0080117407206811A120DF0CF3DE0832</stEvt:instanceID>
                  <stEvt:when>2014-03-27T11:01:12Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:772EBE8621206811A120DF0CF3DE0832</stEvt:instanceID>
                  <stEvt:when>2014-03-27T12:32:19Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:58F8CEBD2A206811A120DF0CF3DE0832</stEvt:instanceID>
                  <stEvt:when>2014-03-27T13:19:56Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:59F8CEBD2A206811A120DF0CF3DE0832</stEvt:instanceID>
                  <stEvt:when>2014-03-27T13:22:45Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>True</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>17.050983</stDim:w>
            <stDim:h>21.100521</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>St Andrews Blue</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>68.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>12.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>St Andrews Yellow</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>St Andrews Red</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>95.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 8.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -59.8115 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 59.8115 li
48.332 59.8115 li
48.332 0 li
cp
clp
[1 0 0 1 0 0 ]ct
14.4067 40.0117 mo
14.4067 39.877 14.3999 39.7832 14.3755 39.7441 cv
14.354 39.709 14.3105 39.6943 14.2251 39.6895 cv
14.0532 39.6807 li
14.0532 39.5713 li
14.2388 39.5801 14.4067 39.583 14.5825 39.583 cv
14.7476 39.583 14.915 39.5801 15.1016 39.5713 cv
15.1016 39.6807 li
14.9297 39.6895 li
14.8438 39.6943 14.8008 39.709 14.7793 39.7441 cv
14.7544 39.7832 14.7476 39.877 14.7476 40.0117 cv
14.7476 41.2441 li
14.7476 41.751 15.0117 41.8975 15.4844 41.8975 cv
15.8701 41.8975 16.2207 41.751 16.2207 41.1572 cv
16.2207 40.0117 li
16.2207 39.877 16.2148 39.7832 16.1895 39.7441 cv
16.168 39.709 16.125 39.6982 16.0391 39.6895 cv
15.8818 39.6807 li
15.8818 39.5713 li
16.0244 39.5762 16.168 39.583 16.2949 39.583 cv
16.4395 39.583 16.5684 39.5762 16.7256 39.5713 cv
16.7256 39.6807 li
16.5684 39.6895 li
16.4824 39.6982 16.4395 39.709 16.418 39.7441 cv
16.3926 39.7832 16.3848 39.877 16.3848 40.0117 cv
16.3848 41.0469 li
16.3848 41.8125 16.0957 42.1201 15.373 42.1201 cv
14.7651 42.1201 14.4067 41.9375 14.4067 41.2822 cv
14.4067 40.0117 li
cp
true sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 nzopmsc
f
17.4082 41.6836 mo
17.4082 41.7793 17.4121 41.8506 17.4258 41.8906 cv
17.4404 41.9219 17.4805 41.9375 17.541 41.9414 cv
17.7012 41.9512 li
17.7012 42.0586 li
17.5762 42.0557 17.4336 42.0488 17.2578 42.0488 cv
17.083 42.0488 16.9395 42.0557 16.8145 42.0586 cv
16.8145 41.9512 li
16.9766 41.9414 li
17.0361 41.9375 17.0762 41.9219 17.0898 41.8906 cv
17.1035 41.8506 17.1094 41.7793 17.1094 41.6836 cv
17.1094 40.8779 li
17.1094 40.7637 17.1006 40.6855 17.083 40.6563 cv
17.0625 40.627 17.0254 40.6172 16.9512 40.6172 cv
16.8184 40.6172 li
16.8184 40.5176 li
17.0293 40.4961 17.2441 40.4268 17.376 40.3711 cv
17.4082 40.3848 li
17.4082 40.6885 li
17.416 40.6885 li
17.6797 40.46 li
17.7598 40.3916 17.8271 40.3711 17.9707 40.3711 cv
18.3887 40.3711 18.5605 40.6035 18.5605 40.9932 cv
18.5605 41.6836 li
18.5605 41.7793 18.5645 41.8506 18.5781 41.8906 cv
18.5938 41.9219 18.6328 41.9375 18.6934 41.9414 cv
18.8398 41.9512 li
18.8398 42.0586 li
18.75 42.0557 18.6465 42.0488 18.5469 42.0488 cv
18.4473 42.0488 18.3428 42.0557 18.2598 42.0586 cv
18.2598 41.043 li
18.2598 40.7471 18.0918 40.5889 17.8477 40.5889 cv
17.6309 40.5889 17.4082 40.7783 17.4082 40.9248 cv
17.4082 41.6836 li
cp
f
19.5801 39.791 mo
19.5801 39.8945 19.4824 39.9873 19.3799 39.9873 cv
19.2754 39.9873 19.1836 39.8945 19.1836 39.791 cv
19.1836 39.6875 19.2754 39.5898 19.3799 39.5898 cv
19.4824 39.5898 19.5801 39.6875 19.5801 39.791 cv
cp
19.5469 41.6836 mo
19.5469 41.7793 19.5508 41.8506 19.5664 41.8906 cv
19.5801 41.9219 19.6191 41.9375 19.6797 41.9414 cv
19.8447 41.9512 li
19.8447 42.0586 li
19.7158 42.0557 19.5723 42.0488 19.3975 42.0488 cv
19.2227 42.0488 19.0801 42.0557 18.9492 42.0586 cv
18.9492 41.9512 li
19.1152 41.9414 li
19.1758 41.9375 19.2148 41.9219 19.2285 41.8906 cv
19.2441 41.8506 19.248 41.7793 19.248 41.6836 cv
19.248 40.8779 li
19.248 40.7637 19.2402 40.6855 19.2227 40.6563 cv
19.2012 40.627 19.1641 40.6172 19.0898 40.6172 cv
18.957 40.6172 li
18.957 40.5176 li
19.168 40.4961 19.3828 40.4268 19.5156 40.3711 cv
19.5469 40.3848 li
19.5469 41.6836 li
cp
f
21.1113 41.6836 mo
21.0508 41.8154 21.0137 41.9512 20.9639 42.0732 cv
20.7852 42.0732 li
20.1699 40.6318 li
20.1484 40.582 20.127 40.5176 20.0586 40.5137 cv
19.9375 40.5068 li
19.9375 40.4072 li
20.0771 40.4102 20.2168 40.416 20.3555 40.416 cv
20.4961 40.416 20.6309 40.4102 20.7715 40.4072 cv
20.7715 40.5068 li
20.5957 40.5137 li
20.502 40.5176 20.4785 40.5674 20.5371 40.7178 cv
20.9639 41.748 li
21.0391 41.584 21.1172 41.415 21.1855 41.2471 cv
21.3369 40.8672 li
21.4336 40.6211 21.4258 40.5176 21.3184 40.5137 cv
21.1719 40.5068 li
21.1719 40.4072 li
21.2832 40.4102 21.3975 40.416 21.5078 40.416 cv
21.6191 40.416 21.7344 40.4102 21.8438 40.4072 cv
21.8438 40.5068 li
21.7344 40.5137 li
21.6445 40.5205 21.583 40.6465 21.5332 40.7539 cv
21.1113 41.6836 li
cp
f
22.2979 41.082 mo
22.5918 41.1152 22.8926 41.1074 23.1504 41.0938 cv
23.1504 40.7607 23.0273 40.4883 22.7695 40.4883 cv
22.4961 40.4883 22.2803 40.6914 22.2979 41.082 cv
cp
23.4688 41.0254 mo
23.4688 41.0752 23.4688 41.125 23.4609 41.1758 cv
23.2461 41.2109 23.0273 41.2246 22.8135 41.2246 cv
22.292 41.2246 li
22.292 41.6436 22.499 41.9307 22.9395 41.9307 cv
23.1113 41.9307 23.2461 41.8447 23.3828 41.7617 cv
23.4287 41.7979 li
23.3574 41.9199 li
23.332 41.9619 23.0273 42.1201 22.7852 42.1201 cv
22.2451 42.1201 21.958 41.7773 21.958 41.293 cv
21.958 40.9463 22.0518 40.7383 22.2168 40.6094 cv
22.2832 40.5566 22.3594 40.502 22.4375 40.4668 cv
22.5635 40.4102 22.667 40.3711 22.7891 40.3711 cv
23.1777 40.3711 23.4688 40.6211 23.4688 41.0254 cv
cp
f
23.9502 40.8779 mo
23.9502 40.7637 23.9434 40.6855 23.9258 40.6563 cv
23.9043 40.627 23.8682 40.6172 23.793 40.6172 cv
23.6602 40.6172 li
23.6602 40.5176 li
23.873 40.4961 24.0879 40.4268 24.2188 40.3711 cv
24.252 40.3848 li
24.252 40.7471 li
24.2578 40.7471 li
24.4512 40.5176 li
24.5371 40.4131 24.6592 40.3711 24.752 40.3711 cv
24.8125 40.3711 24.8877 40.3887 24.917 40.4102 cv
24.8848 40.8398 li
24.8105 40.8398 li
24.7705 40.7539 24.6953 40.6738 24.5664 40.6738 cv
24.4082 40.6738 24.252 40.8398 24.252 41.0684 cv
24.252 41.6836 li
24.252 41.7793 24.2549 41.8506 24.2695 41.8906 cv
24.2832 41.9219 24.3379 41.9375 24.4199 41.9414 cv
24.6055 41.9512 li
24.6055 42.0586 li
24.4199 42.0557 24.2773 42.0488 24.1016 42.0488 cv
23.9258 42.0488 23.7832 42.0557 23.6543 42.0586 cv
23.6543 41.9512 li
23.8184 41.9414 li
23.8789 41.9375 23.918 41.9219 23.9336 41.8906 cv
23.9473 41.8506 23.9502 41.7793 23.9502 41.6836 cv
23.9502 40.8779 li
cp
f
25.2461 41.5371 mo
25.2461 41.6836 li
25.2461 41.9043 25.5 41.9863 25.707 41.9863 cv
25.9336 41.9863 26.127 41.8555 26.127 41.6621 cv
26.127 41.5469 26.0654 41.4551 25.9551 41.4268 cv
25.7969 41.3867 25.5996 41.3467 25.4277 41.2822 cv
25.2568 41.2188 25.125 41.1113 25.125 40.8936 cv
25.125 40.5068 25.4609 40.3711 25.7969 40.3711 cv
25.9648 40.3711 26.1191 40.4102 26.2578 40.46 cv
26.2471 40.5889 26.2441 40.7197 26.2402 40.8643 cv
26.1406 40.8643 li
26.1406 40.7822 li
26.1406 40.5957 25.9277 40.4883 25.7256 40.4883 cv
25.4219 40.4883 25.374 40.6563 25.374 40.7783 cv
25.374 40.9316 25.4941 41.0137 25.7637 41.0605 cv
26.1914 41.1328 26.3906 41.2402 26.3906 41.5195 cv
26.3906 41.9131 25.9961 42.1201 25.5996 42.1201 cv
25.4277 42.1201 25.2734 42.0947 25.0996 42.0332 cv
25.1348 41.877 25.1387 41.7051 25.1387 41.5371 cv
25.2461 41.5371 li
cp
f
27.2129 39.791 mo
27.2129 39.8945 27.1172 39.9873 27.0137 39.9873 cv
26.9092 39.9873 26.8164 39.8945 26.8164 39.791 cv
26.8164 39.6875 26.9092 39.5898 27.0137 39.5898 cv
27.1172 39.5898 27.2129 39.6875 27.2129 39.791 cv
cp
27.1816 41.6836 mo
27.1816 41.7793 27.1846 41.8506 27.1992 41.8906 cv
27.2129 41.9219 27.252 41.9375 27.3135 41.9414 cv
27.4785 41.9512 li
27.4785 42.0586 li
27.3496 42.0557 27.207 42.0488 27.0313 42.0488 cv
26.8555 42.0488 26.7129 42.0557 26.584 42.0586 cv
26.584 41.9512 li
26.748 41.9414 li
26.8086 41.9375 26.8477 41.9219 26.8623 41.8906 cv
26.877 41.8506 26.8809 41.7793 26.8809 41.6836 cv
26.8809 40.8779 li
26.8809 40.7637 26.874 40.6855 26.8555 40.6563 cv
26.834 40.627 26.7988 40.6172 26.7236 40.6172 cv
26.5918 40.6172 li
26.5918 40.5176 li
26.8008 40.4961 27.0176 40.4268 27.1494 40.3711 cv
27.1816 40.3848 li
27.1816 41.6836 li
cp
f
27.627 40.6953 mo
27.627 40.6211 li
27.9072 40.4961 li
27.9072 40.2451 li
27.9072 40.1514 27.9043 40.0586 27.8926 39.9629 cv
28.0225 39.9229 28.1367 39.8672 28.1973 39.8271 cv
28.2402 39.8672 li
28.2188 40.0225 28.2012 40.2246 28.2012 40.374 cv
28.2012 40.5098 li
28.6904 40.4883 li
28.6582 40.6816 li
28.2012 40.6816 li
28.2012 41.6191 li
28.2012 41.7842 28.2471 41.8662 28.3965 41.8662 cv
28.4902 41.8662 28.5586 41.8262 28.6084 41.7979 cv
28.6553 41.8594 li
28.4824 42.0488 li
28.4512 42.084 28.3262 42.0908 28.251 42.0908 cv
28.0605 42.0908 27.9004 42.002 27.9004 41.7109 cv
27.9004 40.6816 li
27.627 40.6953 li
cp
f
30.2051 40.6953 mo
30.2578 40.5645 30.2051 40.5244 30.0762 40.5137 cv
29.9824 40.5068 li
29.9824 40.4072 li
30.0967 40.4102 30.208 40.416 30.3223 40.416 cv
30.4365 40.416 30.5469 40.4102 30.6621 40.4072 cv
30.6621 40.5068 li
30.5625 40.5137 li
30.4746 40.5205 30.3965 40.6318 30.2607 40.9463 cv
29.5352 42.6221 li
29.4219 42.8818 29.291 43.0605 28.9922 43.0605 cv
28.9297 43.0605 28.8516 43.0322 28.8125 43.0059 cv
28.8975 42.7393 li
28.9453 42.7393 li
28.9883 42.7813 29.0762 42.8242 29.127 42.8223 cv
29.335 42.8066 29.4492 42.5166 29.5176 42.3525 cv
29.5996 42.1328 li
29.5371 41.9658 29.4668 41.791 29.3994 41.626 cv
29.0098 40.6885 li
28.9512 40.5527 28.9014 40.5205 28.8223 40.5137 cv
28.7578 40.5068 li
28.7578 40.4072 li
28.8975 40.4102 29.0352 40.416 29.1738 40.416 cv
29.3145 40.416 29.4492 40.4102 29.5889 40.4072 cv
29.5889 40.5068 li
29.4531 40.5137 li
29.3525 40.5176 29.291 40.5527 29.3672 40.7471 cv
29.5957 41.3467 li
29.6465 41.4824 29.7031 41.6113 29.7773 41.7393 cv
30.2051 40.6953 li
cp
f
31.6875 41.1289 mo
31.6875 41.5039 31.8242 42.002 32.2822 42.002 cv
32.6074 42.002 32.748 41.6758 32.748 41.3438 cv
32.748 40.8828 32.5293 40.4883 32.1855 40.4883 cv
31.8066 40.4883 31.6875 40.7959 31.6875 41.1289 cv
cp
31.3555 41.2822 mo
31.3555 40.7471 31.6914 40.3711 32.2676 40.3711 cv
32.7266 40.3711 33.0801 40.7285 33.0801 41.1865 cv
33.0801 41.7334 32.6895 42.1201 32.1426 42.1201 cv
31.6914 42.1328 31.3555 41.7773 31.3555 41.2822 cv
cp
f
34.4141 39.7578 mo
34.3711 39.7803 li
34.3066 39.7188 34.2246 39.6807 34.1348 39.6807 cv
33.9121 39.6807 33.873 39.7832 33.873 40.1914 cv
33.873 40.4961 li
34.3438 40.4824 li
34.3184 40.6709 li
33.873 40.6709 li
33.873 41.6836 li
33.873 41.7793 33.877 41.8506 33.8926 41.8906 cv
33.9063 41.9219 33.9453 41.9375 34.0068 41.9414 cv
34.1719 41.9512 li
34.1719 42.0586 li
34.041 42.0557 33.8994 42.0488 33.7236 42.0488 cv
33.5488 42.0488 33.4063 42.0557 33.2754 42.0586 cv
33.2754 41.9512 li
33.4414 41.9414 li
33.502 41.9375 33.541 41.9219 33.5557 41.8906 cv
33.5703 41.8506 33.5742 41.7793 33.5742 41.6836 cv
33.5742 40.6709 li
33.3271 40.6855 li
33.3271 40.6074 li
33.5742 40.4961 li
33.5742 40.3447 li
33.5742 40.1094 33.6201 39.9473 33.7236 39.8291 cv
33.9316 39.5938 li
34.0234 39.4873 34.1533 39.4434 34.2539 39.4434 cv
34.3066 39.4434 34.3652 39.4629 34.4141 39.4824 cv
34.4141 39.7578 li
cp
f
14.896 44.707 mo
14.8696 44.46 li
14.8564 44.3418 14.8389 44.2988 14.6777 44.1982 cv
14.5566 44.125 14.373 44.0938 14.2031 44.0938 cv
13.8984 44.0938 13.5591 44.2988 13.5591 44.7305 cv
13.5591 45.0244 13.7329 45.209 14.2773 45.2705 cv
14.8906 45.334 15.2793 45.4863 15.2793 45.9834 cv
15.2793 46.7266 14.6118 47.084 13.9648 47.084 cv
13.6597 47.084 13.3633 46.9883 13.2202 46.918 cv
13.2549 46.6914 13.2549 46.458 13.251 46.2529 cv
13.3887 46.2529 li
13.4243 46.5439 li
13.4463 46.7266 13.7905 46.8926 14.1348 46.8926 cv
14.5259 46.8926 14.9131 46.6523 14.9131 46.2227 cv
14.9131 45.8086 14.5918 45.6914 14.1475 45.6396 cv
13.4648 45.5615 13.1938 45.3457 13.1938 44.8955 cv
13.1938 44.2217 13.7871 43.9121 14.3076 43.9121 cv
14.6563 43.9121 14.918 44.0234 15.0967 44.0938 cv
15.0527 44.3164 15.0352 44.5039 15.0352 44.707 cv
14.896 44.707 li
cp
f
15.4707 45.3535 mo
15.4707 45.2617 li
15.8105 45.1074 li
15.8105 44.8037 li
15.8105 44.6895 15.8057 44.5771 15.793 44.46 cv
15.9473 44.4121 16.0879 44.3418 16.1621 44.2949 cv
16.2129 44.3418 li
16.1885 44.5332 16.167 44.7773 16.167 44.959 cv
16.167 45.126 li
16.7617 45.0996 li
16.7236 45.334 li
16.167 45.334 li
16.167 46.4746 li
16.167 46.6738 16.2236 46.7744 16.4053 46.7744 cv
16.5195 46.7744 16.6016 46.7266 16.6621 46.6914 cv
16.7197 46.7676 li
16.5098 46.9961 li
16.4707 47.041 16.3193 47.0488 16.2275 47.0488 cv
15.9961 47.0488 15.8008 46.9395 15.8008 46.5879 cv
15.8008 45.334 li
15.4707 45.3535 li
cp
f
19.8672 45.8262 mo
19.3174 44.5283 li
18.7646 45.8262 li
19.8672 45.8262 li
cp
20.5508 46.4219 mo
20.5889 46.5098 20.6357 46.627 20.6885 46.7188 cv
20.7363 46.8008 20.7852 46.8574 20.8613 46.8662 cv
21.0107 46.8799 li
21.0107 47.0098 li
20.8203 47.0068 20.6289 46.9961 20.4336 46.9961 cv
20.2793 46.9961 20.0879 47.0068 19.8535 47.0098 cv
19.8535 46.8799 li
20.0586 46.8662 li
20.1494 46.8623 20.2363 46.833 20.2363 46.7803 cv
20.2363 46.7188 20.1875 46.6045 20.1465 46.5 cv
19.9453 46 li
18.6914 46 li
18.5684 46.293 li
18.5303 46.3838 18.418 46.6738 18.418 46.7441 cv
18.418 46.8359 18.4912 46.8535 18.625 46.8662 cv
18.7861 46.8799 li
18.7861 47.0098 li
18.5781 47.0068 18.4121 46.9961 18.2861 46.9961 cv
18.1162 46.9961 17.9512 47.0068 17.7861 47.0098 cv
17.7861 46.8799 li
17.9473 46.8662 li
18.0508 46.8574 18.1338 46.7676 18.1816 46.6523 cv
18.957 44.8896 li
19.0918 44.5859 19.2393 44.2637 19.3574 43.9492 cv
19.4951 43.9492 li
20.5508 46.4219 li
cp
f
21.8555 46.5527 mo
21.8555 46.6699 21.8594 46.7568 21.877 46.8066 cv
21.8945 46.8457 21.9424 46.8623 22.0156 46.8662 cv
22.2129 46.8799 li
22.2129 47.0098 li
22.0605 47.0068 21.8848 46.9961 21.6729 46.9961 cv
21.459 46.9961 21.2852 47.0068 21.1328 47.0098 cv
21.1328 46.8799 li
21.3281 46.8662 li
21.4023 46.8623 21.4502 46.8457 21.4678 46.8066 cv
21.4844 46.7568 21.4902 46.6699 21.4902 46.5527 cv
21.4902 45.5732 li
21.4902 45.4346 21.4805 45.3389 21.459 45.3047 cv
21.4326 45.2705 21.3887 45.2559 21.2979 45.2559 cv
21.1367 45.2559 li
21.1367 45.1348 li
21.3945 45.1074 21.6553 45.0244 21.8164 44.9551 cv
21.8555 44.9736 li
21.8555 45.3438 li
21.8633 45.3438 li
22.1855 45.0645 li
22.2822 44.9824 22.3633 44.9551 22.5371 44.9551 cv
23.0469 44.9551 23.2559 45.2383 23.2559 45.7119 cv
23.2559 46.5527 li
23.2559 46.6699 23.2607 46.7568 23.2773 46.8066 cv
23.2959 46.8457 23.3428 46.8623 23.418 46.8662 cv
23.5957 46.8799 li
23.5957 47.0098 li
23.4883 47.0068 23.3604 46.9961 23.2402 46.9961 cv
23.1172 46.9961 22.9912 47.0068 22.8916 47.0098 cv
22.8916 45.7734 li
22.8916 45.4131 22.6855 45.2217 22.3906 45.2217 cv
22.125 45.2217 21.8555 45.4512 21.8555 45.6299 cv
21.8555 46.5527 li
cp
f
25.4316 45.4746 mo
25.4316 45.3867 25.0801 45.1523 24.8184 45.1602 cv
24.374 45.1719 24.1699 45.4248 24.1699 45.957 cv
24.1699 46.3623 24.3965 46.8008 24.8486 46.8008 cv
25.0313 46.8008 25.207 46.6738 25.3232 46.5273 cv
25.4453 46.375 25.4316 46.2266 25.4316 46.0361 cv
25.4316 45.4746 li
cp
25.4316 44.2988 mo
25.4316 44.1982 25.4199 44.1191 25.3232 44.1191 cv
25.0801 44.1191 li
25.0801 43.9971 li
25.3115 43.9639 25.543 43.9238 25.7598 43.8369 cv
25.7979 43.8711 li
25.7979 46.5527 li
25.7979 46.6699 25.8027 46.7568 25.8203 46.8066 cv
25.8379 46.8457 25.8848 46.8623 25.959 46.8662 cv
26.1602 46.8799 li
26.1602 47.0098 li
25.9805 47.0068 25.8711 46.9961 25.7627 46.9961 cv
25.6504 46.9961 25.543 47.0068 25.4287 47.0098 cv
25.4492 46.6084 li
24.9668 47.0137 li
24.9277 47.0439 24.8027 47.0488 24.6895 47.0488 cv
24.0801 47.0488 23.793 46.6152 23.793 46.043 cv
23.793 45.6484 23.9824 45.3535 24.2012 45.2383 cv
24.584 45.0371 li
24.7139 44.9688 24.832 44.9551 24.9063 44.9551 cv
25.1016 44.9551 25.2441 45.0117 25.4316 45.0947 cv
25.4316 44.2988 li
cp
f
26.7529 45.5732 mo
26.7529 45.4346 26.7441 45.3389 26.7207 45.3047 cv
26.6934 45.2705 26.6523 45.2559 26.5605 45.2559 cv
26.3984 45.2559 li
26.3984 45.1348 li
26.6563 45.1074 26.916 45.0244 27.0781 44.9551 cv
27.1172 44.9736 li
27.1172 45.4131 li
27.127 45.4131 li
27.3613 45.1348 li
27.4648 45.0078 27.6113 44.9551 27.7266 44.9551 cv
27.7988 44.9551 27.8926 44.9766 27.9277 45.0039 cv
27.8887 45.5254 li
27.7959 45.5254 li
27.749 45.4219 27.6563 45.3262 27.5 45.3262 cv
27.3086 45.3262 27.1172 45.5254 27.1172 45.8047 cv
27.1172 46.5527 li
27.1172 46.6699 27.1211 46.7568 27.1396 46.8066 cv
27.1563 46.8457 27.2207 46.8623 27.3213 46.8662 cv
27.5469 46.8799 li
27.5469 47.0098 li
27.3213 47.0068 27.1455 46.9961 26.9336 46.9961 cv
26.7207 46.9961 26.5479 47.0068 26.3887 47.0098 cv
26.3887 46.8799 li
26.5898 46.8662 li
26.665 46.8623 26.7109 46.8457 26.7295 46.8066 cv
26.7471 46.7568 26.7529 46.6699 26.7529 46.5527 cv
26.7529 45.5732 li
cp
f
28.4668 45.8223 mo
28.8242 45.8613 29.1895 45.8516 29.5039 45.835 cv
29.5039 45.4316 29.3555 45.0996 29.041 45.0996 cv
28.707 45.0996 28.4453 45.3457 28.4668 45.8223 cv
cp
29.8906 45.752 mo
29.8906 45.8135 29.8906 45.875 29.8818 45.9336 cv
29.6211 45.9785 29.3555 45.9961 29.0938 45.9961 cv
28.458 45.9961 li
28.458 46.5059 28.7109 46.8535 29.2461 46.8535 cv
29.4551 46.8535 29.6211 46.75 29.7852 46.6484 cv
29.8408 46.6914 li
29.7559 46.8398 li
29.7246 46.8926 29.3555 47.084 29.0586 47.084 cv
28.4023 47.084 28.0537 46.667 28.0537 46.0791 cv
28.0537 45.6563 28.166 45.4043 28.3672 45.248 cv
28.4492 45.1816 28.541 45.1172 28.6367 45.0732 cv
28.7891 45.0039 28.9141 44.9551 29.0645 44.9551 cv
29.5371 44.9551 29.8906 45.2617 29.8906 45.752 cv
cp
f
31.8223 44.9551 mo
31.9219 44.9551 li
31.9629 45.082 32.0039 45.1953 32.0498 45.3086 cv
32.5479 46.5703 li
32.6182 46.3916 32.6914 46.2129 32.7588 46.0303 cv
32.9756 45.4219 li
33.0459 45.2295 32.998 45.1387 32.8359 45.1289 cv
32.6875 45.1191 li
32.6875 44.999 li
32.832 45.0039 32.9707 45.0117 33.1152 45.0117 cv
33.2578 45.0117 33.3975 45.0039 33.541 44.999 cv
33.541 45.1191 li
33.4268 45.1289 li
33.3281 45.1387 33.2578 45.2559 33.1504 45.5098 cv
32.8535 46.1875 li
32.7363 46.458 32.6533 46.75 32.5537 47.0264 cv
32.3545 47.0264 li
31.7617 45.5391 li
31.6865 45.6992 31.6045 45.8652 31.5371 46.0264 cv
31.1094 47.0264 li
30.9043 47.0264 li
30.459 45.5645 li
30.3457 45.2012 30.2803 45.1387 30.1719 45.1289 cv
30.0488 45.1191 li
30.0488 44.999 li
30.2246 45.0039 30.3945 45.0117 30.5684 45.0117 cv
30.7432 45.0117 30.9131 45.0039 31.0859 44.999 cv
31.0859 45.1191 li
30.9131 45.1289 li
30.7637 45.1387 30.7168 45.1865 30.7637 45.3438 cv
31.1309 46.5439 li
31.1875 46.4277 31.2344 46.3096 31.2871 46.1914 cv
31.8223 44.9551 li
cp
f
33.9629 46.375 mo
33.9629 46.5527 li
33.9629 46.8213 34.2734 46.9229 34.5254 46.9229 cv
34.7988 46.9229 35.0332 46.7637 35.0332 46.5273 cv
35.0332 46.3887 34.959 46.2754 34.8242 46.2402 cv
34.6338 46.1914 34.3936 46.1445 34.1855 46.0664 cv
33.9766 45.9873 33.8164 45.8555 33.8164 45.5918 cv
33.8164 45.1191 34.2236 44.9551 34.6338 44.9551 cv
34.8379 44.9551 35.0254 45.0039 35.1953 45.0645 cv
35.1816 45.2217 35.1758 45.3818 35.1729 45.5566 cv
35.0508 45.5566 li
35.0508 45.457 li
35.0508 45.2295 34.7949 45.0996 34.5449 45.0996 cv
34.1777 45.0996 34.1191 45.3047 34.1191 45.4512 cv
34.1191 45.6396 34.2617 45.7402 34.5938 45.7969 cv
35.1133 45.8828 35.3555 46.0137 35.3555 46.3516 cv
35.3555 46.833 34.877 47.084 34.3936 47.084 cv
34.1855 47.084 34 47.0527 33.7852 46.9795 cv
33.8281 46.7871 33.834 46.5781 33.834 46.375 cv
33.9629 46.375 li
cp
f
14.8423 13.5015 mo
14.8208 14.084 14.7114 17.1548 14.7114 17.1548 cv
14.627 19.2979 14.5542 21.1787 14.5542 22.853 cv
14.5542 30.2197 15.9785 33.5737 24.1738 37.5488 cv
32.3701 33.5737 33.7939 30.2207 33.7939 22.8569 cv
33.7939 21.1812 33.7207 19.2979 33.6367 17.1533 cv
33.6367 17.1533 33.5293 14.084 33.5068 13.5015 cv
14.8423 13.5015 li
cp
false sop
0 0 0 0 cmyk
f
25.1973 18.5869 mo
25.1855 18.5444 li
25.7305 18.187 26.0889 17.6021 26.0889 17.0337 cv
26.0889 16.0752 25.2148 15.2964 24.1494 15.2964 cv
23.0879 15.2964 22.2031 16.0752 22.2031 17.0337 cv
22.2031 17.6021 22.5586 18.187 23.1064 18.5444 cv
23.0938 18.5869 li
22.293 18.2202 21.709 17.4639 21.709 16.6772 cv
21.709 15.5459 22.8379 14.6074 24.1543 14.6074 cv
25.4727 14.6074 26.5781 15.5459 26.5781 16.6772 cv
26.5781 17.4639 26 18.2202 25.1973 18.5869 cv
cp
24.7646 18.6821 mo
24.7471 18.6392 li
24.7471 18.6392 24.8779 18.584 25.0488 18.4761 cv
25.3906 18.2681 25.6699 17.8413 25.6699 17.4312 cv
25.6699 16.7109 24.998 16.1245 24.1523 16.1245 cv
23.3115 16.1245 22.6191 16.7109 22.6191 17.4312 cv
22.6191 17.8413 22.9014 18.2681 23.2363 18.4761 cv
23.4141 18.584 23.5449 18.6392 23.5449 18.6392 cv
23.5254 18.6821 li
23.5254 18.6821 23.3809 18.6274 23.2051 18.519 cv
22.6152 18.1587 22.3008 17.5669 22.3008 17.0337 cv
22.3008 16.1279 23.1416 15.3911 24.1494 15.3911 cv
25.1602 15.3911 25.9902 16.1279 25.9902 17.0337 cv
25.9902 17.5669 25.6738 18.1587 25.0869 18.519 cv
24.9102 18.6274 24.7646 18.6821 24.7646 18.6821 cv
cp
32.9326 14.1323 mo
15.4395 14.1323 li
15.2549 19.0117 li
33.1309 19.0117 li
32.9326 14.1323 li
cp
0 .95 1 0 cmyk
f
24.1113 22.5522 mo
24.1934 22.5522 li
24.3398 22.3945 24.5156 22.2983 24.7471 22.2983 cv
25.1172 22.2983 25.5234 22.459 25.8633 22.4546 cv
26.1846 22.4512 26.3906 22.2905 26.417 22.27 cv
26.417 19.5332 li
26.4688 19.6782 26.6348 19.8306 26.7598 19.8208 cv
26.7598 22.5229 li
26.6162 22.6318 26.4492 22.6738 26.2656 22.6797 cv
25.8203 22.6948 25.2793 22.4893 24.8164 22.4907 cv
24.5605 22.4912 24.3359 22.5566 24.1523 22.7534 cv
23.9707 22.5566 23.7344 22.4912 23.4785 22.4907 cv
23.0137 22.4893 22.4795 22.6948 22.0332 22.6797 cv
21.8496 22.6738 21.6787 22.6318 21.5391 22.5229 cv
21.5391 19.8208 li
21.6621 19.8159 21.8145 19.6729 21.8848 19.5332 cv
21.8848 22.2637 li
21.9141 22.2847 22.0957 22.4619 22.4336 22.4619 cv
22.7744 22.4619 23.1943 22.2983 23.5508 22.2983 cv
23.8926 22.2983 24.1113 22.5522 24.1113 22.5522 cv
cp
f
23.9551 26.7837 mo
23.8984 26.7036 23.8848 26.5718 23.9414 26.4873 cv
24.0762 26.5732 24.1973 26.5879 24.3516 26.6147 cv
24.2188 26.6538 24.0645 26.7026 23.9551 26.7837 cv
cp
30.9434 30.7754 mo
30.8896 30.6006 30.7324 30.4556 30.5771 30.4424 cv
30.6094 30.4741 30.6357 30.4976 30.6621 30.5293 cv
30.8223 30.7144 30.7285 31.1294 30.5605 31.23 cv
30.6328 30.9814 30.4395 30.7822 30.1895 30.8525 cv
30.2852 30.9053 30.3398 31.0635 30.2988 31.2139 cv
30.2598 31.3545 30.0996 31.4868 29.9385 31.4575 cv
29.7246 31.4175 29.8447 31.1362 29.8379 30.9561 cv
29.8301 30.7026 29.668 30.5811 29.5488 30.5244 cv
29.5342 30.5176 29.5469 30.5 29.5469 30.5 cv
29.6309 30.5225 29.7129 30.5562 29.8281 30.5552 cv
29.9863 30.5537 30.1113 30.4658 30.1621 30.3955 cv
30.2246 30.3179 30.25 30.1831 30.2139 30.0845 cv
30.1875 30.1284 30.1504 30.1782 30.1113 30.2139 cv
30.0215 30.2998 29.8418 30.3105 29.7109 30.248 cv
29.5771 30.1855 29.4482 30.0483 29.3467 29.9146 cv
29.001 29.4438 28.582 28.9653 28.1504 28.6816 cv
27.8828 28.5073 27.5303 28.3647 27.1934 28.355 cv
26.9863 28.3491 26.7852 28.3916 26.6074 28.5039 cv
26.373 28.6538 26.2295 28.9131 26.2002 29.1602 cv
26.165 29.4487 26.2666 29.7363 26.4434 29.9629 cv
26.6777 30.2632 27.0059 30.4849 27.3262 30.6875 cv
27.5586 30.835 27.7852 30.9956 28.002 31.1646 cv
28.1719 31.3003 28.3164 31.4541 28.3652 31.6753 cv
28.4121 31.8779 28.3213 32.02 28.2402 32.0889 cv
28.0977 32.2085 27.709 32.1982 27.5654 32.0771 cv
27.4746 31.3779 26.9932 31.0708 26.3672 30.9209 cv
26.0684 30.8491 25.7539 30.7754 25.5029 30.6357 cv
25.2773 30.5151 25.0762 30.3887 24.9756 30.0962 cv
24.9355 30.1045 24.832 30.0859 24.75 30.0527 cv
24.5674 29.9824 24.5039 29.8594 24.4707 29.7471 cv
24.5791 29.8584 24.6738 29.9253 24.9531 29.938 cv
25.1211 29.9463 25.3438 29.8618 25.4316 29.7202 cv
25.2568 29.7437 25.1211 29.7329 25.0195 29.6743 cv
24.9248 29.6138 24.832 29.4814 24.8496 29.3335 cv
25.0166 29.5083 25.3262 29.5718 25.6055 29.4351 cv
25.6445 29.417 25.7725 29.3188 25.7783 29.2764 cv
25.6289 29.2915 25.4941 29.2642 25.4063 29.1909 cv
25.3125 29.1167 25.2568 29.0054 25.2568 28.8486 cv
25.3535 28.9458 25.5293 28.9995 25.6953 28.9927 cv
25.8662 28.9863 26.0234 28.9185 26.082 28.7817 cv
25.9531 28.8042 25.8281 28.7759 25.7266 28.7139 cv
25.6309 28.6528 25.5615 28.5601 25.5557 28.4429 cv
25.3916 28.4302 25.2637 28.3574 25.1836 28.2607 cv
25.0879 28.396 25.0586 28.708 25.0742 28.9219 cv
24.8086 28.9116 24.5859 28.7271 24.5469 28.4795 cv
24.4307 28.6099 24.4121 28.9307 24.4746 29.1099 cv
24.1572 29.0913 23.9668 28.9199 23.8906 28.6592 cv
23.8467 28.7524 23.8242 28.8813 23.8262 29.021 cv
23.8262 29.0596 23.833 29.1343 23.8438 29.1919 cv
23.8438 29.1919 23.7656 29.187 23.6572 29.1108 cv
23.5156 29.0186 23.3906 28.7827 23.4004 28.6694 cv
23.4805 28.793 23.5859 28.9023 23.707 28.978 cv
23.6934 28.6914 23.8242 28.4702 23.9814 28.3589 cv
23.9824 28.6685 24.0801 28.8481 24.3301 28.9131 cv
24.2871 28.73 24.3418 28.5815 24.3848 28.4702 cv
24.4277 28.3608 24.541 28.2173 24.6055 28.1758 cv
24.6074 28.4277 24.7266 28.6787 24.9404 28.7354 cv
24.9336 28.5405 24.9746 28.3149 25.0449 28.1758 cv
25.0801 28.1108 25.125 28.0386 25.1797 28.0083 cv
25.2393 28.21 25.4971 28.3105 25.7285 28.3179 cv
26.3574 28.3364 26.3887 27.8208 26.3887 27.8208 cv
26.3047 27.8608 26.1914 27.9312 25.9805 27.9312 cv
25.7246 27.9312 25.6523 27.7261 25.6523 27.7261 cv
25.8008 27.7852 26.0996 27.709 26.2383 27.5991 cv
26.3291 27.5303 26.4365 27.3838 26.4492 27.2549 cv
26.457 27.1294 26.4277 27.0146 26.3438 26.9561 cv
26.2402 27.2271 25.6426 27.3716 25.4404 27.0967 cv
25.6641 27.1147 25.873 27.0146 25.9482 26.8716 cv
25.9707 26.8369 25.9922 26.728 25.9736 26.6753 cv
25.9736 26.6753 25.8105 26.7837 25.5957 26.792 cv
25.3633 26.8013 25.2363 26.7051 25.2363 26.7051 cv
25.3926 26.6958 25.6875 26.5396 25.667 26.3477 cv
25.667 26.3477 25.5723 26.3833 25.5059 26.3887 cv
25.334 26.4058 25.1211 26.3853 25.0049 26.3022 cv
25.0107 26.2715 25.0742 25.832 25.0215 25.7759 cv
24.8281 25.8662 24.6445 26.0093 24.5361 26.1968 cv
24.4209 26.1777 24.2813 26.1616 24.1211 26.1626 cv
23.9609 26.165 23.7803 26.1968 23.6953 26.2393 cv
23.6563 26.2612 23.5859 26.3125 23.5469 26.3594 cv
23.502 26.4111 23.4873 26.4766 23.4414 26.5063 cv
23.3291 26.5732 23.1445 26.5986 22.9961 26.6113 cv
22.8828 26.6206 22.7324 26.605 22.6953 26.6929 cv
22.6582 26.7896 22.7344 26.8413 22.7695 26.8867 cv
22.792 26.9219 22.8184 26.9736 22.8359 27.019 cv
22.8496 27.0615 22.8691 27.1294 22.8906 27.1655 cv
23.0391 27.3999 23.1836 27.2959 23.3477 27.2441 cv
23.5254 27.1846 23.7686 27.1187 23.9844 27.1201 cv
24.1113 27.1211 24.249 27.1387 24.3555 27.2065 cv
24.4512 27.2671 24.502 27.4028 24.4961 27.5171 cv
24.4922 27.6216 24.4492 27.7246 24.3672 27.7925 cv
24.3252 27.8325 24.1611 27.9297 23.9404 27.9297 cv
23.6699 27.9297 23.3984 27.8042 23.1621 27.7979 cv
23.0918 27.7949 23.0195 27.8198 22.9961 27.8442 cv
22.9199 27.9185 22.9189 28.0176 22.9863 28.1079 cv
23.2266 28.103 23.2168 28.3711 23.1836 28.4971 cv
23.0664 28.7993 22.8301 28.8115 22.7168 28.7993 cv
22.5791 28.7856 22.4375 28.7251 22.377 28.6548 cv
22.2598 28.9946 22.4902 29.2729 22.8027 29.2866 cv
22.5879 29.4634 22.1621 29.3257 22.1211 29.0933 cv
22.0879 29.1255 22.0645 29.2012 22.0605 29.2656 cv
22.0332 29.6851 22.3711 29.856 22.7969 29.8398 cv
22.5488 29.938 22.2324 29.8887 21.9434 29.8032 cv
21.6816 29.7285 21.5332 29.6582 21.3535 29.5679 cv
21.1309 29.4614 20.8945 29.269 20.7773 29.0654 cv
20.7393 28.9946 20.7002 28.8696 20.7051 28.7817 cv
20.7246 28.4604 21.0908 28.4189 21.041 28.0518 cv
20.7852 27.9756 20.5283 28.0996 20.4512 28.3472 cv
20.4287 28.4126 20.4219 28.4912 20.4316 28.5767 cv
20.3379 28.498 20.2461 28.3892 20.1465 28.3047 cv
20.0654 28.231 19.9805 28.186 19.8828 28.1934 cv
19.875 28.1934 19.8574 28.2695 19.793 28.3511 cv
19.7676 28.3799 19.667 28.4712 19.667 28.4712 cv
19.6719 28.5273 19.7246 28.5908 19.7461 28.6108 cv
19.8262 28.6797 19.9834 28.7207 20.0488 28.8276 cv
20.0684 28.8599 20.0781 28.8979 20.0723 28.9453 cv
20.0039 28.9668 19.9395 28.9658 19.8809 28.9526 cv
19.6836 28.9067 19.5352 28.73 19.3086 28.7173 cv
19.2148 28.7114 19.1191 28.729 19.0752 28.793 cv
19.1348 28.873 19.125 29.0347 19.0684 29.1323 cv
19.1035 29.2134 19.1797 29.2471 19.2656 29.2563 cv
19.3945 29.2729 19.5498 29.248 19.6748 29.2632 cv
19.7402 29.2705 19.7969 29.2891 19.8359 29.3315 cv
19.7617 29.3828 19.7012 29.4229 19.6191 29.4429 cv
19.4385 29.4814 19.2227 29.3477 19.0693 29.4312 cv
19.0693 29.4312 19.1035 29.5029 19.0781 29.5884 cv
19.0566 29.666 19.0176 29.7363 19.0176 29.7363 cv
19.0977 29.8105 19.1816 29.8398 19.2637 29.8408 cv
19.4297 29.8418 19.6016 29.7422 19.7637 29.6836 cv
19.8418 29.6543 19.9141 29.6348 19.9863 29.6348 cv
19.8545 29.8066 19.6455 29.9707 19.4004 29.9922 cv
19.3691 29.9956 19.3242 29.9941 19.3242 29.9941 cv
19.3271 30.0225 19.3887 30.0542 19.4063 30.0645 cv
19.4609 30.0918 19.5527 30.1138 19.627 30.1172 cv
19.9541 30.1318 20.2227 30.02 20.4492 29.8911 cv
20.3477 30.0952 20.1621 30.2134 19.9297 30.2832 cv
19.9512 30.313 20.0098 30.3232 20.0566 30.3301 cv
20.5605 30.4116 21.0117 30.0728 21.0117 30.0728 cv
21 30.167 20.9277 30.3086 20.7676 30.4097 cv
20.6836 30.46 20.5928 30.4717 20.5928 30.4717 cv
20.6621 30.5444 20.8477 30.5503 20.9727 30.541 cv
21.1191 30.5293 21.2891 30.4683 21.4336 30.4404 cv
21.6621 30.3955 21.8027 30.4072 21.9434 30.377 cv
21.7871 30.4404 21.625 30.5 21.46 30.5645 cv
21.2607 30.6382 21.0742 30.7344 20.8975 30.8306 cv
20.7129 30.9302 20.5527 31.0625 20.3789 31.1494 cv
20.1885 31.2451 19.9688 31.2031 19.8848 31.0532 cv
19.8418 30.978 19.8457 30.8984 19.8281 30.8198 cv
19.7871 30.6313 19.6455 30.4756 19.4346 30.4766 cv
19.418 30.6396 19.2813 30.7437 19.2129 30.792 cv
19.2422 31.085 19.6201 31.0811 19.6611 31.3823 cv
19.6309 31.4033 19.5576 31.4116 19.4844 31.3882 cv
19.3281 31.3438 19.2275 31.2827 19.082 31.2803 cv
18.998 31.2793 18.9199 31.2959 18.8467 31.3428 cv
18.875 31.373 18.8984 31.4082 18.9111 31.4575 cv
18.9346 31.5488 18.9043 31.6553 18.8633 31.7188 cv
18.918 31.7783 18.9922 31.7974 19.0723 31.7974 cv
19.21 31.7959 19.3701 31.7432 19.4902 31.7363 cv
19.5645 31.7314 19.6523 31.7295 19.7168 31.7632 cv
19.6406 31.9541 19.3633 31.9365 19.1533 31.9917 cv
19.0527 32.0176 18.9697 32.0586 18.9277 32.1465 cv
19.0713 32.1934 19.1709 32.2979 19.1602 32.4956 cv
19.2344 32.5005 19.2969 32.4839 19.3516 32.4604 cv
19.5352 32.3818 19.6406 32.1865 19.8223 32.124 cv
19.8164 32.3223 19.6924 32.4385 19.6631 32.6118 cv
19.6523 32.6655 19.6543 32.7256 19.6689 32.7959 cv
19.6689 32.7959 19.7578 32.7524 19.8545 32.7549 cv
19.9395 32.7583 19.9863 32.7827 20.0332 32.8135 cv
20.084 32.7666 20.1113 32.7007 20.1289 32.6304 cv
20.1582 32.498 20.1494 32.3408 20.1543 32.2134 cv
20.168 32.1406 20.1641 32.1104 20.2207 32.1006 cv
20.4688 32.1006 20.7344 31.9639 20.834 31.856 cv
20.7891 32.0117 20.7383 32.103 20.6504 32.2051 cv
20.6191 32.2393 20.5508 32.3047 20.5234 32.3281 cv
20.6758 32.3491 20.833 32.3047 20.9561 32.2251 cv
21.2109 32.0586 21.4326 31.8408 21.541 31.5698 cv
21.5713 31.686 21.5625 31.8276 21.5234 31.9414 cv
21.4941 32.0234 21.4414 32.1064 21.4063 32.1465 cv
21.4473 32.1558 21.5303 32.1396 21.5801 32.1182 cv
21.7676 32.0361 21.9043 31.8735 22.0059 31.666 cv
22.0566 31.563 22.1074 31.4224 22.127 31.291 cv
22.2334 31.4048 22.2578 31.5933 22.1777 31.8042 cv
22.1602 31.8477 22.1289 31.8921 22.1211 31.9072 cv
22.2451 31.8921 22.3438 31.8066 22.4297 31.7246 cv
22.5762 31.5815 22.7051 31.3018 22.6748 31.0532 cv
22.8145 31.1763 22.8516 31.5078 22.7666 31.6904 cv
22.8906 31.6577 22.9941 31.5771 23.082 31.4834 cv
23.1836 31.3765 23.2441 31.2935 23.3057 31.0928 cv
23.3633 30.9009 23.3242 30.7671 23.3242 30.7671 cv
23.3525 30.7881 23.3887 30.8574 23.4023 30.917 cv
23.459 31.1587 23.3906 31.4399 23.1855 31.6343 cv
23.1504 31.667 23.084 31.7188 23.0762 31.7246 cv
23.2119 31.9087 23.4551 31.9834 23.7266 31.9966 cv
24.1797 32.0225 24.4473 31.8291 24.8711 31.7832 cv
24.6953 31.8628 24.5352 31.9683 24.4297 32.0166 cv
24.1836 32.1313 23.9609 32.2051 23.7676 32.1982 cv
23.6533 32.1934 23.5215 32.1943 23.4063 32.1372 cv
23.3203 32.2393 23.3047 32.3608 23.3232 32.5322 cv
23.3477 32.7617 23.4746 32.9106 23.417 33.1475 cv
23.2998 33.5879 22.5146 33.5225 22.2246 33.3066 cv
21.9883 33.1309 22.0078 32.7158 21.7949 32.5381 cv
21.7305 32.4839 21.6504 32.4536 21.5352 32.4536 cv
21.4941 32.5908 21.4023 32.6704 21.2959 32.7432 cv
21.3105 32.8271 21.3516 32.8882 21.4004 32.9385 cv
21.4863 33.0322 21.6113 33.0908 21.6836 33.1987 cv
21.7148 33.2432 21.7383 33.2959 21.7441 33.3643 cv
21.666 33.3687 21.5996 33.3511 21.5371 33.3208 cv
21.3779 33.2432 21.2607 33.085 21.0762 33.0454 cv
21.0117 33.0322 20.9404 33.0337 20.8516 33.0557 cv
20.8828 33.1484 20.8271 33.2983 20.7422 33.3643 cv
20.8086 33.5459 20.9912 33.6475 21.2275 33.6592 cv
21.3594 33.6675 21.5098 33.6548 21.5879 33.751 cv
21.4043 33.9478 21.1152 33.7544 20.8594 33.7544 cv
20.791 33.7544 20.7266 33.7686 20.6641 33.8081 cv
20.6758 33.8232 20.7051 33.8857 20.7109 33.9453 cv
20.7188 34.0342 20.6582 34.1553 20.6582 34.1553 cv
20.666 34.2275 20.8145 34.2651 20.8926 34.2744 cv
20.9502 34.2827 21.0146 34.2793 21.0674 34.2686 cv
21.2549 34.2373 21.459 34.1025 21.6504 34.1211 cv
21.6797 34.1235 21.7285 34.1362 21.7402 34.1611 cv
21.6797 34.312 21.5264 34.332 21.4336 34.4292 cv
21.4004 34.4644 21.374 34.5112 21.3633 34.5771 cv
21.5215 34.5381 21.5762 34.6016 21.6533 34.7002 cv
21.7266 34.707 21.7871 34.686 21.8379 34.6484 cv
21.9346 34.5747 22.002 34.4189 22.0664 34.3413 cv
22.0898 34.311 22.1133 34.2676 22.166 34.2769 cv
22.1973 34.2827 22.2324 34.3462 22.2695 34.394 cv
22.4023 34.5615 22.6348 34.6963 22.9258 34.6626 cv
23.0098 34.6519 23.0977 34.6157 23.1533 34.5498 cv
22.9668 34.5171 22.834 34.3906 22.7725 34.2183 cv
22.9355 34.3369 23.2188 34.4409 23.4521 34.3999 cv
23.4844 34.394 23.5566 34.3682 23.5684 34.3428 cv
23.3867 34.2944 23.2383 34.1128 23.3066 33.8877 cv
23.3887 34.0264 23.5605 34.1553 23.7617 34.1729 cv
23.8262 34.1787 23.9023 34.1797 23.959 34.1387 cv
23.9277 34.1084 23.8887 34.0732 23.8672 34.0249 cv
23.8438 33.9756 23.8281 33.9043 23.8359 33.8423 cv
23.8613 33.6768 24.0859 33.6323 24.2344 33.6138 cv
24.4258 33.5913 24.6328 33.6357 24.8027 33.5693 cv
24.9258 33.521 25.0342 33.4272 25.0234 33.2959 cv
24.9609 33.3418 24.875 33.3818 24.7676 33.3711 cv
24.6006 33.3569 24.5488 33.2178 24.5488 33.1191 cv
24.5488 32.9199 24.668 32.8228 24.9043 32.8076 cv
25.0098 32.8018 25.1738 32.8271 25.2676 32.8682 cv
25.2637 32.8672 25.4238 32.9268 25.4238 32.9209 cv
25.3564 32.7861 25.4316 32.5508 25.4746 32.4429 cv
25.5576 32.2578 25.6465 32.1523 25.6973 31.9849 cv
25.707 32.0186 25.7129 32.0552 25.707 32.0947 cv
25.6875 32.2871 25.6104 32.4009 25.5879 32.6201 cv
25.5762 32.7334 25.623 32.8975 25.7197 32.9775 cv
25.9121 33.126 26.2129 33.1802 26.3145 33.4248 cv
26.3906 33.6138 26.3145 33.7778 26.2236 33.8994 cv
26.0918 34.0859 25.8906 34.2441 25.6689 34.3496 cv
25.6094 34.3789 25.499 34.4307 25.3916 34.3955 cv
25.2012 34.332 25.1309 33.9712 24.959 33.854 cv
24.8945 33.8115 24.8125 33.7979 24.7207 33.8198 cv
24.7109 33.8857 24.6953 33.915 24.6494 33.9736 cv
24.6211 34.0107 24.5488 34.0601 24.5488 34.0674 cv
24.5566 34.1436 24.6064 34.2124 24.6328 34.2358 cv
24.7236 34.3193 24.917 34.3721 24.959 34.4868 cv
24.9375 34.5171 24.8945 34.5244 24.8555 34.5264 cv
24.6445 34.5337 24.5488 34.3462 24.3535 34.3311 cv
24.3066 34.3271 24.2217 34.3311 24.1758 34.3662 cv
24.1855 34.4248 24.1816 34.4468 24.168 34.4927 cv
24.1484 34.5537 24.1318 34.5747 24.1035 34.6167 cv
24.1377 34.7725 24.4014 34.7866 24.6152 34.8057 cv
24.6758 34.8101 24.7471 34.8218 24.7773 34.8677 cv
24.7227 34.9141 24.6563 34.957 24.5801 34.9707 cv
24.4219 34.999 24.2793 34.9102 24.1289 34.8994 cv
24.0762 34.8955 24.0107 34.9131 23.9551 34.9463 cv
23.9688 34.9805 23.9766 35.0566 23.9629 35.1172 cv
23.9473 35.1875 23.9434 35.2266 23.9209 35.252 cv
23.9473 35.2793 24.0234 35.3203 24.1055 35.3232 cv
24.3184 35.3301 24.498 35.1563 24.7197 35.2383 cv
24.6328 35.374 24.4775 35.3828 24.3486 35.4619 cv
24.2988 35.4961 24.2422 35.5527 24.2109 35.6143 cv
24.2578 35.6377 24.2959 35.668 24.3242 35.709 cv
24.3477 35.75 24.3691 35.7891 24.375 35.8516 cv
24.6426 35.8691 24.7676 35.6914 24.8945 35.5508 cv
25.082 35.3457 25.3477 35.2119 25.707 35.1865 cv
26.0996 35.1582 26.6016 35.3457 26.7793 35.0098 cv
26.5625 35 26.3047 34.9551 26.2285 34.8057 cv
26.6094 34.916 27.0801 34.8091 27.2734 34.5664 cv
27.0117 34.6167 26.7402 34.5547 26.6367 34.3896 cv
26.9297 34.4668 27.249 34.4233 27.4727 34.2861 cv
27.6211 34.1973 27.7822 34.0625 27.8223 33.895 cv
27.8027 33.8994 27.7578 33.9219 27.7178 33.9395 cv
27.5293 34.019 27.1992 34.0049 27.1211 33.854 cv
27.292 33.8643 27.4473 33.834 27.5654 33.7686 cv
27.7285 33.6768 27.8145 33.5386 27.8672 33.4448 cv
27.9336 33.3242 27.9922 33.2021 28.0801 33.1025 cv
28.1123 33.063 28.1543 33.0405 28.1855 33.0278 cv
28.1582 32.9961 28.0879 32.9927 28.0391 33.001 cv
27.7969 33.0439 27.6934 33.2666 27.4688 33.3135 cv
27.5527 33.0771 27.5898 32.7607 27.5957 32.4873 cv
28.0547 32.6655 28.457 32.5273 28.6611 32.2495 cv
28.7852 32.082 28.8154 31.8779 28.8154 31.7354 cv
28.8154 31.4502 28.6611 31.2383 28.5176 31.0801 cv
28.2451 30.7896 27.9043 30.5771 27.5771 30.3535 cv
27.3535 30.1978 27.1211 30.0366 26.9326 29.8643 cv
26.7988 29.7422 26.6514 29.5703 26.6162 29.3657 cv
26.5664 29.0562 26.7559 28.8193 26.9668 28.7534 cv
27.6563 28.5449 28.3623 29.2896 28.6953 29.6816 cv
28.7695 29.7671 29.0449 30.0879 28.9355 30.2979 cv
28.9063 30.3535 28.8223 30.3877 28.7666 30.3828 cv
28.6699 30.3735 28.5898 30.2783 28.6582 30.1309 cv
28.4766 30.1719 28.4023 30.4414 28.5078 30.5928 cv
28.585 30.7061 28.7188 30.7217 28.8164 30.7041 cv
28.9043 30.6885 28.9844 30.6357 29.0273 30.5679 cv
28.9023 30.9395 29.0439 31.3271 29.2285 31.5313 cv
29.4473 31.7725 29.7578 31.8301 29.8887 31.8384 cv
30.2305 31.8584 30.5713 31.7764 30.791 31.4951 cv
30.9434 31.3018 31.0156 31.0215 30.9434 30.7754 cv
cp
f
29.2871 16.6157 mo
30.4326 15.3325 li
31.5586 16.6387 li
30.4512 17.916 li
29.2871 16.6157 li
cp
30.4434 14.4463 mo
28.5137 16.6201 li
30.4434 18.7939 li
32.3281 16.6201 li
30.4434 14.4463 li
cp
0 0 1 0 cmyk
f
18.0898 17.916 mo
16.9277 16.6157 li
18.0723 15.3325 li
19.1982 16.6387 li
18.0898 17.916 li
cp
16.1504 16.6201 mo
18.082 18.7939 li
19.9658 16.6201 li
18.082 14.4463 li
16.1504 16.6201 li
cp
f
19.6689 32.7959 mo
19.6689 32.7959 19.6836 33.0229 19.8428 33.1626 cv
19.8887 33.2046 19.9531 33.2505 20.0303 33.248 cv
19.9395 33.1357 19.9648 32.9409 20.0332 32.8135 cv
19.9512 32.7324 19.7666 32.7334 19.6689 32.7959 cv
cp
1 .68 0 .12 cmyk
f
20.3174 34.2466 mo
20.5078 34.0601 20.6582 34.1553 20.6582 34.1553 cv
20.748 34.0625 20.7344 33.8608 20.6641 33.8081 cv
20.4727 33.8574 20.3115 34.0005 20.3174 34.2466 cv
cp
f
19.8828 28.1934 mo
19.6172 28.1201 19.3447 28.2651 19.2734 28.4653 cv
19.2734 28.4653 19.4805 28.3809 19.667 28.4712 cv
19.667 28.4712 19.8516 28.3564 19.8828 28.1934 cv
cp
f
18.7773 30.7354 mo
18.9102 30.7158 19.1113 30.7002 19.2129 30.792 cv
19.375 30.7041 19.4531 30.542 19.4346 30.4766 cv
19.4141 30.4648 19.3184 30.46 19.2891 30.46 cv
19.0176 30.458 18.8613 30.5762 18.7773 30.7354 cv
cp
f
20.6523 28.1045 mo
20.7539 28.0435 20.9004 28.0269 21.041 28.0518 cv
21.0332 27.9722 20.9238 27.8916 20.873 27.8677 cv
20.75 27.8091 20.6738 27.7827 20.5254 27.7866 cv
20.4219 27.7905 20.3613 27.8242 20.3613 27.8242 cv
20.4688 27.8901 20.6133 27.9575 20.6523 28.1045 cv
cp
f
20.3242 33.3677 mo
20.3242 33.3677 20.416 33.3301 20.5488 33.3335 cv
20.6543 33.3369 20.7422 33.3643 20.7422 33.3643 cv
20.8242 33.3252 20.9141 33.146 20.8516 33.0557 cv
20.6016 33.0664 20.3848 33.1919 20.3242 33.3677 cv
cp
f
21.5352 32.4536 mo
21.373 32.4019 21.167 32.436 21.0391 32.4971 cv
20.9268 32.5542 20.8516 32.6436 20.8516 32.6436 cv
21.1504 32.6128 21.2959 32.7432 21.2959 32.7432 cv
21.3867 32.7231 21.5449 32.5791 21.5352 32.4536 cv
cp
f
24.1523 23.0737 mo
24.4707 23.0737 24.6074 22.8018 24.6074 22.8018 cv
25.0566 22.8091 27.0605 22.8018 27.0605 22.8018 cv
27.0527 19.9038 li
26.7441 19.9038 li
26.7461 22.5103 li
26.7461 22.5103 26.584 22.6626 26.2129 22.6626 cv
25.7715 22.6626 25.2676 22.4717 24.8203 22.4717 cv
24.373 22.4717 24.1992 22.6909 24.1523 22.729 cv
24.1523 22.729 23.9268 22.4717 23.499 22.4717 cv
23.0566 22.4717 22.5293 22.6533 22.0107 22.6533 cv
21.7402 22.6533 21.5879 22.5239 21.5488 22.5103 cv
21.5527 19.9038 li
21.2568 19.9038 li
21.2568 22.8018 li
23.6895 22.8018 li
23.6895 22.8018 23.8164 23.0737 24.1523 23.0737 cv
cp
f
18.8633 31.7188 mo
18.9375 31.6753 18.9746 31.4233 18.8467 31.3428 cv
18.8467 31.3428 18.7109 31.374 18.5684 31.5396 cv
18.5078 31.6084 18.4355 31.7432 18.4629 31.8569 cv
18.4629 31.8569 18.541 31.769 18.6797 31.728 cv
18.7578 31.7046 18.8203 31.707 18.8633 31.7188 cv
cp
f
24.1738 37.5488 mo
15.9785 33.5737 14.5542 30.2197 14.5542 22.853 cv
14.5542 21.1787 14.627 19.2979 14.7114 17.1548 cv
14.7114 17.1548 14.8208 14.084 14.8423 13.5015 cv
33.5068 13.5015 li
33.5293 14.084 33.6367 17.1533 33.6367 17.1533 cv
33.7207 19.2979 33.7939 21.1812 33.7939 22.8569 cv
33.7939 30.2207 32.3701 33.5737 24.1738 37.5488 cv
cp
34.2852 17.1772 mo
34.1328 12.8691 li
14.2163 12.8672 li
14.063 17.1802 li
13.6133 28.7617 13.4438 33.0957 24.0205 38.1816 cv
24.1738 38.2559 li
24.3311 38.1816 li
34.9063 33.0957 34.7363 28.7617 34.2852 17.1772 cv
cp
f
18.5566 29.7788 mo
18.5566 29.7788 18.8027 29.686 19.0176 29.7363 cv
19.0176 29.7363 19.1533 29.5576 19.0693 29.4312 cv
18.8047 29.459 18.6387 29.6021 18.5566 29.7788 cv
cp
f
19.0684 29.1323 mo
19.0684 29.1323 19.1982 28.9409 19.0752 28.793 cv
18.875 28.8394 18.708 28.9956 18.6758 29.2217 cv
18.6758 29.2217 18.7441 29.1743 18.8145 29.1509 cv
18.9189 29.1182 19.0098 29.1265 19.0684 29.1323 cv
cp
f
24.1543 24.7305 mo
32.3984 29.5688 li
33.3457 27.0269 33.3281 23.8667 33.168 19.418 cv
24.1543 24.7305 li
cp
f
18.9277 32.1465 mo
18.832 32.2451 18.7441 32.4312 18.7852 32.6318 cv
18.8027 32.7275 18.875 32.771 18.875 32.771 cv
18.8994 32.6514 18.998 32.5122 19.1602 32.4956 cv
19.2031 32.2788 19.0107 32.1465 18.9277 32.1465 cv
cp
f
23.5039 35.3496 mo
23.5039 35.3496 23.5605 35.2988 23.6543 35.2588 cv
23.7227 35.2275 23.8506 35.21 23.9209 35.252 cv
23.9824 35.2188 24.0078 34.9893 23.9551 34.9463 cv
23.7578 34.9688 23.5273 35.1279 23.5039 35.3496 cv
cp
f
24.2109 35.6143 mo
24.123 35.6816 23.9844 35.8965 24.0117 36.0654 cv
24.0234 36.1494 24.0918 36.1904 24.0918 36.1904 cv
24.127 36.0391 24.2607 35.8984 24.375 35.8516 cv
24.3984 35.7637 24.2773 35.6162 24.2109 35.6143 cv
cp
f
23.5684 27.6909 mo
23.5449 27.73 23.5098 27.8159 23.4746 27.8599 cv
23.5254 27.876 23.6104 27.8989 23.6514 27.8936 cv
23.625 27.8447 23.5928 27.7363 23.5684 27.6909 cv
cp
f
21.3633 34.5771 mo
21.3633 34.5771 21.2754 34.9121 21.5127 35.0166 cv
21.5127 35.0166 21.4707 34.8384 21.6533 34.7002 cv
21.6055 34.5898 21.4658 34.5195 21.3633 34.5771 cv
cp
f
24.1543 27.6533 mo
24.1201 27.7192 24.1035 27.8569 24.0723 27.9263 cv
24.1406 27.9414 24.2139 27.8843 24.2637 27.8584 cv
24.2285 27.7983 24.1875 27.7124 24.1543 27.6533 cv
cp
f
24.2461 34.0425 mo
24.3359 34.0122 24.4707 34.0005 24.5488 34.0674 cv
24.6504 34.0029 24.7236 33.9136 24.7207 33.8198 cv
24.5215 33.7627 24.2813 33.8467 24.2461 34.0425 cv
cp
f
15.9463 29.5688 mo
24.1543 24.7305 li
15.1777 19.4619 li
15.0176 23.8882 15.0039 27.0347 15.9463 29.5688 cv
cp
f
23.5996 27.168 mo
23.623 27.2202 23.668 27.3672 23.6689 27.3672 cv
23.7012 27.3018 23.75 27.2065 23.7793 27.1348 cv
23.7148 27.1348 23.6406 27.1509 23.5996 27.168 cv
cp
f
23.3086 27.2524 mo
23.3086 27.2524 23.3789 27.3633 23.4004 27.4111 cv
23.4668 27.2021 li
23.4297 27.2017 23.3477 27.2314 23.3086 27.2524 cv
cp
f
23.8555 27.6919 mo
23.8418 27.7563 23.7832 27.8804 23.7656 27.9292 cv
23.8301 27.9414 23.8936 27.9614 23.9531 27.9478 cv
23.9219 27.8853 23.8711 27.7529 23.8555 27.6919 cv
cp
f
23.8867 27.123 mo
23.8867 27.123 23.9502 27.2769 23.9766 27.3394 cv
24.0029 27.2749 24.0684 27.1899 24.1016 27.126 cv
24.0332 27.1079 23.9561 27.103 23.8867 27.123 cv
cp
f
23.6836 34.6318 mo
23.7617 34.5747 23.9609 34.5288 24.1035 34.6167 cv
24.1484 34.5947 24.2129 34.4492 24.1758 34.3662 cv
23.9551 34.3003 23.7305 34.4482 23.6836 34.6318 cv
cp
f
24.375 27.4058 mo
24.2969 27.3955 24.1816 27.3989 24.084 27.4175 cv
23.7461 27.4727 23.3281 27.5327 23.0625 27.5137 cv
22.8496 27.499 22.5449 27.4292 22.541 27.1343 cv
22.5391 27.0249 22.5977 26.9224 22.5977 26.9224 cv
22.4756 26.9478 22.3262 27.1001 22.3438 27.2944 cv
22.3652 27.5288 22.5762 27.6626 22.9902 27.6768 cv
23.3311 27.6885 23.7861 27.5854 24.0742 27.5161 cv
24.2803 27.4673 24.375 27.4058 24.375 27.4058 cv
cp
f
25.3086 21.0322 mo
25.6104 21.104 25.9141 21.1812 26.1973 21.0732 cv
26.1973 20.9946 li
25.9307 21.1069 25.6387 21.0366 25.3271 20.9585 cv
24.9902 20.875 24.6367 20.79 24.3301 20.9688 cv
24.3301 21.0581 li
24.6182 20.8608 24.958 20.9429 25.3086 21.0322 cv
cp
f
21.9453 22.2344 mo
21.9453 19.6714 li
22.2637 19.8779 22.6367 19.7969 22.9902 19.7114 cv
23.4063 19.6079 23.792 19.5112 24.1152 19.8672 cv
24.1152 22.4619 li
23.7744 22.1479 23.3652 22.2212 22.9717 22.312 cv
22.5967 22.396 22.248 22.4717 21.9453 22.2344 cv
cp
24.1875 19.8599 mo
24.5059 19.5288 24.8965 19.6079 25.3105 19.7114 cv
25.6631 19.7969 26.0313 19.8779 26.3477 19.6714 cv
26.3477 22.2378 li
26.0625 22.4453 25.6992 22.396 25.3301 22.312 cv
24.9375 22.2212 24.5332 22.1479 24.1875 22.4614 cv
24.1875 19.8599 li
cp
23.5508 22.2983 mo
23.8926 22.2983 24.1113 22.5522 24.1113 22.5522 cv
24.1934 22.5522 li
24.3398 22.3945 24.5156 22.2983 24.7471 22.2983 cv
25.1172 22.2983 25.5234 22.459 25.8633 22.4546 cv
26.1846 22.4512 26.3906 22.2905 26.417 22.27 cv
26.417 19.5332 li
26.3545 19.5791 li
26.0537 19.8169 25.6992 19.7314 25.3301 19.6387 cv
24.9199 19.5366 24.5078 19.4443 24.1523 19.8052 cv
23.7969 19.4487 23.373 19.5381 22.9727 19.6387 cv
22.5977 19.7314 22.248 19.8169 21.9434 19.5791 cv
21.8848 19.5332 li
21.8848 22.2637 li
21.9141 22.2847 22.0957 22.4619 22.4336 22.4619 cv
22.7744 22.4619 23.1943 22.2983 23.5508 22.2983 cv
cp
f
22.9883 21.0322 mo
23.3379 20.9429 23.6719 20.8608 23.9678 21.0581 cv
23.9678 20.9688 li
23.6602 20.79 23.3086 20.875 22.9688 20.9585 cv
22.6582 21.0366 22.3594 21.1069 22.0986 20.9946 cv
22.0986 21.0732 li
22.377 21.1812 22.6875 21.104 22.9883 21.0322 cv
cp
f
22.9883 20.3525 mo
23.3379 20.2622 23.6719 20.1812 23.9678 20.377 cv
23.9678 20.2881 li
23.6602 20.1079 23.3086 20.1938 22.9688 20.2788 cv
22.6582 20.356 22.3594 20.4282 22.0986 20.314 cv
22.0986 20.3945 li
22.377 20.5015 22.6875 20.4238 22.9883 20.3525 cv
cp
f
23.9678 21.7437 mo
23.9678 21.6558 li
23.6602 21.4761 23.3086 21.5591 22.9688 21.646 cv
22.6582 21.7222 22.3613 21.7939 22.0986 21.6802 cv
22.0986 21.7588 li
22.377 21.8672 22.6875 21.7905 22.9883 21.7178 cv
23.3379 21.6309 23.6719 21.5464 23.9678 21.7437 cv
cp
f
25.3086 20.3525 mo
25.6104 20.4238 25.9131 20.5015 26.1973 20.3945 cv
26.1973 20.314 li
25.9307 20.4282 25.6387 20.356 25.3271 20.2788 cv
24.9902 20.1938 24.6367 20.1079 24.3301 20.2881 cv
24.3301 20.377 li
24.6191 20.1812 24.958 20.2622 25.3086 20.3525 cv
cp
f
25.3086 21.7178 mo
25.6104 21.7905 25.9131 21.8672 26.1973 21.7588 cv
26.1973 21.6802 li
25.9307 21.7939 25.6377 21.7222 25.3271 21.646 cv
24.9902 21.5591 24.6367 21.4761 24.3301 21.6558 cv
24.3301 21.7437 li
24.6182 21.5464 24.958 21.6309 25.3086 21.7178 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Duncan Stewart) ()%%Title: (UStA_Stacked_PR.eps)%%CreationDate: 28/03/2014 10:03%%Canvassize: 16383%AI9_DataStream%Gb!R&B6s]lXsj5I!WE0H+`s)H#pJr(O:(4Y#q^g,6eV@<qr.JH=15"_NPKi5\Tb/gAMG6e,g3JEad2>ek%F!oD`AcuBE+6;7q`D3%A)46Ejq9;M[lV1f06K/)-q/1Yr*Z7=2?@sr-qhT@2]%NQEL)0ZMR2_sd\![[(:.n.\LbtEZc+]]0)X1i\hDe?Gggh#pW)=I^YS^*%]/t%YF#Erl4<4+=Zc/`REmn!P6A78fO^AX>]rUh%dpJo$X>h\A5;:1U-,9SdkVjrn9tTG.YC?X>qn:\d?8']ap]pfSkc\%6%%r7X%+q'a`(MX#Fe4iAcKU[Snd>Zi;=LiM%hP1&=,uD/?#N2'_I[T7o<DA1ZISYF-nWG_o]Vi_urNCGD_/QqgZrb/uoK=<TCGD;Sg5F?V%jE$Jq$(i(^Nqgh;'SH4O81)Coc2M6;DQioHDeL'`J/c413BEj`(;Bi-PFdH%W5&_P42SifNeLg[`C3q$jkU?;M"1VjPAcZqmJgtS%s*"frYreJYB$5,@'0!f]l,2:ceJS9-kS0KG.#RpKDsl3:ro/Af>S6\mC.\!\jfI&UVqd7/I<jU;>suf9'`X='c1YVn?\)&!`bWN'%PWL$s!$S>Ns620N"P<8EZoNKK'LQZ2P`SSKGq-r_\0PNY*<,L1^o)Fsbm:gh(rWSQN1Q@7&f_0$JgV]CEV/+<BO*9GKAeX%iM^:O%j3Sp+&AbCuL-7unif#rbra;,@K^-=JoH0bIfW\QPVd`k<+;?FC3#!+@C]NbKZr`Vh:sXZ^Hh/@W;\83`Cd?k!^[W9<Hp&k%^s=*(%1T1c=#V]OcpeBc.B"Wk"Q,RQ&Y>)cD/q:#_lh'#X"mYT.qmuCJn#c_0^K@0,C932kI^D8.#:omAZPIsJGmPSQ8*U'I?PiTHTHKKF%8SMo8YPrc)=+QW0g=)YjZ+ZOZK*Il$D(j\S>_ZK*rX7SiJO^&`V9Atep?ET]7t95satUr4(*4p2LY(`6TiehrMtQYqh42a010Eoo%)7iq/92YZf*B7s+#Lhuf@F->JZ%=#1W/(Cq=J3)_#'fsY)1%u>*Y/L6pAB9i2*t^??H,CiD'N0_9KKNME&geV8QBf[?EAn;EPM%i%En-da5ssH&)GYW%LfimieBTC^A?*-YhsG\2_d%VVEQs4HOT,="W)e=7;k**kXZo@>2eX[GrA+Wc,^(o5rHjDDgaSTi'sq(i4^Pf,%gp*pRV!ef*@Z;O)j*dm6jh>n8iY45$?[",:3kB9%F!B^pq?J(eiPuHCrS,T-0AWi#Pe.0s:NnEJ_*%Bq0qu?V>j`H%L&YWaTg]<6%[V`ZkO(%28@j5eO/i+.FOgK4I(cF<Y<EoB^hl+RlToHHKRL!8:Qsh1('._8i437II?^fYd7UKW:%R.MHbA<?OZ&K1AJKa<=hrk5K%i@i&;;reZ28dNZ@-Pce,?(hRDO]KTD/%/MrQhM^O4bGkkVdUD7B7'00iA:6:Z+GI3m.Sc[4^_h<as_Hb%uS3jT<sq0;FF/HbP>tN%X47DC5`3?BMU_^3^Gd6(8J*VAFD'V;.62rV?ZYD]X-rjf%4YigAu?+_1sJ/g9sARiLQhBJ$`%$]:^[qT^K9lRXWH1ukX6UL0(_.P%V9Z0Ukde=H<g>nhmualH>P-Z1i5ECKDe$>sU.nbLQ_YZj2+lhW,bpqCA1O83,eKZ0g]@&8B^Z>A!;`Co=s1.ECp8j1+VBPGO:*BI%/G3/>4oJH/foT@rJ%b4CL?j\#0q@,9kjT`i]B0%3G+r3J5Cn)foIp(l2c<WYR_U-Y_2Lr>[Q6/s<IFlrH4l)Y:]X<!<:",@d^&FW%3pVf<l]lf^Cbsj_?LC-J_.=^#-:nVb5H@s;8eAlp$$2gYJDT`VXh3eT1<rc93j.)83=oq"$)<(\C3$nUKC(bfrW<iCHQ]=dVqFtA%Yh?HT</n5d.lWL>oEQ.a"k^Q6rdV'*V;?1AmL7.ReN_bb@3eM=p2mMC0?JVuS'*sn!`$;@A8.N+BP.;00BPf&/Zh8$Ne_\K*R15V%"geejcSf-\/<,G6^)JDufr-PQ*JGl0ap[!kOahr:"5N.J_+j,3#e(ED'ei6"Il%t<U6KE6NH2GtH9@K1o`3ho&.WVI4egQ;MI$<H%d--Okm1k"QT68mu1bb7GQ!dK+)V8?GMX$Yqf?H2^7YK;_6fr$^eSLu.OkSF3g"c5Uh/Mkceul9UbPDtKr.`Z+&G0=nnJ#;"J=2=(%B>'K)8(FX>Bb5WAYH$.O*fe((cjbHg/c)gMB.iH5j6?-p?gYi'6mX>JWrGs6M9D54oqo%#(+EC$T)LD):1oAq$ebW&J;KqGaIHhf%+a*08$0bgO31Wdg8633<%!*W@e+RXBC@8(uGAKEZfm60e3^fFZM;[.^jSqpV4nUJK6QK2*%neWl??a)98`N%9ao:Ja0XY^AP66)'%TK8U#j8\na!*]@<On/Oh-s_<#qg\-Pr#ZsabOMh6J%I>!h#t&RG-LXtU',"pa%7q&Ie02^aH6UrTV<DN,UD^2<0/+,nc+47`04&e%:G?tZq8Z'RrqT@!#K:\MBJQ!_CX0\M^"'TU-A`K;o?Cb3Re5E+5,+6!8N$Ma(][\02.l/C[u^8Rr5UAhR&Br4,Y\'8Fq5"U?0OoJ%8B7D<4*2ZFWlh+?UpW9go_Q8G8;oWR2-Xd$e*=/=l)*FReqL6%V8ctI%&?@BAt@V&7D`$h&1lj*T68r@jHV4MC-r":'kh<7`KZJr%)bro`jXLW;US?,rV&ZIu82dN-WL#t4Q;q"Ep0?i!gY.['G%X`]j2r7QL^:p/0m(F'=7=!k?0R'a(b?Up9,(b!BijXjEN9Z(YS=>A%>`gb`\p)e?HbAX((Yi'!fr]!F>LfUAF:oN50"[<s`.]4l[fno8N2:3q/KJ2VrpLcE`'jug`pLLe8@T]%>-YIH(qI(I^0&#4%],]O%7`nm,W3d4%`_:QP,uWLd*=FO,Q1-P5#qrWMn1r`(0=-r51><'fUDI5d8dfg7Ca$KN:3s%]OjQfT@oqK[oJ5/l0=-Z1dUpoXmMrVL%?eW'cdT_P]]p8B@>DY#HNVLq+M(cQ%psPYk)n-DdH5lCNFlI0gO0i5@XlYLb/ACa7i_+27^6G&\U>=/(Z:d3E?"tnCV7)OmC+Iu6%[ZOj1/(pc-O^1R4]-j=Y?CQu1BGZV3=l32^%5[EW%5$Dr7GEQC;4',>eWcDDmAt@2Aq0s`i\s=g+KT)\<L\Wd>6#'-k&Q?[+o,r8%a4@YaUZ&jADGNdbrIh1&qCjUhI@F*37Or=!OB`h<oD@dV$_EYe];.)ZD**mS)5%FSi!Q16I]=HIa43iT>%^F[ksDGOTFTG]A(j'm%fO<Ou;H98Wqd9<Folr?aO8CqS.qACKeEOM5TiOhU`BJ#lHHD^`+2<QYO/K^Up/CaV4hcs;Z\uue4#NCOcHDf`hcCZ'UWXn@^02-Z%;q_%?k)qf!e_bb@fu:NA0:/'LKU:i26],%_Iu8k4Fd,%'7>'98GeVBS0:8-MRm!`t(/h"#<IRcXX_6*f^JPi>B"Grpe2Q#F<UW'Q%^3HpL9uUHhX5_HPSpQ<IF-BaT$-cb(LGHa*\m4<V*qMU+hkSA!r1_IuL;8i/afkKWmH[uZ=bo8/,?<>g]k>fhnp<:&N(u^YY]jCH%=*e4+04n8\oAb.&r-EjOkJu9G;sGn5]deEM?YBm15*(V-])J0nTD9N7*$BN0BFS-$piZL=XS$>"HmJ6'P\WYsVhBf&G&Qd=-@bre%DQ1h:q?u39a%8>TAWK4SX70aM>O^I8$iP3%o5K0RIF@Mk8*JPY<;NVE'?i9JCW@7/UX.GoFl(<&]k>(#,4r=heJlQDM#K[5jSYKi%H%hH;pM=a$oh@cNQRB'5jR%%+O2mPnCi7Y&d@jEpQ6CF0kK=*<>MRhk5I+6A2(Z]"d(f57WBV$`kK!+^$#.4sh4$"GdYEm[E0=Qp%^XQSD_b@]sCPC1I^"3tI3IJkT1K,q`-mJj*;4"p&O2C8unL9YD"b_[[RLd(m7DBpN(1Zb(ES2"O=Wf6sHI9T+E#"_+l5\;5r&^,l%Vo<$-a3k-j?3ll]#r(M0WIa7s;5$[\'P<58K2WB-j(\@cpN+m%4Xh$Qn?2AqL]o9icXd17'`r(KkoHeRkAV=-aVR/qX,Hr<)(3'&%5M]SNp_,-+`@cU4mC)I306HW#P;h?rqqQ<;IoH8[%"GUun#:l]S*-B4+,$%86LUcC6&-NPgf*XP>l8mF-k(TYfZDa`4"(oZJi#/8%o,3VHok"QF7,rK3Oh7b$0?V7!mt1$u@Pj3qkl'$oH5enlB`F5"AV<H5HdZ.>jI584ok)ZpS5o)FlA2?l7fq4kO`Of1\\+c*Sp.tt%VU(-!q(9d!&P.DKb=.MQ?oXCC-!U5[dW/CEYu4('aZ96)Xtc99/S[J?f.4CmEuI\F3]'(s/Gm17U,a^ZHsm(HXY_1hb77s/QgC(;%a7DRT>IYW;6M5"pO]3.tcSMA*)PnL<cn#U*aY>X>0MiU6Q^70*mepEDrk^e_qr">4IaGkoW0ALb:=?(6P,&"F_<&p!07+kh0UZH+%?[j+7;2]4il;aG9?SH.c%)l2Ub>$)]h38"#j-+MGIpk[3b%JZS<S@VYl@,!k76[:Z,1d?-iC)qq6Pq%"`]iS%r6MB%acE>1ZX!,!%km0OZKOb)S;L!B(P`I'ZfA,36[gtZL5L'Y1qDZffJ`<$".KHl_Dk[D.%o61sK`cpbpEj+i%SiXXK)[BF\F7Jn]skW'eiV152.+C\%T5c-924?94!#F\pm$p]28,i=gS?C4fQ#;)^$b"SJJ[n1FXD+]@0)8:m+-i6`pD,%-^PWPP]RFANIH!&);HnU$`pOo=H$VW&br%]2%$f]oOmPC?8(8=Xeo)Z3`rA[TfX?U`bFd#b\il[q7TO<pgFAp5U\('Fop7+=Y/kk<qMtS<:^3\%%(]Hu4rq,d2"l7@a?g#b58bhtC%J[0H">t,@qp^=m3Y1XRT]^QF=dYC'V/!.CehhYW4#RDCOCgMjBB6Wk2Vb!hDQ0/:.9HL40L4ca)ML#g`ioMi=8%kWf%3Z#iLS4\W%#Rb>nL5:Wmj;Xmg"GU-7Z(S;n/<WTU,H[k4h>f[nQIdqCfB94#1fV%NK0QP"2(LD-Ik*$h0n$*3!TE4"mn/2[asiha/D?+>mb2M>%6IuZ%(<0:8Qj&/#eR(*FT/>mWooqrj03E6+k"Qafg>\o$E!s`?$)72qo8(<doo"Z7=GXqSVljp&+tB)+_ClH9,A*(H@STJ\:ph0@%2In;'%98ld#0Iq7[i2smn];o\e>NR#C$ob+K+u-H8=qY^]I:Iim8_"b"HcXg:)FETEBp8Eci?lM.7Wttq?=RiQIWG7Jm&(@R\n/n%h!rNGA/Gd`IhG-(-":pMa7)Vh\-'UUoF!S`21r9cpSKhHK":$]`O)0.op]@RIkg3p,FP%<>WJaL5;/X-APXueZP_6]U_;*l+#sDG%V)ZU]*o7D7_q%>de/eK/PGq5e:@P;'F*C)jG(^pA3s33aetKp5('fu;));)-C4S<TNmi5We7&'ek>)l-f68meMi6K*\j?.QIdV)W%]ZrE=M[ijnj6VHM@L6K#+a$555LP\?nkB'AFqAm%-hLhRl@te5]F\[!._h+kG6Z$8YZ+V=.qC*"YEK<'6n@UUENO9;e4'SNVT?5@%Nm"a^@\.E:GiIYfa=ML[pQe0gJY`M#3rcLDF5jtm6'frZcA;YT7'uf$$&tUT&XQY\qmJtOLQWKE(KI^Nm_'jm5'f99@l%0EP61%L%/^FJ[dZQgpI4JXb"WnimFRloof3nU/qnBr00Qg]qis'm/q]]//1VuSf=Smra't/[+JJ]c?5<#^a+3*tcmeZna`#V;p&Pe#k1T,io%1F!/kGlUh7@q"kaXac[=Z2Z`hm9^Y[,B"ZYf52E027i9-]W00d3ltprKY,ZaXd_:!Bck_VQ!@gh%DgYK?b1T.G0ORd4\=%"D$KmQ%X:]+*oJ8.q_nu/;-NsX&Hq:sN*ei`G@I3/IQQ^<9DSA)UJ>A9:d)qE:;igK9(3V1XRuAfG:$3E:=icrYV73B3-!kK&#7o"Sko*#;%j%W8]7'a["Z.DCV><gHkhILPl_"6VZ,]s"Oc.u\`*g!QW]m0H`739d8WVC/_\Y8<[kd[q2mOr[L`DNVP]l2+IY:PjulsfL5c_W69%cS0qalKmRFH$9GW.p8gM?sh7OeNC=d;fqe`l-].>CFb`6\VS<[RbVh'R)?X?.@aZ`S6*nM5aVXroa(Ok\2T,pl)n:j#^F'\9A+-m%e!akjDaVREmndL"P@*kcbIL5,DZhboOlH0\pdo"4;dqkc%&k\:?O\]%UR)R5a*7eVE>Z=Xb:5eJld;aW"H?`,"_V1riGp?>W']P[%m"a#-5mPegQ`gI;l[bI.)SI\-.9qgOPn]eY>f#&'4Q!5\(XI2aFQ;W)<Nk&E,f>f7q%(8:5GO*il62RS+u<"A8cf#=HM2U+Vu!%+%I?@=URok+Z]qYUA@uAM@Q^;*m\kfu*5$HfE+F`7jroRF6H,f]HjUSZ#E9%0t,\q)=)3d1eQ_Dub_&E1cqsNHk>p"Tn'S!cc2mdWb%W>SL<V1,Cdh>%'*j9-p%Y<]'+U>Bp\5C!Y%mkI+E!>.JAQqa4/*uA^ViG5$7G`(X$K/\G<>r,H7n`$[`a7COe[nrPDA3r;9'l1#G%+>PkCE#$aFl%Tf?M<=>*U\o+Vr*9.$Ic\V,UN#bY+7Ne#7NVHZOr/F6+;;kLPHUb$[fKA:-IKG:.23K1eC,B%X8,9"Q$kVqX^oXu%ki..`=OkUQn`BRY1no9Wo2)jH8m2?@c`];pHhm:+PoBL:0>XFlkK:d,C=&nnRX0A&jZRm]]tRWLH3hNo\gQ+@.OY0q@"dQRWN3kW%YS<\Bd%D8%3nN<5n!2!EkX5#l,Rq('7>FO'9.mu9+`etm<=2f]LGPK;LoV="cRYC-^N\&HfjC"e."\1f^u!,BbDR0%%/M(Rj7>SK%:<UE&FE(RK'dHiI`7CW[pso/0'nur`4:!ihSXX5+1F!c(rIT^jHIeW70>Ct<mQ+@ZaI_JUC<KhW/FCb9,0;^jak9qs]m!KS8q+cP%0E'G+Nh=FcKs(gSId9!Qqn<OAa0`]-RnNPH9d(R63if6U,]bH>7KS_mj\!d&4F)_,`fK-2m1O#AU+/QGX,#e'mX7naA-[>/UJnai%9?'F]j!qUt:\LJbCR<MhQ&6L,`.nTNe73ui:!=Cq3%hauV8NLg\?A/TDSD[MPaH`".-\nLEY?O5.ohsDIU>jAjc3e9;3mLr9RdGu%nT14KphHs3YVX/l\er-H7C&nnT978ULHeMlTKFf^9/#jTrQR'>kkth3IN%qW`j+u]lVh88T2W(kHG(q3>K^S4gaST<JKsVHaPuf0%IWD"<2s'/p!2csI$aQ!lBKt]@c3pLQ1KOEg0#6/8^*]il=BiLh<kN"i7<W\'=r"eaMl;3B-=PIF"OPlJ;n;C?`[\kroO!]"&4_:R%@UbU`SplD._iMNiQ&N0_-:UlU1"bp3b>JOk;YJ^gO3"kZ6TX5+fMAu<X0<'_%\U2O_Zp'j"MZpA"KSKlPIm^`/@aAGUMMtI5?*\4%aUEc.]pO\8e2$qGAF@!+NfRH#,"4e9@_n<`Trg*!1n9a>b4TJJb>/.[,T8@EQ7j%m>aD&oSo8YUgm?n8$ZQ(h@0XRZee9o3?%uIK%8XmaA7jD"Yp7u'>"CDYQ;_&^'c"W2IcH<U=<1d-hqn1jFg$8K:WZ7TRK2*P@<-ccLn\Uu5?%bu!?d;[,JQ_/!5E9B;YU^kLA.!!i%+Wal5I;tU2I&.X"9@Y2AbA)RMO2pifSHH(:Qtk@CPWDdtVmbMPL]Vja)n5]X<T4QAekioh=aa9Y?iTgF951c!WE.=u(s?ouHQ]tR%-f\?o98U9\hUqV*hUSm+I.B-T4pJLp7o4"F!t4$"1j1=*3ubD+fG#]oV9lV'":T*8XQj@L@2N;j!TnFP#d_])j*o4La5qj*#1irm%R#a<cKRXA2V;s"q:dUT392\WITIj$):AqYQBB5ak`J0/IZtRfYQ-(3/QiK0F(h_l)K2O=!=g$-"GGORiO$"-?qoSE)T/rQ/S*pDn%baI>p[N^i/53qpMg2``WFQN\UP^jM:bAFiu[bcs(q-*M/HIY(b(1X?tjFq"n1bQ!$9.(ZdD`>i#li;^OZ#9:%j]B5m0BNB-""lle%*Z;1Pd[.L63",[?#YroPY],o>l[t7'+qd%(#,.\'0:7csrB*%(on8+tpP207XACKr^\//!LNS\Qhm0BD`C9Vg?7aZW#5200I9apd%]\e@p)8?VX9_c()>5i(9F7.XBG;nY+2+kCWP[+Kb%Z2(c/;X75IVtrXV,dD^Q[&+34`u%DB&U*Vi.Zf*Gl9N71;CX<GX91'Ek:$@%V,>f>Z>,PEP,QEeU/Q&Q*'2?a%uPW#!"e^-Lc9Xd1g&f0UK0bhDPh`nDDT8=K/`UGKPjh^?Cn%@0<;_ubp-5k>+Kg3o6pRsG$FaG%D\SUoRiLi%F_=Y:1a19d?a7ZsFSrg:2sh$>Z>S,VCbZSc#HIK"BYZf^n_..K"/!9"eo'*^>9[R<\`S=QWUMN#b5Tnajc`2/a:`Lg%o+@ju3OR(.l)V?E-An4VpSF@ui%W_VLS$6j\O<r^i#N?%/U4A>#*BedV9TZ)]Fl&[q/5WsU5G70#LA2:N/"._".1))Y:&_Xfai>2%Z-n]B>Y<:rV:O,i4XciAZU+7[iVr]H8(96cns_)pEaX#F.s6OGT>(d;L@K!F2M=24I5Ld9k5EK/&&e;-V%e2M%.`0u)c?;-YSA5?%R`/i7pq:@5SUteH#NmR2C[oMCJu:;/3iUM@nU:1[W"Lp)%X./HcC(&N?uHG1fj:IV)]'Q<;a/1U^)`O<(O:,2l-2kGVJ<jm%PGhk%@>OhW^=6k_GXXE'0Y\aJU"[BbCFMU@P/K'ij<M!1:E+@HQ.hipiS=(LF&W)1^GBOW]G8aU?^*mK"T+s:;S0*g$)sj"%^`'>(/71.%2,RSJ;Zl630_5?ri(Y5m(K-%WNj]_nacB9_16dGh(CJ%sC+`089GKhK+4$"2pSHK:jPUVtA>$#]iptJtY5-mZ+WCAB,O`S"m]\5$%ZnC1[aeX8E;pOWI&#]1BT%S-4D/?RDG7&9:ZT)`8A"R?6*VWJDO8HId+8;Pd*XGcf0hehWEcb)`I<:P4r$YITZ=ruekfb5mAgfZ9%8p>6<k--6(;'#$D7)q!UO79tVqN%-d]nNm<3okj8c_>$Xl=Mnd]HVJMR&+XYWG^U4/W7_Pp,r>lG1ub>&LD'aR."fZFaE-@4]7,4%)X]^Woi-dS$'$a@V+sJPk;_cZYNQ(XNSRk\C@b&4bXQHgQ12V!Njn%`B\NYL?:611[CB_=TqYe^2,"A@/pbpu@Ls:/^nMN[RUrV$%MJ&4$P];>Lf!=$OpEbp0p&8OM%U<^3mTLl&OuhF`dYbk;B/L[0c`Pq9\A;\i?)")7D<c5i+^$^G\r57sSE-m<.bYgl*Fo9WeQK%:%;QGb^0':@@\Grc3fRfE#["J*8>?70c#ArQf7$C7!flVoY3jP\?VU95.?>V)6?+o?D]@UDg[%LhZF?J<b^XVR6Ffk\47lBJA))3)q%TEFB$$&8koH$<k!@;4,2>bSX8S3ALD1OO('S/8jBYX:uYYm,u!\#7]CAc<(?V,kHf@r%f:,Q@RR,O0aEG@6#;Y<]e9q&>CH2fA`k%^DLaD!6fgFq\kJH;M^tU=<r;TCI`I0Xqg<VGhg=QOCn@FJA5?KV>18K5#S82%5ZCE@XY)6S:!-]+jQ(FNes5!*!7SE-@_.7S+26s%%L(2k?RnV]=-Ckg'8CR^;KJPUB*m.2_Bj?H\LP&Zkj7VNg".<W\2fc<WYm.oo_Qbi@&c7Mek"ZYCm^6-(5*Dj>Yuf_QM&tTc>YXT%>A,!UQ./t#N%)*T>g.U`M/!g%U7/B-h]Z_&\G^ER8TD1(`a.>R!3#Yr.eJ(rpcm?;YU?]$B(#q)TQ/bY7kG/t<BU]t!RJ4Q.6>/b%g%Z`>1EJeRIldB03c-`ZaV#.rN6P4!'o"P#p9h?&1$L)lCcMC!R!iq]L$F>/44=9P$JT8JQ57\ElkgR8.L"e(ZE,;ke6Qb3?G"p+%7:E9I:j%0=MO%u^Q"?s9e5]B5TXL;(,8ID!j*KB3cFWe<<Jtijm)/YYCGrR=mas"Y+<@bp((7@VqCA[.KoIl56Y<#n8_>OMW]>$m%]TDeTFI.$VY*kP%l8\,RgDE;H&T;>J&t;I7d?dLIbh+lu-Q"@:Y(d9YWAn+1pXQ11b=RdUWOc;T0X'KG4$.)c-6;c\X$1Gt-$.u3%PT/Iu`&Tr+gJI;MrAV^da#0H?bDY%![oiTU[M[iR$lIG(RoW8s$J;#TDM[D108`):IPVoR-%F:g.<'_U[#Ne+-m3/U(M;,;T%n'D%k`FcTcmmXJC3!n5rhlEJdG&ejCjE%APB3oJHtRoFp/Xll1uqCce,e._[FF-XflYgDL+WZnp[9OkEV!X!mFct<SQ;<ahmq3BOo(U6%`P[@,[?MMD0Qe0\Zu-l^cBsET_703^Z<V#hH.&3/?Gn;aDiOFr'pfB)H);/B9jZs(D`<^Bnl0FI1=%;pWY(rG`c`d%>%>C[SVHpJ%pX:FU@c/'ZPJF@W1/("UN\;<T)B\gABQT*=R-H_:05FV+9>l^"B"dd.^XgDtP*&`OMKQ\j\m?ha0VNh%!,eJn-ass%-,%Ch<e>jV%._8/hoABYEAf(>;5_;'hUIcHk!_(D97c@X&E/=upHTBYO,V#'oW@/\N%N7968)BrZfMb`Rq0_OQd#E=:Q*"t#Ygkj]ffsI9+c087%rGuNf.$JU,(W2)eYpNHg;RJZ[>K(Yp;1q56P<CcR8WZ`PE$CX9*Ep;WRos4ZB1]V/Wup\t5]56m8dCFPS)5n0h<6%JY^G89aND11%Y;^S'qn#(80AHLn['llM[9c*3ZFde<`QG`KdK,A*p\b_WKYL\us30'^3LFQ!d#rf4i\>0LDU9G"dGgu0;:l?!jA2[=^3__)+M*!q%&?g2ah;e2nkZ/VcE#@"k"#&9^Da[oK>/X8_"Ur4*"^Zf0k+6uMk_Dh*H9+AOKLMI)'S,U(L@]8..Be`"=XZf\Rmb-M<)18Q9U;L8%S7uKh4Q9&TM6gblF`3:_#Xpt6+8[s)":aDZ[]->F/s_qHBt<r;hu$eV3n*eACi,JqX<P5:\$/ni\0GAmi-oLBQDglsVoG`"mBmbY%NCGg:5R4?nr@n>s@>PP*'=)B]KuCt[a:l&TDStR8DQ;/l9SR4((RCapBBbrpe#4lR4I7F[iBQ@rZ\M;7MM3ZMTsO2&MgdBcqDQ=8%05flYpr*Pdem.<p?cgHhH?aYf7b`POnlmG_H7+)e!c7PZ'8cPQ>[C2S1J3#,IJUeorr-W)a)[EH-fN,1grh;&UK`\F41kL9:t<n`%1IP;rll>CGo'93;ZMmt=W-K<0gYsV">OkdCgaW1;?cma2(fBBnhVq]%q_eD!`AHQjfs<@pFsBi^HibDH'JL<Z;[CU@X>8'HX%,Ak%(jT>A"RiiH;]!XrcCc2Vco=Gkd:T6OEj7T,2A^9bi>NHk)Lch055KtEU:be[>-lU2eN9Y+LlcD+@uGPGR0L`h2<pNck86`m?:o'/%<4Km8aUb6f^4%\LOhNF(0AgZ,O]LHn5#lAeF\'K[/6YPFFc=lWWA(u`G`@i_4oWE`p+D;dhU$2r!L!l%]LHaDqSJR2';YQ8^[6A#%)'e5EDkT!Dd'j^n@'g1#(3b!f+4lL6;W[gFec_skGVi\/:/-g6\#AlL'fqo%W3$:>:\pGBs(E;pX]1^c.=7JL9_/oBV1Z<R#pVl@%`*Rjs]WEu4KJ]pdX8Zc*F\E#?.6#umV)jkXOl#k\3i"l&q3\e,3j^ZjO2_"jZtY+KgD8f1,ME]Clg44<LD45ABWFY)s5_EAC"i0m%4T+X))'cgH">[_^PI_@Sd)e6N]l2>"r]>AuP.`bCauqsfjWnt[M"I?&L`bGIQtll)bGuDTp\1s";W5taRU-cROLD,\q")<=Bna^?%]Y;*ErbT[6eRA5H7/@nnCO<I8G/^#0ln,o1ar7'/BrW58cj4=s,K2%9a_7aRR;gc<0RtuDf?8+2oqcMW<&fhtHKCG1;KOt;Aahj^%TN*5=rMHkbMlSp,Ul?$0CPqbYhd@l:.EIkpm;%AiHisq<O^;#a=0F7X^EM#1hfN7`eE(OphgT`BgA5!H*\QShA#+7uHXG'q:Q:L^%cOU_ccnAS0%j.'hPo8"clLF58BT2R=;u11`^:tU1Kmn<^*n<s=qX_r*asK[:'%Hf!*&0p/oeW4F-PJ%#lLO5pqGE/E9p%'@NKD0`%l17&<)G\S;OLi*J`)Ym6PC8LV!,_"&5A8UinIH4GLCNGO:#Ml)%Uu5m0B96N>?[pgK;fhWMC^&*=oeHk.k1GGKc]K!G'kb`?(H[k%/bQca?NUFFrgBo<86oPt$H%e`IE$od7Q7_Q/L%U0YhDp-eH:@F4ejYS3^jmWF&unLEI$64<8g0EIubA'G%Z\o;Yl\3ErDCO^ZQ[:%7*bh.`0oa=FW4>BJkecD5+)"-Rq,Re[m(!I;:YR(egtD/pA(#G4IEh\#*[<D(2#@spRlhja!P_u%us!\l._hZ>k_8iclWnNb>D_Y%<!q+CK.#co?7Fa\;K&FN'27o`e*&CG(qfld[sY&[kEt:rY3F\eBR7[c^[59US]Df*I"-Rkm8Qg:-E>,:o_jrcrUTn6Fl2&2L6?QQ%73A<`3-O1>DbQGjH7`2,N>AC0+2+54a69YHZ,a=_lI>Il:N%b4AGZ"4FYg4i^)]?jq-/\c#4Eq7Ei*FA(-]>niD&4$1L0(aS7CFD%[*ttCI=:HBY.Y!5hj/;LS\@,)NmF-""5<,-S;0*3UeKY9<N:-ZPhMYuTBP-dR^^HrR:Cqa>5,c,=UF6?Dn5?X;CT)n$Nq!A5kTN.%"j%MONetA;*7OH`:K1,=[_.di0pNei<_(6A/9iB%a_0[M2US-FFuVYDi`uT`H.7.Y6q<(.g37g6o.:Fhhs!j'nrf*4UXFRY6e7%k%8j#"nVkY.BZ-1)88&\5qet?1WNWJ$=>/kb')kM3STUcQbMtL^>U9hm.Zp^Z6:WEU;E/=F^=(A&]o8=2YQPZENC#k'#BR)I5m-0l]%78mOE$u$4sQ0g</EMTrVB'F\1KsZ&OI&J1,f"[0.eZfons)La_@uM+I8H`ng=l!*f;IJuC@u:t)s!C:Q*sCoEV2S"YXk_KO;l%4c%-"i5P=oUOYGeAiGOnJ`kN&9pY=s:$F9T`eB6=l5BgPTg)VP[Gl8I7QZ-$D\LnC!e.f+[?G5\iNNg-QJ`Ip8bICYO15[jZHp[`DrM%I`p\g2MUXtItG1OV[Cd]b3Ob[>`Kb+h2"RHUg`@\B(#+FZ*Wjr`MPE^5^G%MoS9gDUJ.ua=p2gp/g8H?7PQ(YR?CYL'>Bun#d=UD%i3g!>ci[!(SWc\"kS$j@q:Ko+k`u2'W@_^:\90B)/g;h]dH]1Kf.b>@2t2'N67;)l`#[hgM!A*mJt$7%"4_dsc?ZT0s)E=H83Y`>%2+lHLI@qhLA*jBG]aQ^21J/BP'BrDh$CL)%q`948a)prD,bB82#4;#-FR>8PVJ.4QU[,b@rbEM+pYR-3+,MEMFY-Q!'c=.K(<ggM%Iu%Sna"p3uWa_:)0[/`grhlh"Kd0ZBikEO9PDB=_;WJ2)^:@cShL;#9hO<o[(,0Z5G31o!(6a5>Sf@4Uj`S?iXm-4/Wh*6_gTdi_%@pRB,U\%SkW#7"IXC:$A;*ANdZ;m&*Ce,'J;@8UP,4A(TFH^pp&W]\(gQ+rHO#(V+o7>AfM)oo\0Nodrm%J]=d5:d!EcEY5-5[@n%%,k7Gf_EI.UhWp0-@.6:re@YD!6`:(6%`EKUY\nj%_-RU.N7AVW0[&$^bHDp<&Ej:n/Oo/qoDjpPqeO!/H%^>S[r@bOX1kMFc:n!%f"asFM7p)5GJVODf.L9g46obAQ=RRTn?fXjb<n=<:P[>if8sa0@RD\30D\<X8ok^bdrd)8"!+BEU,QWcg8EDNC/ENk1.bp<I@2j(%bGo#B=f0VMRPcinoiLmm%4b-$].U:q91#+Rd];$FEOMl;T#F0UV<Pp/C,6dM,$6Y)/)@QXH*>urD[#[,lI:,XY?5Z8Dm,ncdg"%-%S1,,T.7n2PY0P<eLq:;6l*3#.<$[kLF=q_!3LN!!i8n/](3VUNV?a#*9>b4sri=gJ>l+WSR$rUNRXZ8ag'P_9?)kG5$gcR#M:mWd%\)0>hlsm:jNbLB)ef:/p2Eo%q)ij56A$1KDXCK4-euZUd4]TH=Zo;Y--YOk,o^/p2@k%T8GZ:ik%e_e1o2!+kgH!De4a*SJX(]VN%0#fLCbampL@gC;7bA5(fbYk$uD8QY!L1(fI"e5$khbBN8Oc-+^`+;`%N>?J"Lu,T<)c&#>4XS+Do*n&6;q.It6J&DFG_Ta+nlE%J%`GJ'g7-8pNM;j&o9MZ,>Ht`rk)aOqTL&kLT+4dYn+!q)cAn6'5*hO[OA<IG3;?69*."`];^@F=HEsE&FL3,2LJ6eNp\'J^@5*pId%VLu"T9fsYndem:JrMcJZ]uPQ.YIL<"n&Xd8*pYZQa[,X8=_hGbD8Rp:+`>4Lgdq,')e%<`6X7M[m/Ud[P,"CV`<q'dl\E!DP@bnB%!gu2j(*Tr?-(O9gZ?g7D6aER$P0(8cJi@\,m6e2+1nVs,lG>W#g0*_7d[JQ9])]khID49-bC9e9TR@Wu?Y9$:l/u#?XMCZG4MrS<%dS4Cpp\Bki+*i;9`n89,FK3,%?A!JI30Ig;.aUR%[&.qgXZ*(B%eRS*H1.]60s0hq$b\!+cTBg3<RYG&h+lu<m+HgB-d@oWYs8O-%iIu_!r6om^h$/%fo*[\LCT"p!U<sUqo*bN0VeqO=CG"e.m,1J(Ns\.:1$C#=^GB@X-9?u8p]PcXWQr_R"n(S$3kKYcoda5_Ro:>2%XR`@bDkL,sR1j#UNB4tU636;,3f/,d8]4OpRI)7/@mAk="4P7o9ui0EGUii-48<W71)_u202g_71RdkCf(a(?BH9Yle824C'0&(4%5SY!dQR):W?f<u8pEWPiCuutX1b4769qk`e.(c-*@0@X,rE>PnJ@DNG]YZoj9EB&r[3(,5VAfYqM/L#HB?JAhIaAZW8aO=05Msh$%b>DY7UFetZV]&:PZS8X0$G`%qn#dSr*b!aQJi<jFWmO(p[p23c^p_d,S!F\E9CG0A6*D^UD25A,E1CZ"3SIsIB6T=>;"h-eMW%[=%#)2Yt'Xne.EFOYI8)%HQ*jg7X:hQQEeqLWa9A5(*50l]7*0pJ>!HrO5q==LLe^2m5=TM"f[7W)e+sbpG<$5QZ*X><gj[@@2[JRdR%0]TG<o\dNS[bE?`H;1lJa\9V)_m(ua9qeNJ8eKA:>9GU6NC.QonnntNMiC4DMs2o`_#>CU<ou_'dYh9Gda*YE(>7QY2\K#a`t%N2%[g4sa%3M_86C]RkGW'qk@,DpJKgme!"RPUN^!rru^WKgVpK7ptRa[@aeLZI5CiA2M5sbDEG+B's23r<Wb:t"&g!G$te7k;Zh`oD@%-?J,N=XVd/J^PRI,H4n>nuMImBidarS#;Kf(oBph@q!b2&h@PZ_Bra^oX'OQX,HQOYeQ086b;?`D&--Ue?rJ?3A>Y_jrU5)0;FQI%\]O-9kj\[D+(D*NhKh8S&P5$?cq:V2nBsC40Xr;Gdo%?h-eL>KCc4"&q59hKp,r<!2-YPP-o536E&tLnBMW9OYMHVmP]lF`gFlcJ%W!?_sdE+h**t].D=F<1D_dF"L,g#k[%k!Z,!G4+>T1q9%&hFrhYTc[dae;+YK+!\;bnuOW50NG^;a\ktliWb0[iBW:e(YC/pn:^Y%6um)Ojis'T$p'`!5<3i:)0B?-d*=Xn7S&dQ3bdu(f,Qj;$p$+IE9A3%=f;`bk`kmS[i@Hp$p$+IE9A3%lO5h<Cr*5pkX(RQFE4hJ%N]D3Y89"j)g:Go_LX%r5%fH:=jNq%Bd#lu"mQ#C?)0EsWh^XCVZQ\!G&*V#7ep-2/DQhcs1X?3PH6q]!fgL.Ep)CJn%ZGHk.a*=o%FD=@0cMEetg-3s^>1Cjk::e_iNN]8k1&[)-.'H;Z+Yh_cG1uIJ8-VHI$4k]R'`ArB'ens%=B=h<jG_`(c8fe"7c`k'9TM1[aYrb<%-?<ZdP+l`JSc"8=3JY2CKXZPHI,mL<:ot^R"`\f.C^+kt2Du!_X*1J-p(4ERNZ8rpD.D1WD6ho'[Y!`@IH^:;7?"X&2:i#3be,45%A2eRbg5%>8g9P8#).[MAUkF.SmCr*BJSDT$d@2XE*Tks+o?iuOC6or#]i)k3NSE2roiij3QCg%h=`o";QO^>3m/q":/7gEf+O[;#%P;ipiNY6D=Qit.:?YENBG0-l6QsHRl?t'=nFWQpPfsO6ihg50Y'9auONa;Y-TdFGaSsj8_"Ckt7>O@"9SUMZLR=eWgZL"7am.\:W%?8q+KZk6!,S9N#!I#3P_:<Y%5bq:joY['%Q'i;si[n`+>!got*s+Os+))GK:bVi1;)ig=-L>W3%/pAZBoGl7rFK4>[op2"Nc>;0n%R.$nY,\n1#Xn(St["TBJd=GTc,P0$aB_:K:EcbAWSNYdm=9m..T^(1_dfN?$L&cmpK!5HQ!&-PS7J:&QT!h7VqdU.n(+]gL;GMW]%j'dLZmHhm-/N\(Oq9?n8CmE%,QJA1/m6Ar?UJ\2M40!G,/F:I-EapW7^UQ%1\LM+1Dj9R_bOfcmhU/l+qWqD'"??jlA"F:?3o#o^%<jNk;b'8-`O8,@$G2XHoI7QcGC0QF:/2G6S,7SD&d]!Lg)3Fr_9_+<s-t\s)N!2dd0Q/b*=n%9SbHQ%_e5d/!SX6.3s$epl16_=#%,;M[,cF6Tq0h=Ji1A0[<%HB-*k9q'.hEE,nkjP/4*g$I'IZ*#&>GRrQO2tF6$go'u5tPbdN7:(.*^U`XS:a(WbFUHN&K/X23S9'P%8UB-gkEm12kgBr5CFkYh/'C%SB>u]RFrrb%D6q]]`;.A)3uKkP31+6(]**759hY;!p@LC[g/]0FNTV+B5%YjAg*1t36/G'"k?XB%%F3N=7=jaf7*kEc'DV)SfLb44R9O[f@k_8+A<GG)`)8H$MH8h=+OeOVcoD0FY54"LEVta`dN4A9Le61tPm;i2no6`MJ);AL^SB=U`%/Ha7<^T=a^Wk7E28TqBt,AriK)<l%^'1)AY%qi0e9)<-qq/BH!NDh_.Qk+tWCh1K;c!B)d_\r*)C.mHuo&7f@0sbG^Vu(mQetWOh%DgNZ/'\X47Dd,9U'DX>gh@o-mln:lq/nTXD'2mL-YuAp]5RH3<^-akTnjmk!oPk]VB+LD8g78Z'Hf49K)G7.g%sr*d^cU<@m/%60%m!/7&)KpdO&?8dg9S_TEc5nh9/=u$O)hn@8i)gk44_?_`TBD6C-<j^7Lu1u*7GF'CI@LM#iA_]=2Vos=Zhs7.B68(&^VPjIo-8f\%:=CuQB"`I8YjH.<#aFRfNIgS2$k"ARrQ1`ka@N-<p:rr\_889GUp^dt*$gY-bXcRmFNd)VN\aQTpQ:U7p:HrU<!6hU)6##kD"ilf%"D&YmW<eNjA"Zj!qFpLi*\@msFhGge\^)H20c5X@qh]*N>6&IL-/U]t:7fEEm-+7l.\-07d/-Fh,GXhOOlQH8<4G0gQ!:0')4s4%%mo29idi8"H$>1.sF6K5Z>8`1I\)\NRrIuPt`2@P&]rL3B_OK4gKrBu8jE/?FJ`<5k4_Pp&7_nXDg\of[ff3Npg#@Tl2Ysbt,oiu7%GsR]G;k?kCX*o#pStn<oj)BfB\@`<K#K7fP\&O,]n;2RDYIMe]IojW#m>p78Dd=h?O0U@(\(o3_Pd7QZY>B,.`Li&Ajl^7GV6n>+%W^?<iOH4PmKm`4g>sco*99YK^X<h#.3,*H=PcQYq#-5H!ld\,d/9./j;2^c!g$PS^IAm]?CGP8On";W,R@30-4]s)CojXdhWH'e5%Q!rjh*aZ;"OFC@UX[J=%UiJ)RHll]F[$9=F:Nkci^?b@7KXsh+%fBAZ`R.PBFeMM1$`-WGAf5d/iSguEIPXW?HaUr!!sVQ&1@/Vt%VCBsRHN1TiL9tlI+5cIL3RZ@+CW2OO7oT-B_t6.,kM(u&L#FMUa1k#&:H>M#U=:FZ^.D&eXmQH=(UtX]`2U'qkR:<$+-VFsGs0_S%W)g05#?u*=(2RZqYsrhV4PNYHO8TPgIFQ45*in2cp0:areCe\62.$4/a80to8PUF#M(\&\(#:p^[!@kj+/<eY7E8UXXnT^ImEZBr%md%3hb04PjZum(#b=gnigLks'S)%X#:>9E2f7;<a<!W/V3$l^jbI$=";X*L#,''pDebT>.m.'I#Rr6h;N3d=],<oT-0$[b/ku:Au%G!=-BZK[<WK(=p`,;/G6Yd0Wh[sR845+Bhgn[eFc9kVB[N+K3GF??$)i]*FQEf]5:ZK[>!BaiR!GKcp_or4HSB=p"*9/`><S4.S7%jdrdBN,qJ^SPA;*S?"e`di%8qM;IP?K.KLFF@MIV&r5.A2OtFO;DuSpZK[<gl*ND3lm&"FW;l@3fkWL:fa@1sZg$iF'])><h-W.M%I5[W"a7blpk9.r[&(u%o9#r-qC<(-O,Kj#V>J6YF3[4X)HP?+;9kUh:@_)gDce3Ci!4ih0pR+`gPWi]h19sh:SP_#1g&1F8CcWeQ%(raL=bGI)<V)-EXg*N66W'SiL6mbB;FY=547)Yg&EW)kRGBB&E/RFSBW5QaUR/$;h37ps-MgaD_B4YB8n%Lh1eqGnDX[9`R67:R4%,YoEAAD.q;%Rm&]0XK#Mee2OdP-ldlghC[mP]gJM$^.lb.6uB`f.L9iV"QJ_BG_+@R9mM<WF8I`U,2XnWUkquUZC4m@WS:eR)*WB%RhsoZ-"fpc0/hGnj4GW$Ia+FsL7p7?jXOCk%J@oI)klW%\T>,BH08u2j=F',Msbc&k&-*5iXXSqD+#(t0"Tda=39s#4+6OdiC.tF%/fr7jp2J:lHZi2S*\"L.T#J\*:@"KYT\C<mfE,m;[*sQ5I(GhR:hR*.E/VE\30A+1A,&nFSb\:XohH7V$q'V\*0.AR:kk\>[_j[T%OWiTF6@WU1Cj!X]r.PY8+8YX*7-Mus?(7tBL,*!%WSC1U9'e=d%0](0ZQIumDC>Kr]78&pDC>MICe(u-`b)=Lp6,6]qbd]SZ>gko%^@rYbflG4kgtC61AHZb@Lb>c'VQg"fP8KZU@]`7,3_ZVlCi5\lZMg=$Lk+l3Og/do2c/g.RAo@%;cYdk<c2p7X+_,t#]BM1-kfA`%rL)Q+kp5nVQ3m;KRA)q?peQ_T9(#p>Jbj>Ma:QSOka.,*0_XtE\)30$+*TUj6mu*J3k'XGLJn6[SA3r^X["',q9:PDg2=+Z]kJ\.%+'3[h+bO4u@%,0@AH`!n2r&94=).36gF8achH[>_^"#kq\8u&;n)9!_1%TB,_pICt]5;K/qcc7H_+f3e&&XAGm``u>GEO'-r.[:G%pV$RnL-)<2R\T5I?&tjLVO_Jri3%pEDni/]Nm$b(d*VmKhQ&QYI,+O`FHg-WWChsFlT&#`Naob:^?5j@fh4Nl-0<>eZ\;n\$]DLF%\7@%o:Lc`Cjk8h+)m+9T2N3)%VYoD4@@6W?FG+@5C\-CAb;?*`P*gWpXgRsUAtI"QQ4[^B4*>D&`g$$Ub"t$9gC6V`b3rk?3_<fO%SPHkFngg=P3:JQt1o?=f<T^G/_b_(JG]Jnc[#JLm3\4-^j`s'NY%[gaT.6_pGHl"FCM2lcT2C"H]N%GRN^m#^34?<^*hRQ_Y\(Gr%:2H<Cda@ki%WBLJD3a-r1d9;)h>0KuGK=b-OrS*t>NNAP&KoR8osc_?an.srDUm3JEC@FOKm`7bZ$=ncD\UMaNTTKl1F0c>aplJ[%H[74:(glEu81#Atg/Z+P`F#&Z]W8A#2:@Q)!T#mfho#0WI%q0OC%#J''jdM,o&0Z48U-0dB8Y:*A6g)p'f=/5,PSF]mfMri8U,/7%UuXX?3VRI;RNnpS^>,2%p!l+NJOpKG-fFQ!>]b2-S*.[@IIUh/*^OXX)ZLiIT=p7"V"h)L'nbDG/q7Y,9p&?8MtDu8;?8c>jfXK5%AncK3(.]rGJiV9%mGWtT'^7?3-tuR0ognPQmLd*V0LZ>DZ;eCgCO>^[]ar<$`!c+d_:+dHH>J/\eKa*C?^(<pVK*.hL/P?X8XUp!%c-Mp:kYsBtcQK5cY]-5qM9b(g8Y!cA#INe_7FR6[>KtCmq/idIPjGjfRAV<ED-d=-[!)kH'33]IPk^5l/m7f'*%uNm=s];1f5E<"%N57Q2,Sf]"5uDbFig;`u)G[`63QatKDJPM+<gpu;:"AL*cK%R+kiJmo##T0#$FnV@r"^Q7G.79lELq;c^Iuc3i:cB/jaf?pNgH0Q%4tVmc)gc)&l3bVV"LZCP[!?<,hcpJ<?*cQfg-H.U<SBIC-$/E5@^?fhEAitGG^90dSlTS&PA#qr&rVM-D/PX*VAm3u4P./Eg+'CE%G/k0:!o3G[>32hF#PhhP?H_J6E>tS;ia^\:,6gfBmBVA7=XP,b]LO'S?/B/C>?r*mghFg6Fu<^?_leMm(.[>a"#M:@c7!A(NN-s4%)]K&PM1nlT7/"RDZeM(q:H<Kb84HVm/,#9uj$YYt9Vt&:=='N.F.eV*RfCg:=N-;;X`4eALUu.5?W$p$rYlm2jmP9,"gko5`j#K%%p@e,.p5(hjK`U(HCideD(;R"hd;aH@"/_PfG2ns,0$b;TV>Munj-\rNjjkEPF)ND@2U[::/%drS!BRUuQ+PKDOp.d&Q'OF\qGT8[%b5udS"/rO%rf@:sdXN2rJ-J)7\&\WXnY+1X`O<tl1f/=L3Ip8h@%Cg/>#-_^HPO!6!]8o7Okqe8Z#Z-6kVNOk^dm6*$d`qe9pGfo%kTa^H4e&SMl_SuY\WLb+9DJuP;YPVhT1)^fO-fFJ*%Hs(0'-#kb5]:Nq:$pOs)XOtTi#Mie=J;S6b<SoAd-rZao#&N/aon@j/%,B%;$B@P?su-,C@"iNosach\!ZRCCaemZrO0l0ZFJM)bHmoAGd!`Je+R`=PkJEJl_op@5,IZ7oeV_&nQ*CFc\@VOos5,tfUWK5oNjc:%r5u_.l^+lheP@^;J%sU]H=r&W]:XHKS7cm0Bt'hQXaV5\b9-3GZYl4Glse.brQMS8XNnB1ra%hT#"c9[Qo/ROWs;J<S`Qj5c5C,U%.I2#ckKN'p5O6^TXRU_olXrB.WU-m\me)e?b4o#P5Ft-JENc#-eg[nnYku+_<kG#C-8+b9me,=%cF\^UrO04sDhi]<<)B[i>\sLS%qo!^MN7@7_os;r\`S,>Cp\L;TVblSX5F6N`]&WDsb48Rt:#>1Gp\J$pe"hFMX)GQYfDR;hos<LoD4$I^LO8uYo!]<9,hd;5Hi<;J%9.+uqG5(hn*;_hSlR/MR)W0iSL\pj_Y*3pS+5\1.oeV,m)ErYsk0VuNVtY5>9>n9ND>VWHos<N-WfFp`Ej),.Gol$QT&&l.ZbFsc%Sh##tf?\cVfk_J@[eKWdV+G^>>N5mbRl$Yja1(s8+ntNoiEApuF-`AhhQV:/T;/I^9JjuNme&@BCl>e!U%,FLHi5k@967/k/m2ma%2Wng(Ar_\d4:g'&]meOENg*\]lb.`bb?OqR^5q_Y=h'sqnQBB-D0(c0`jO[^5/&VSE)!b%k.Q4n:PQop^4"f&-P&S^>Q$7A]aR9/%>Q%BOA0:RB=`8C;N@A^iYFhZGN]=JVS1!o4rLChY[2a7Vo47/gDLJ^\OUb?.p"RCP5tmHL7&WkMhs"H3qcqNsh!8UD&A'YAs7'D[%Zh-!'c5q%u&6jtEjKQ38#EZ(Vp"RoLq;]/;`]Yb&i&Jl^2&W%OHi<=)>OLZ\5O6EW]DD4=L`&ks034:SotBmU%o$FJcS+2Ac-S)-%R>5sf2r<lK(."D=HAq>]M.'sjkA#L.Qu!rr^P2p>R5/PUZ0T+HoCGS`K;cLh/=>P.#H!c-:[%K:Ll+?TihSWXVt(g5Ank2c5P;t+%YB,_0I%Q`]j7hX%IF'(("FU%&4B3D,jUQdlH,9+'m]l9I1[F-9-WQN-q"":UNrL+_^W-'tf1fM9T;!.LKnlj5\Bk*/kl.[8\.g"!%S,Fl:pVGbe3dT!R\Dkh#oBp(P)Q03>rA4KGpET\'?"BkMQ07]&b]h#%.t[N][8m[:^CS/4j^rH0'^f.pgR5Tj2BG!.:b1j?#/:\B%2!`=_jnqQ=.XuTeWJYYB[oe#)rJP7HZ*lc2$(WC"H+f=R!Loe3=QD3Zerp?uKm0AcR*3*D^<P#IF3-dZ*MUY/4aF#V,]her3ARf"%.j35fP3Yot)pDmZk;m3`<k5l1*RN`pnRB<UH$!oR[e/>3p@W>6+'tD(UZit'5%_=@qJb6]oM?n!\We*!=bl1q(##j73>HTJ4h5U>%l(sF:4Xe"3Bhe<3DYQKGD@0!P<>BFP2%A'(NXt2_a_F<7(=pHkErQGQTNQNCgcYsFL#,*R[S!0)A'<_#3I*Tq.6V:r(9hYEWJhpj%hJuW4dfDE=^CjXhIAWVHNT)@On[XoJWI#E5J%;*3-F<P(GObJ'&Loq+<REI5nBEqMP'4a]Xj?L_$g]lNZ'?Eu7eg't9cW2g53WmN%a,sli8:1c*nK?-R74VCD[5eqkL2d7<@]p/a/4?<FbHZ)E\P*"U.MXFf^$Du=>-$%ZhtI@&'OG#Ie1Zuc[eq>&?b!c.X*U]p^P\u)%BuTu?MjX@[]J,FSd&InIr%H2F\-a]sd$Dhf^EZan$EL3<\=WUBMXNL"X%-;"9aO=32,\&6$Q:kLCd_@Nma1!r$9$]XKFhd7nO\&*%;YMT2'"&OS66ol_\f3Z+;5G,P>+3goZPm<-XU)@^H]Q";9\T+^icYUh(?9,nL^?I/AGnG3C5t$"Zg8"8Ee5(>n+,N&+IKe*Ias>m%2,?RO8N@ZpTQOM!]ZrVQW0YmL-sB9t,M:cIWD%*!?el^p/+5-JJ]jNuXH/+4Qei1*>"C0,be1,`ftss6UT)meMj4FIaXN`mMJ$p3%BHACcPt^_VJEF_hQo"dadJ5Jac9&V8m?&/Y?iCY`$o@O6Q%*cV7-S5+^uL=YnY;"2i$B^uqa/E>BXNem/[@a#SekErk\"mW<9fKm%P>lAj_iqNBk?RBgH`U((Z9H(<R$$Yk;E1ZMl^>N[R(kc0#K@.9h(Mb!,q@X(<&jaOH@9<ur!5>DJPUJ!8.E;$M.?R"'I(D^IqgR/%<<pq(nDNGr4\AIM']kB.`TDc@_)nT8TFr<V!1"V9oThpKS2!2BK$j:U5rp8Bp\l+Zo7/*\)T;mmg9VF2/j*ER7?NL7NL9oZWg#'"%a-u[Lck:f7D=j/);q"NFEs0Sj$l?R^HFO6=AbU;2BUqipTj%42ja'W"jo.r<b"SA#ps-hreit9e)@_A$O23\N6^d*Tf#alTD`Q31%W>*4FN%!@O/Lo%+<\ooO3uuS`#&t"7dB?i8-O*?^-M#*D=?+A!9V'Xmb74li"8M5#"nOoWJ'a^<5X5J%+Mu$Z%Rd77FB2:u'#pPk%Aej>8QQ7&Vc72f>4"VX-VmE&MS,cc%Gu-,?'bF@EJ</q[4?_N]#RCDaoP91RAW3#A-iI+m4,JJ/4$IqdJ]l"dOr`Oji\Dch;,[,%%r'3XID(2HPO-PIkLHb7F@qK\\3BTSaQ_7^4A^e`e4@$*A[:`&*'_<XG\mRU_Q',])",38pn.&uL($4.\WB9X(\>3KAk8/g&@rMhY%KCT5EQndZ^C?<*d]*ZqaV7a5I.Nu&_`FVDSd$s`XjNqJZK^KPV+YURFj<5'dKfI:-'ldmcie$fkG]nji84>60(i2QXL!&m7)Sp0#%oCRq"#dhAqAjCQ5l%m^.q#3nM#48B.U!))K*?h!_.pjCtM#flVX?TJu"baX3FSBAO_MkI;1anf"%*@h6fS5-:.0.c(Zj.3!Kp?mQ%GCVFLEQVrkKcQ%Z339/.hC!1@;'qm)"`kt1Gqu&"ok8CRj[Qho<Y?'X'N@KG`Igo<$CZ:GTSfNoHZGmn$=23Z>.6F%cj'V/O#e%j%.u/c2a+u@J&CpmjCUk)dBck7Ha,'Fdhto,[m$J9kQL:-Ks'hEQGWlus+\Z"Y0h+eCU[93o9*h:=K[CFLBF/*LO^g@e!B*\r8^)TF%d4:DNVXipu'9clNPZk&nBLuJ'VkU`o1l<t/eR"W#[=9F>^j9@:7khsnUNfsPcgD=J3T602eaNsK-tDQM5@WpcgK)74o:=b:_IGJj%*oE<4imG#$l1AWa,Og"FIC6@gNQW*!RS]QcUjA`BR8bj-C"]>oLoOej:;9b1e4sN7W:hgT@0&-7=6^$r^N^Jk)d'5@D"qA:]uA,V%Ks]!&9O<#-Y:/CN<J<IPMcU=<h._.GfXE#%V),$3B"X,E'?1XEbP4rSb\^=$gk5`\E_GBe$oCYeHAr;#YhbXI>'.9HbG!R"@taJ_%P?=&C5Y0"UBgrCE.WCWFQuU#J$7>r6i):.V)I"gN-+aEN7#+7D#sbtE%q&mB_<QQ^XMIdaY]T5NR1A&F/;251GEn*$p\^bXpX8Pe%P5P7#a8q/o7F8hC$ESS!fkUtrh7;f";Tt2!d?ApVd:<Ls]@X^jCOFHa^XfS?*,T:[JbFloM])!i!&&ZXbf<?l6%"N`o_TNt0s22!%T(uLGM6K2H:U8ch0P[6IV"Z+Ki+1H8,Icb<mo6:,<F-V&5`(,8qWoRn<9Yuia*phtaMqJd!^g3"cu=F[5U4<KI+V^j4!K.MBF_*J%YRI7+;u@Jq4UW+d=jO]>Opfp`]`G0WSZ]qd:TGm`L5+Yd#jWr5kbN='gL)Dsm:"<^XtGP.b(%crHdU'\_uk%`^5E#eb\9UJ7bjD*%!UCXgkaKdF5<bI#E?Ib-p1:-/OO!Hl.]fEI84"saB0iXG82m739gX$&7/s>Di1a]-#"OM9;ZAi=9$dkoatZ6"SR<j(Rc*C_4*J(S%pD;G>iF"WfLKu:1=KY-BpXA!#]]f*ZrVp%9BAN6V5@(fumT?VhW7;N.Z/;,FqJI;(iBQ?PX-e-Nid.agoW;9[-,GW$=0aT]*o<Hr%MdOtT7^WY`]dVdNq<J?:s&<91:T,6*HGUc;=&5242a%*)15m9HM+oS2EAIUl$0!-3%u^BTIU*:defT%N)XK@.5F[p:QacUSn)%\d%b<\0ic+R?r?cin=ChuPbYWZmaKAuC4\.Vk=RPc'&OgoDIp[T4[m`?,kBU(^=bJtuk5LM_,,O_&JM'nHrD`j07EQ]"4N\d9Jo_&aa%+c4q>eN$H*J!E`919nL&]L_$c.dc+WR_7TF!:p069C[iL4P<0!GgP1X4j(S\1s3aDIN88QlTE6*X-1O(8TG3&p]N'3""[&2'@MXj%-#fQDjUC<R"pWWLqbtq$<)>G]O<NQQ9!>O/jV?f;X(S4Ejf%Hu.QE`n;p#L(:r3eK"Z)T<.Tp>i[a[c;V&W?=i1%?PX<&$t<TTZ9%JX[2WnAHgN%+],l[Co1i!'kL"PqY,.O^bi"73op&*>Ab'9g+@aiU]=mnW#pcJqcKQo_:hi_T8-7`SfoV1a#Mk2;FCGV*LZo*.,D[%@Ou=Z_'VqRXh\#s>:<kAa,.]eC:)s&717*<R!sCeZj[H6mU?McQZjM_mjSF7E.=<+jR/()4q$9<Mg;InRm*!l,g#+SK.S:^JaS^A%8Sk\)<)h\gS[p!pD&A_h$'a8.kWdc'(*LBG#7joQj+YV("qL'VRJ[Fs7>h$]cP$#>fX77NO2m.q%341o;7qFF@t>5;7Z5'4/"DLH%N7s5*<-HcBZI+2dk-Pq2Cs*K7BX@IXWL9!5RZWb#9[uhplGX9[`<U-iS[q+uVWnHmcC+rPk/_WGQboE-:>sb;3&0iFT>I]XE/\?=%;n2K'N]#$u;n0e%YdALG`XB!-=/G:R7@s#@(HQDtH;`7sH`RT:/f*]07oeWUd-P`:NQAX%n5i_!8g$=2H4]Dfc*'/lqSJcg6`cm.%kD:$+A!Zl#E#T.hEmH[&;-LF%WdncEn<Pn1Gf!G.Vr\F2':@k@aM%5@"gHR.64RTm/8bCk`NmlW#^%mUX-oQ6o.]:J@6<eJ*EiBk%L[@W9au3ZiD:$S3$eC,BS]u+JF=+sM/VBkW#tPNB_()EMhR$pmhB5RR=u?\Ob2hf^:+"@;Hp@f@P.iB`61:^I-?lDt4OT),a[:b0%lM)gB:"Fi4N)]-L]O7uV4Va1987q5G42OK'rQHJEU=Els#q*bFmQ^k\QBoG?-Ll=r)Uof)a+-?6'kiA7i)mG+0b&q_Sb/tNDBXa`%1X<`#KA_3TrDYd1>g$b*^Zt*P`S9:0)Mo7X2MS@YE`BI!kfB^"g3Nd2NJ/i@o5^0[^MibYDJ+]I8!&dW?_u%J>X#d'f+i&-hthK-%M8UE8Ea#-.aZn63(#(RL"59p\idMO9OX.9UO"tPLLndSBKpI6)<Bu=s4\?GA<0*JK"gtH>C?Z(7D5j6\W22&DV(>0s?-8psY+V)`%+JDH`N!M=:9Jh"Uo;@G%I*@8^j^bUM7@UOZ+`@t'R7ZO=@nqda"1/jAn135jBOMd,MiCZN6M[B2>_%"'qo)o,rLdh0@K0$+Y4,rD%O(P;)7!u(W,(Qloe4No@Y,QdsS/<T"2*,eMBn=QA;Cl61S5c)KHGR*,;e#hIDNL&g?.4]&-!K/je"Fi^;dlgC_Q"D%b\.S+-<o]A%V`,Ul%DXOg^AM-OX#h49JF%O=nKt<PrXd]DDp$_G63>T]is>hTi_(E3+otS^%CY<AFc:Q`q5<*pGeD'^K;^BSGIVp0jcF+G[?lS,%-dQph0qT'o*4pHP'P$P&EG@3#h3ZS:mRQI9UYUm<nhECu*SU'j_BdJf/SkU<#bI3^#nEAJ%g%J&3)A<V':!Uhf5DF?]i1!Qh*'0V%jqMt90JNJcP[^>':?AGuiKCn+c8BUe7&-l**tngmo0gusH7]-3?>7gAkd6^NZ3KGaXOCdX?Tel$&3G&W(EqWS8T9B8-cq&a]i*:^%Q6L/dFc^%]@oY0c*qk5rUS!mf?JH=%\fhH;\5>q?Mp<[o!r.Y3q"DNaf'OW[$4La4cmT7@pf5-I3IW/5.6L>e4ac0LhNK:48H?$3%M;pPVs-:TB2M)J38#,r-PR0Q*,k!+P-<lXAYeM)'d!`=-DdmAcrhp<&.A2**BYdfcKafJt$h\7&\/msTjru!e)]>0cMWa4AV$l"M%l#_k).F?2JjUNQ+KX[6C6'Nff?:-\OUGu02RSK]<q_s&WFGQa<r]B.$!Oo[1diYE#:E@]%H+d&&kc`QY<.Y(jpBSTM^&:`ViM,/h%?OHe/h7T69H$;B-s$sVF<*Jb#r9`.O"7H$8jo("s(9?H!],JtlmDV<X'InF?XP_WemZcJ`rqJ.DquLq9gjYoLqLI;h.Y,C6+$eY;%MfS"=^ScP`inW<XM3t!t+*]c#+$WToD`?jnFMGOgmN/BUk@4689?0&:KP$ru2SlsPXpE9A.@Lp7ZFWrR`M6D&AY;TjEjJ1,h:/hJ%rsc+CKl`pTg-pil)7erZRq/In)diq.cN&-bKMDkJdLFM/ScRD2R3Y4@kZOPk*'CQ$P'2&s#AfP<:k?D:!`WQj4SkY/-_LN'dM.JN%#E"'3kQ;/W`_f<ji=eJQ;Sl@SP/ejW_pJmWE(Q?b5UEG?,fR"WbR<r/>^f.=j-Usc#*@"TAI(to8dP2T_9mBS,mkYaR\r-5<`G5)%5c)K='*?FYg):beJQFWPc6hRdDFmf!gm"B:^D4>*JuPn&?l=]UUP:&S<#hLo3$1p]6T?5,BB<dUO9EmN8e!]$:]eVZ&<u?'/Pl_P%<$IH%=-X=`d5/b_m9frOQVcBBcTKB+1*b_FVHD%JBKaEd_f<&`c[eJ-:+'&S<_B/OLTdXeSFe7FY_%N".$0[d(j2IW;3&Il8JQKA%NRK?WELKL?W\.@F,VkU&Ub2nF66)1TRNeJfg<!3$]-TqNnT^3s0oCrh=E#QM9$^Cj9-jWn8RUQq,:VTHN'P>o$n=P1?Z=C<c[rMY%;3ltL-Ttq,!AR<k-.:uW!FY^_Vg=@NC$<OQ`],'P^0JL$U_Ge5_t$o3&kNYrM5l5#Z:RFgLbu%OG\.cn<)AgSBc7@eJe:hCTS,U_%#:2JA9nI#/:G=Oe>a39'7F*ft"FVF="<Q0&(^_u`.7&9?a!EjF'pZ_2ZOkt]'%'.DMi0>1)VNOpJk?=U<[hIP8^r"u!9jAl1*L/C%i]mhr,2`QS`ab&@MMRoB)T.Z*6A\*%9r6k1;<A%I80m1EDLoU^i@8hGH7&R0?f2Ot6jC5d+;IOO.`l0G#p.##SeH,ALmogn6\K!5%JDfDn*gL\8lJS("Op')n)V*1e(,8m:7SQZT8FE=;\uLGHGp")jJJeV;nMlM!B:'s#SIbt$a.WuO5oCk%j1lqg'I#S7,E^ms(ku#,%-Fc&"BT>EL;jRak;S2E5bqe@\361&6+s^h&EBQTD]Sm-<4X+&q%,?e_'I/t6;4ce[V37tq+/oB3-#e9;+E^"V.3Q<W*jK7;:4u,g%,uPk/1R,h7TO9M4Jb0)273X)J%+>llP'Ee[2$,EI8Fd7cQ/u.T(0?$;^QkT4:kClD<V"F*3>RaPe,]4$OXWS(0H1a`QV)cA/CLA;%<=+2M;+i=mftb0%a.c=(YUi5dcZng)!^j#'86q1MK2FeL^u79"5'e6EBHKNXPGEVk'%.HW=hnku?%KqXNXMkiJ.dFr=Lg(MBIJm>%[%SV"QdQZOZjFj*dMYZ6e/LrABYk;(98#7,i\_?U@(*'oT`$!>[&O<VdO"QUP3)JKVDk:`KasQGpnUL_6&?_!>Hp&1@TFDjcn&3V%$9Q<W<>``[/>qL*paE*`Ys?]#EWK$$#Tf$3%otkl.i%.J?RA2&Js?l3pEZZ8(4iDT7JB'R3JL8,FH9<DkoN-\r$C/$fT@YFFUs^h%[?+4a!(h,Dh4kc=,^,?T^jM\<mj>%I)@ot:T)WAu$a!q#B?W(m:Fe;9!DQ5p"R2?4^ap*kOI_:k;1u_2=>^H`M!@ViM!lW&V9cQ/%kfVp7!AfKR,ZNe18u1tZ;`$7OP0"uG-mEnj5mu!=,p&&d.3:KBFne]&4;5cK8olg<@?HBL,tXQA2D'pa:&5:._2/8[7rj5c!J'^A%"Re>p>#L2"+A3CLV$)MeYh2-JE-K/T+3,@03@_kdc\P%C6$)<0OuAIG`-ENBaXD,/`"In80F4q7-';BO:ugiLDupqX8BU]1HKN$c%6.3e_9,dmHf`l1))pemo#BP_I=GdD%aUF5C!b;YS@iS]`$*7^M:nJTfJnTBR#fOGC_ZK?N+kg'3;=K9%5naG):s9$<AP.fthunj>%Jlaq%&G;@-^P(em.3)*=qGX?oG']ZY6,9(L_I0o>TgJTBi\/)XOpNnZR5ff?9-t&l`)596RS_,STG(bZcqCZ"B@%>HM!.oVoM"<Y%:a='bn5Ar',o@+V6\clR@nX7g^0k%]ohIh=c6<EQR6b!j1^?uRJmk$;YjukeQ&IKg37aRpUol3+R&#gsDod#+",fO\78bm)aWne3%9o@+?$4UZB0^'Br*#9u,oF6@h)Rk?Uo.9T*Tao*S9:Nmq5:WA3`IW\2Bo:sj,fML?GRm&!$_3DR'#5e/>Ktf?=!$DSh*V'58jJ:h%!XNHpMW>=EJLm-%i)pu*ACP!$U<rG;J1@cCZ"Nklc!XRDC4HpV*e1tHLuFMU-)4!SEjC!]XWV\bV!aqI1tY<=M'<[Fo]W+Skt'N6%7&2,2#)`gd@M=D5cS/24UPUQ?9jj"lT(0ljLfcc2-f\lH-)as/1U>(OPrK8U9+Z9b;.J["e2g068Mq=c$q`XYU01emPG6>O+;hme%jqOD[-`Re76_e9@&XR*CoLRHr)&c*[0Snd-)Ef<<;jr6q3?H5rQ_nFEJW<TBe5[gC'TJdt]o![udj,JN:!rIS:te*c&iQnaU6Q@#%I?G5'A[Ea'.qgWc808M97\T#W%4F6U+.uI>--g6[a-1c9P%u=26BD4;UM(77L`cU=&]\Jn2MUK"!]G[1"eo:U<>Hc&6/c-@,4c$O%#tdp@`\;D.9N=Gr49hcI;A>99KjT_,U6H4)%W`$(k/>n>cTJI\7<9$*J7gGQN/.ao<IAl+?&E8pehJ@2WNhJK'$318^*:!;`e"pR%R0A^(,_Vu93gQR>XoU:JkRo%hI'H7/AK<9I1*%)&;,u1%.M4YZ3_!4"<q->IeqAc"B^d]J1d`0T1.UG=_XkXa!*%32N24:HO"sRt%a?:l:&/,VH\HK>K8G!Lc"dg_!k:ZTtUfje8&jm$TUleNQ4;7Sl^5tuYS-9(SH/)cF.n("0liE62M/iIneU>W$A]^(i(Xt\1L&`ZQ%WH^XnUVmET+<_&Qe7,P57^:&If\&tU3@*bU'kZSL&bf<tg'A7sWf"l=c\\QT]=GIB+&lU#\u]omk]DSj@O'J9^Gpb^+/HaqXN%FI%[`U>qPsS0W]EY@q1up<k7VVt\=k_PnhLo[.Y%H8.Le"p@3NC7PRqN@.^lGV+9Up`J0?T,$'J/LEEc!R8VYssE@_:XuWaJW+MUIh2%kL`4p1QpR-Fq!u*mc[d:l$ai"/<KcmA_G-%L"39R?)-6/l9KIuT:l2&@mt8&</!#a)842"J7Y/;U6&&4YDOam\9bB>T7[noXtMc^%B)?m^kpJ1OB-1:sJVt`e5b+:s6qc-.D3VTpRk6Q6[4C+Jg*bJ^.]\^1108XQm7%fQ0kO9(jgP.c1WM5+=4njp8VC)uk'>'-^ls'#%Eb3j=q,Wf!F.aA!,TS9[!ZGi5oGGE_Q\a-)H#;ke^ro`\D<>'8m@)ji]T0+AJ-siNHi^hsF+3tCO7q?'7nlV]/Rb'GKoP7J]D:nQ%a8S:\VI$@pKg'fY0D/f)X<[55(TZ)]*/bnMm[1+^A?$'IG-PiV)5$//3SMFjnrO@VLagI-"orK(>ft%Gikh_eeT/n6;^:<CjZn<^%N;M.cAM@KB5C,E7_ZNPK*9RL;m)Jk#OnjI_5jNlK_2SEC!r[C'd!krCKeN14C9kqBPPDY&U_IlDBV,()hDKrDiE\6<*#r^nO58A>%b3K-4!9!KP9jZ"(FH/Y@dk,T;8"0$S!Eu0FQR;[28i$-Xrh:adBsc0goe-5uC7d&[;dQLW-,%32K[0-/c+lAt@au1A\Y<*VO.Ii$%m"N%qN>WWubX2U%l[]Lrg:kaH8EmP<:Xm6uRgL-4-r6:dZK&Zt=b4=1I)iFVerKf.%J8L'L,g8OL*=b+/69C6^j'#2!#0cEJVb'"%8A"2PF48:=MDH)F9B_Pgn7_>Ohi"Q4EP-CQ[2dI*ZK7gN9c%+Jf8;m:%oR@]*3[/]"Sh3)a%L+P$B/*K*;U+GXI>=3]Uo2jGJBiR%ft$U0;mVsuIT'o$3+.<H[LH<rX+S!r^bBr&_FYLt]2fSnG,7Zr/PTs\[OZj6cMpXH#*8E_Ha6^+Eq3hDf:PQNo]-_M-*bUCJa]KM%L;ssC`r^/)H.qPUCN,k[HA3)JBfAjWR\g4j1Ot"V9Z;":CQNuJ].:+_iVZfKaIjQd67`q;CS6<Zj31E9V+a]CH.P;,llLDEp^,"_%mO!aj8A>\dGq"/cHr_EUEX8opg=Q_a"hRCSDUYl5=p01`Xl6OmkYo'.p<'ZAgC"*)fPlp?$q?dHeqbcE"I\ut*0'7n[?ktgX^-"M%n>2Q0=<g9XgL@3%@kN_r>A14IDR3c**+[bu;U>.K3/=/(9l-0;;ia7=lM*CUAWLOS]R@2;YFRf^Z>O7RA(Pr5<k1Ksh2;#5lQmQe%HF7]EXZ2o@'^5J1)i4E:=VHXS3]1SY_)kl!;pgiV\b9'r\!h'6n?mGn:#,$E)\2Z4B5(7j?F-Qt=Uc(LJmXN\do0]gpe3n`G&OLA%EBdm#RU"mNgll/7<ms%nlqWP'-o)F4!9)+[(ouV^'k*)<"uAGeit3P/OdH37KF#o>#A\'),UT=DFdKnfTcQK-%`Lea=XC*??KMA"%;-E5lK6s-QO>d"mL(rtG":4O]fq;b+;q2$IX\).&;9lA:CQ9!TC8AkDI&je+6R+UK0O#V0m#cm1UMJ:+$bpnl!$e^kq5'.E)E/%)%9h;C&XWCi30[l`/b!Pp[/6EWEQZPHReZA]NG_.QSi7.+*=LdfS$W&W3)[B_IZZ]sbIp\tUA50hZCIt:EO/J9!/F]*`=ik^$dgW`:%`:eGjI^Bp,Y3Em7n!ZhPGa4Wp8*=$TF8-=+J6b[I=u%=.@>%uF$"6*PXAlti9po6?q&$??1FY=6IlT$/5EKYoF<*Ys4e"sBo^/^H%F9tUAG5PsO:lY6i"<rGPDtZLs:c:jh5^gHl"*B\7_iAndUpXe`4#'kOAb/rYmZS&t?G5A;9,iB#U&uKS=(/Zh'`8VG`EI]'o1-DB%:d&%CXQ:#pTo$;2a>X4f0:L:'i9D1OD$^of7(1ib0S-3%#+!-:Z5Rs:i4K).f[o3_2MdHXemG;q=JlLCCB_N"rE+g&O&cI@6Zd#_%N]8YD*0Zf*93Rm;l<2+KG7A4Hr"#%Q2(rapQ=:O#40h<GWI%up71L^3-'O^s0#u!%<.BF^=6R5r&L1*qU=`/;K(DR1l?WZPK;K?V%:8_RB^W<Zl<BObBZe&Fb=Q=AT!=R4RX.X,Oq7Y'#FD6#9ZN7Yk($QIKTmFGR7ZFg\7oX'+nI2._(LBS[)GmI*^a'(9YB@cp+#&H$%nk<G4Edc."R]'h,\`gOdASn-MY;XqaDTO%)o-f&m2'\!iQitW'o@N=9/B4MJg_JiD-.<FVX(G9t48^aGj,/[10l,G)9[?2]>C)8t%_7B$L,U!dYf7!dKW^mcjl?4lh,o:*T\oNZ_@eY^XM42s,C;tKeQi0H,5-)\(OLF6IorI8E[?)d1cs9)d6Qs,Vmg0-;'"Dq,ft-uY%TKSQhM!GrGHf#8MAlNJWpQ8<CjEX`/)@Y\*cH7./@Sma%;KK@JS=uB=C"QHP@Xkd=0'iC6E),UbgJuA:\:M9qMF4QqKCCOCUoH43%cR\:^[;P3h&fp9P?09-3W]EOl+MuKJ`W5t66Q$><'qFA.XigDC.8j7nD(VYcXGU,:g^KAnKF=O<"C-fbeh6[jqc+C'D,cK;&I>pV%-Q!WF*ntQPJmEq/]1h)-BJJtbJG]Pmir5)X;Q@=^,C[[N[2:'3*ZYUg37bROlOq*:`D#h1S15I4!,(d*Y;'mH$E*Nd2<\_O3)*%k%K;iBU#@hF]kl%bUpihhW3ia`20'WYVN@kmeY.Y@KMI]c*W</)Rg2uS=U,&hcP=5+shJg`s;Z&P`f6Ejd4b$3Og`u:]_k%ei7.qjt%58_h3e5fS.bdlV/T"bDghH0(n-I]-nX2YV>KaA7*N90D4\.F2\mZZsu\!GefH>ta\?uc`Oii5d.We;s$"bBmS"O1Nr+<YpRqq#'@%7l0#Q3il`:6poBff?0UhLfLMt%WpM;]RTU<+!1of61C=)3`/e'>ZI5;P[Umb^#f#!)&n-gLbi@&&4)Qm^%"-lVOa83Q]<!H_]GFn%6sOeRWqI@!K(/Kp%f2kPnMruc\lQmsQ"G5'P"ag#QUEk9Y8))XG&*BE*OS$($5lb8GIQ/$Eio$&GbKE^0K:94?K5,N.6dq$AX`f$%L/gm5&JN;Zb=#I5@@2`L.:1L2Fr90STUG<D9<gM"lS(LV["Q_3OC@*:G+[o^f=YHJ1Wt8uQXH+bZP^Vso@BQ8)h<g7Cad'bV6lh]%:g2b#9f-BG28lhFNBmROAkc>q,)hN5i5\dMnG^ck3njCKe5<em^b%nNbj$5u3i=OO[MVge?5ql%WmX#79\%lE&f!)4Y/s/`d/7ZF%J<'h%FYB/]fA/Ms<>!Qgf&!C[3rqS4q)[n6I]E@JF*p++U/B\c3)=_J>e6,p\%MtCSu*a\pOZI8_0tcRKa9$@VL\E/dQA*[,!DN/%mVO!O??<!WED`9I+dM?[CI.SX.p/it)fm+!!llPAc'8W[Q!6D,dC`$5/:f[ZGi'64@Z=4e*OJZKeJ'TD](QBZg8T:JIh++^\"'!B%5c%geYP2=DYFf*3lNcNkY908@ol9r3Whe+pekZqKk,b1C`9Uk1TV7T:BDq1sZ[NP]mBqCNoX%7dZC_Y_/_Cp9@>W[agb5?/i*&=C%aumZ%R4Lf;RR"Q=\b&l(-TfgZ)Hbo.Blm%@"bFa`j#Si,1l[fk5@[A=(k2s*n;:n4IdR3:@H8'R/+BdQ^)Ni[>:pf3pOOPMR5Vjh%_T)jp67-BAPUo>97"K-?r)#0(Gp8*$OXsbW<cBlb_;"Q"p[`hu8(6QNrHNQ:*0Bh;KJT;F5SH/dcJ'PN!`l>KS`8'*nH)J1.7_g@%q$YaVniAP:9Q]uErB52&:0HD4<5e`t,_Eg4/:C_(G,[qo_(l=!>KtrEl<>r`@!>W;b.$QMGZ83E(>q$52R,n90i:[[?og%,JoC0?%0gSW$"Jq`X.-H$h7!Rc#cX8sm5q<gu>Y!qUnKS]c+f30"P8Wt25UUgH)_M$%Em39dN_HWriN&EgR*MaEmC<%t#)Au%W)qKf.T`ik%pPLNm:cs,n1kk6%K#l'$a/dE)M`4E*bR]H[<DlHHoa7.SG>0EEe!uG-"(J-T&cKnrHmq>5q[)T&hKd8cVloe4G=:o&1=;"87@f@n%!dsZ,neSKkNoVe]`SZi&%<BfFhibIi\U$p*?$.F]rh0]oO>URlRTRho\D<n2QK\9@Pp,:.!O&Ib87&L1c[jg9K9_'HM>3^l05u!d%Xg9-&</U,c*GhZr&"r<o4i4gIPOS:M-*Pe16(*8cQ/F_"3#/D:giXEE$D7Y8)#um2k_LPp_8*!7p]odAMIq(KO4bD@XKqU,dZ9$E%4KJ`PL>#c((s&Y0(Ga$O.eqt#6@!gQfr@ZObi*1#"EJJ4"DdCdR;&<*SX!K,A_N1/<CQl4&5qiB!J&QH:ag4KR)Fo3UWFW@A0Op*%@3haE.3+<\OZ>JB`hS`N)cV4/.W9*%31^<bVn&@<Z-'Ng/`mTH#AT/[MW8JF#^D`q2V8Y=3C^SkNd8[K-T(W#1S<7@G%"GId%e/9%5Np:Fb7[!$oCk"*3uYV\W>h%7DAJ[bC*\l6+qh7RB=POpZ7%1YSJmLrm3A=Jc]*6[XUhu+]qb52:@KF>k++A`9!NX0.'&26i(!ng%e?l";jbK*l!"4@Xb#6K<`@t1Hb)]5@Bf,d7^7*e&'^/hM$^!<5d<%ta"]CD5W,FdQ"NAgK=QPZuI@KhnT4(""CY;anecI!^esP$!%X(,TF`N9e"Qn"fsZ@%-JVu$eGT"i,?I/XScl$RWZ)/p%*/?Pc2VP@k"^A(4r(f(pl&.P.=hq"b:i='a'Z+fiu?,bSKk\__4kb8&U%_lX^Xj7,:fm^n?T^.p[FY@dRNhW9]WbVLE#ICrT(gkmmU3H9Q.,t!]5#f;AKFtqJfWrNdj94h1V`04]lntMi8?U]/38a^Wn?Ba0r%Z7+t+A?33e\\j?>V\hu-kZopN[hG"=VDraF6LQ;c454ZjTGZa*MS8.i"FkHh(b__`E-DF9%!5H=M>qjb'*bl%Qcmp5.P+pqGsF%l%8q!YW/b:PZQ)I"X$21j32YlID$/4*;fDW4Z[aoK!;?cr^Y1lQRNBG(6MAiHM>6US.<85\S:r]JLMm%HL>P10[MYBZhD9=J`,Xoi(%5YcGUV_P/-]>&:lGA[dVgI*qP$5QaufGP6n_kT](kof,$2!Y&h.j.AF"k@R80`^/\WSWANJ=rSb+">@(KmlDmE*8I:m+M,(9j,O?%MqeJqZo"#$XYEdJA!LaXYi>V]:o*2Y,B:gS$$dU-R'h=,7BSn_f(B0FrGI[dZLAM*68`e.-K;R\6RM+>hiQEQ3as/[n7="FP60hm%V6)+F>8Jgqo?ZnB<b(P)N%Ud[ULEqnhg1+)qt8I-pL/5+f/?_>;N-p]fmTTiS-FTW*%N?Nb"9b6WN\PWp@U>L*VNj._WQ-Xs3tA(%rL9/2rO5c]s#9t1(:qfPYZ(Q)VZ%I/SRlKYEJV_%G$n'o%Q?]ZBgPt+0E2A\0^Q"HNu!_B-1Wd;<J9L?7]$Hjd8g@gVUFlGlQa7s%W;%ZZmXSshOab"W@J2'.Ou)D5l'1^tW3t_EBLOZh%aJ3m,o@uYf[('?eo>GVN9))!Ta<K9&&ia"%??F[V,7;NJbbl96sX:#4Ysre%b!-?f`@KkcjPkJW6ek=l4c8,qoCS@Coee3r#Vj5,9?[tQN&"!<@!J4G=Kn2HQZe_^J/Vg%UmJhNec[08U07Oh"58kK"WHQ0DC$1/%_3u@^&dE:Y>psbG$;gh#i+6?4KG1J"=obhB_9;!\<t/@gmA/I<KP?/m@GTj#aN3$T%2(BZ'VC4);\If'.5\JIS4c_8)(CYlCFpAC%ZifP.<mAR7R+e'D<t1)j<]NN3Zr#%R6]WGJ#mW?gWY@<MR!pP9<X-A#IKDoo-&;4&:>%hi2;SU6a@s4.R,b=Q`GQ7()VfPnd>)l9%)-0-<!M@9m^m_nGd'&2A[h2r%J_?]M/)`BnQf($gX/2]u\2cf=jJH$bmCgbk0NaX1![4:E1QC."0=Zmd\;gDsD3uU"f@*1pfJn%-%hXh*oRFY:?C6RL/+G8UkRH-YBo%/ci103_*'?;R6A_OBp#5S9Zd1)pic*ke^p?FUJ+L3BHrIS>K06i10JIu(nGRL,klV57ZRjmX>%bJ4"RTDkj\F>%!MrqQ*2s74Y-?iKWBhuEM-Q]Ibgs21+p%];Qk#^Sg,-Bfj6>4IIlM4_Wp?58%sTg)$]HP[;G$"RVLDrQ!?7"W9=%pjuW#)>LgC*ZiT29,ogNb8.78(Q>/bJb$)HgJ,Ob<!/FMg6`VTO[)Y&8^Te/:#HHF"nZ,o]M91DF'&M_HcUpJ!D-NR_UYuOr_t.T%&3-U10OgAN/6s'jl%;n==p87nMLanM<(r5hNP\IkUTiLo?;[hF.>ml=Ba\#)Tg'-Ff^BUZ`Mf=\9ZuL*9pkK8lkW?p]K2"R&&TN>%n)R[9KXQ7>L)n,p9_a=lfMMR'bou3_C?T>B$E[;RaiV6HROU>?=YA.+l2G5_1T,Rbj=8h#f*Cm^Lr&(^aFI$Yb\JCoD#LHF5k`",%-B/L_XkJ-TIm2L)%b\#KH'8.'<+$(SD$U/:18eS/VUApd\Ir][#Cf<AEpG5,;P6*m1-B(rb#.[01<:;OJoX`d:RC02Y5amcL'"8"%nbR.e47Z,,XDb3=,@ComO's\QW7h*E!$KWAeg\Z^J-A2OW:>.ND#>>n%K8HmTm:$MB.><aRP=)d&T.`eL+p1FiWjFrki"XpO"Yp4%?QKVG7IZ%>9c,>g1$KGm0k(mMf)tp,C0":;ZnIA5(A(Z[rZ1eZVT');jf",%)V=ZMcbr;H9(@b23LUk_)EVS^=uXVLlCF`HmWWlW%%:Yft-@E22@LA\[B&]Sl[IWc8Wu#7M%6T#LGjcIjBgHF2_8t[s$=L\'*^4fQ*X8Fee>u`LIY'Q3.:I=Y;7=.@`t3u![kcg)$9q7D%)MlE&(`SVJaFP[_='I'-Y]M4cU28j$5@(u5A0V-SdOMp4ZlakW"ER6*J3^E,@:>07fi=4M!_XI<#S42cX<7kaES<':FcN,5R+*GQ%5@0bV&gmiN(q+,5SmPn$lpn%<e*La;ZkUG<pMs@%\_LFH4L#G3/.JhGdm"&3.2c+*YbZ%5(iE4Qic81EgIIr]qD.20&CLtN\,qZj%#:C!nVG1E/]b=jU+CUkt_Z,uM'Yae=_-]#_&Sb?[+,CC(<[e5_X"eBCb,mM^jeA\'[f"<!SS2pKBbniuWI[b>P-F`q#?mdE,;I\I%\Z0M9P#24bbUuLVVC`W#!nAl+5M>=,gHWh<X-%3(d>$K('I5OJg<1^<?<_CKa4P9@DB69bHe&sB@$Y'H<?`8R(ac;Vp5^en.G,$R%9FA7pm+=a!)*X`>,ZLACXndm3E%GkKlj?G8`_R#WcR)JT#VXp_Mm+([AHsp0:Fb)UJ"B;p"btg&-njUYSKP<O'"c<K<OZs_6k)Lq%Mi^#$T*TalF[c*.\3ub*PQVP0j1l_W_akJW="De*b$na&=M1pTp44%eatV??$#+#m%a;Xc&F`q&3X<e.!isFt8IM4Z9joP/%PVA"%5eKd.'#0P0,@`[1c;r<W-D6e&9dWP"Gm(I$7ZD_'BKJ#u")k./#R6Jr$*fZkL8GVuY!a>)\An^J,b;X\CF3h\*>emC7PtOs@gJnZ%c3d]3"(utc??Cn:PoS?!.B-B_nfY%>6c``B(=C&DY2.'!TK!f_o#>]MHl)`XDosW+-Xmb$U(Zra5[1#KW)IU_MO;.,)Q'>D;YcP6%)6[QQj3O7,fs6#koc4`].SM+cYR*o>7Bb/OZ\>FC:`"-ba$e4MJP]CD&)r1Gdo;N6kI\a^Xse$nI8QN=@=&>LIsn"lX,n4N]S0"]%"1AKB48=ZL(M5NZ9dM?bZpp6H2XOYU(RTY;pj`gJ0\Tpk/3"0Y5RD&]%+.5@?8fJ^/-*mNZWM)l%6c8h+ta4'I&65&UWP^43:MUF%3KlJH#jCVT5ths7?+k%],`g*d_2fqgXP>lk%(.jfY^(uc8_i!eb3Vf(9>9>@a?em%=;Z*/+WRn!f;_a6,G"+B(k*1irkb@m_)[:M%n['ojcBYOQ5`]&uY`aN1g?+'cG]IKYV9L8aFb^Y\W<#GYkd_/so..tj5g*B0]YZG!%PO\H5mV$V7"nQXjY&qUm_=\5!ZGXJeu5eQ%^(D&1aHaS*jJMi).:pM4/mH@PW\BZqpk.(Ta;2mQCt9goI`&`r8s7NHpc"^F3#WCuK,7ue&.7c9jQagYTE>M!6i8GsDo!]@;D2[$%-=>A\RpU/7dG%,NhgfOe%/*=;)Gs3UVLkOq4`t56\O\V5:*rM-i?u4eUnP\d/Bq_,:VhrGmn&3Gmn6b@F4kt"q5K^(M.HER@C=c;%!#5X8/c*eS,1S/_gS+O*83!U>)J+=R$FakHPXqC^I"E;9L,"3e=$3AV/SC!`@/:S3A24j<`X-f%R>OOe5DGY\#:r1PRr(ee3A83_%qbYf#+=*!CYS:b2UL^sFE9RGDfUYIG:]r]sD7/bT69NYX'4*7B8<E#+DM#5!*'/q$;-Le-SW;C)?kW#j8r4FpB[:/KBn0;j.E]oo%3A,C&#hb`<-sHPtibqYJO,LAJ.e]fD@L@t\gri^O+RTV`LYUP3`W6&aPnqtImek%''+G1Il9&m@d?GKPdj@BjNlu->Wj0Vm;s=`h%-+N.FL/(6!i15`"L1RHlXZ/JDEIs6Zpbh9#U(6BLe=j%+o<cVB,_5.WAO+M=6'MdRZ`HsPU7>\0G*TCr$t]'*4*j3:cmNIlZ7K>t%`jBkM$F0g#)T3oO[q@QR-uU'13^G#kch)sV<>8Y;Vi+1oDGa:VPG7eAYl&MZfF)GOQFRX@5]UK0,Iq@0[VG%H\=O66E(^-;Aip0:%Xi1lZ$0+ESC,#;t_EF7!W_cGo<9o'1*%C0#-nBa1!!7]CM`R/jco4rKfo\4?ORF;_]9*mlC__p9S-9KL1ESd6RGJ0<q,3(1MQnuC%p33C3A:d*^(VT2=Q9<e)E^n2O_A'/ik*/l8\h6i4MeIWi*LN+5$md9(Ir>/fURe@$YE]PJSD0(LH[[^S1Md=5:()G9\TA%G'Yui*%Vta_0,`X[S$c-]E4;:_5%&L*B-)FCG2F=j.*"=ilVWXT;b/#sr#Nm`S;:6:46qaKNS^S<s&(B3DL6U)E0lTr/>XDZ=O//]m2S("b%9FA[6EZmm&O_nm/\pcU%.pUO9GQg[.Q5P;J!ImBi!W=Dn`.<^HO#!S[fHgr.?ATGO#OA'Q[o"OtM9Ch7.+7.,E\tc'/[[V&)i[./%L&MrF=a5@KLhBQ\37V<))6M!&9MX"g!0f/>OojR?0ek_6k<qYd!7UNV]bYJsVOitsNXSTZ;JspTFq(`*-.t"?q%jaUb&/InAZ`C7%2S47SSRdR)!`@F;#%`$?rB7[?n<sTp__+NHBO/9ZiL)>HkrH,kP[mE[Cgb#&:U=$]A`5Gc2H`W$j"%HTEu3#uKT=JC4jq[hgQZn`%a;36'kk)b'Gk*b*r]s>pZcnf&hE4jX)Q=h*X[NVX8Uua7O6;qs,qst&RiZ7+K#5&NRF'<T6]d7R1a`(Bg,\g"iYT0`!_^:K\mdIc%MepOJ,Wh6#dfej?=TW[1k%YZYWldmHX:4$F':cK>@_UR0j"4Q+N`&K>f\%aL,\pmE[9=7!jqfph,eC'gL@tp11Mjt8`KU!peT726%?*<+@T%D8:fRtLJfm<DMn-&>-`9qmd"3H$&qL.KfZG&XrW`duKbHg9pNk-ukZ(6n"P4dN[[+RHKkdgWn))8L_;i`9M"uhd0\9?3e%@gA3_h\\^BAHYpJUq:#R7d)RBT$Rp+HdiHQ2%+.[o,Cg:^+Q$)HE*4I>mW]aPNIsqD0d*RilM>MG=K<D'TcEB_[s?#N0E=DYh7HW%.D$2EF_(EQcQ@^0FO%F;KCd]SO$f:q);oUQ2.+G9;@-I6m8f'>@,%4>alm]\lc^MjH)d7E$1^?1&1m"sR(_?WA-bhLq2@"A1/%+b%B].]5626#ZQk)@eaD<G$`7Y'%*`;j0MT"E5'>uu%GCj/_m[5uThF5f#;FS2^Jk)5PJpDU63><e<!bp:c]@1>U'S!VW5rZ]#Kn-_0%cIlsZ5?r2%e?E:7/-spW+a!YjkcUBP@EJ3Kfe3(Y4M>DA/k9Sn-o"jr8o!7RK,t&:os7mo1>CDe<Om_NMs,8'b:9]g[-H>.jo-L:%pteD5-k*OT1`o_11<2]#!1HmS-A:4B24jDU,.Q?O*CXuB$]Q(+0I,eN:SdAOB#JK>iRoSe;2nuaoSH8b5q^B\.Rh_03!h:pUpZS/%W+fMtQ.09/R7gm!YUGQI4'N`+MT]_"hgfFsF@QPa]!2YhW#>]IH3-plMQ9D`A;<h#1rpO,2d@`*"+SkbJrmfZ(Mjb:fU!F*\+d%g%%@'>#01sKCJ-5;PR9=@(?!K]f?Vo_m3%&gaaQtg&C]'R'<_'K]H0ke&+4_j`GI<S+4(Y3&=%RF=i^#/><>6Jr6>fWD=8jpb64>n<%)RBW:Ks!5aglk0=ArMY*LP#EAXpIsK'"V82em5ElV-lVmntW9DhM+cRjh<7J8jtbtMYLbB"<V4cXcV7A;2VbK%5Z:4mQ5[YPt<k)%ZmjEqfl-*tKs]'jh65h+n"@ZVY(o#jH+G^)(p.3:]I$j*]g-://`$qcTW"EWZ,HT6gc1;`-&eWtftsUG<BC&a_P2hfn)FftZVbs$%9@H32o+g!d=9R&q[lBITO>]aUP-`+4ob2&)44Ag3(CJkuP*/7%!X9W9WliID_(_oh=LMQ*\9[,J,o-O#4Q"t)>0AF;(%7B_aDRM/%ImGuL=*+t;7,eC4J/Zge4(p%a6n"4=oQW[2+e2SDJTf%pC;I9N;p5rP686I/*M=3Cf8D&0VXD.W-^8i[22NZ236:8!MJp<=$iSes%F"uE1h@]:D]l\L:n?q))h6:<J*>qn1'>sstWg*&4X]"/`(IdRE,up583UHGLNbq-dqT%GR__.ls-sa#5$*0%"AFm$`Cf%97h6>qN%1(4eK&sl3`>2c!Y=HP(EOG9lZ#%[V(BcUfKcr`mi%;G)e<U%M;S&Z]8lY89EQI%d8GU5@`b3`;fBTRhCm;5&?l&-8?eOW7f_jnh(%oR>Z#E?:3/Z0EI#Y'O-b1-udj,uqJZVOOha+bBoe.aM$-+!Ba$d72'`,YTZmP8IK1^a92F]RALi(F4@0`)(7gR9BuC#i07geO*=W%1LZN8"kr:5]hapdaZ9:5#[pCdaE?N8VDAB*CeLL8dK@=,f5<[4ml*[T1UAeR\3^=*(6*oZO6-M\[:fcmFj3j)\5O)r.O^UrRcaZ\%fa\NLPrR.IktPMm]Gh@hohs'LUj[>]/o!+=r?fCYV;Sg(0Yj2+UekKF3%HXJ'lIjPO97f.'('P<q<Ng]Smm_kdde/!`#1.fDr4VA%N4t?"HHd^3#?^:HS/n$"b8E,p'1A?\KuWtb%6e(rc3=cdF!LhcMTDfg1g7P*28@Fb_2Y<M/&l_GdP\o%'mIS-/'(A62:3s,Xt1fm%9]=:jo*3Waf_mUb0<J-X]0[8!(`c,l[O(i"iqs?Vq<\Hh,)!h]RICVYapJc(P#EI=&!T_o..bD;#B_"cThc0dm($3qcpRA=\7h@:%=Ap;XmNEL^-rUH&1M1Y<pjntV=c2%>+<AXnNYXLup"ff4]&a1A!cEbS!^Tt*8&,hC&C)ZI%`m(:LPHr0DG.mtbc4Pg5_pY5TSS?W%?,@^CE>O3aSC0394fZLVMf7317*n$CWPrU0J.^Nf.0gl-PnP<`358YLk-2e/jF6Y+AJ*r9K-uN6:H6dc$mar;KR48s4:f%rO1m[n%EW/FnFkrHkQXN[3"]I/s)3]J?FiXh&HT7<W4$%=*BM)QAbC<<(9(8T^^dt;>mZ5F.5%J>AE^>lM"j#MUe0FIc2@G13]T5Z@V<E^\%]0SG.-8!LcZ8$f4]%MSgT]q`0RWd7%Gl="n`3rI):I5>)'e*Uo5oQTDX@Z23MZT!er1r_cJ'aN/bO[m>%EO@_D>1nIBkqeB2qsM#%0B?\H#*O`(9moeuRAco8[L*O1$4K-L6!0!/";Q<o)9kp:Fs.16s4_EdY2tJa*A(*?Jk1V-50B]J2H#]-%*&GbD5R#j7_fB@g$+a"%E*/l,&Y=G5"(nFPm:D\DD:UV.T!2&legJ&BkSp'jC*]_j#8A),!(E#I-EkkF0ZfeD*C`>uPU@`tS\LJUI!IW4`,nQlY'(0\h+,r%%>`a!ebN!_rF=J6aR+s9PJkfBZl_ef02lJ0G2T^`Oo:&K/lP.Vk-+sl(*Y]O7(C%Ka-[5CPHQT,,AGNK7Yf#af!pp4,!DFQU&,>_F%l-4a`oK)Bn&ne0h$Wd\TSj_8e>t(!#3ord*LtO0\8uBH.&E:o5M7cZ>oiEE*/B:&`J1o@,LQPt<G'Fdu;3\+K2GCJC:N-Q'gk69,%Uq=t<oT0o4^d^L2:2mYX\!/WZZQX8TR=8"!eUaV[)J@nn8P$(kdmpS3@cpTh;OYG<cSA03>%2]'"OE]l4M4:\d'Dk-742?*/)8=>%Tu_#,nW0CVJXM7!"?EasM?7nMNN&+IpearAR%Mj#*LL;(%DZY'-`7,+6I68(iOm;j)6Zi=M"3%Vc$4`W_N0oF4pH+m-RR(hlBWRT%A#JRdD8L-X<H8q;9E_/+N2C,ZA_:ePB_o>Yh(bp52t_!c&&RcHRNVu,jH#^)ZLM79Ml+ha**H0?l:MjsXdanV/8otMc\G,[%S'hX%K#sKb7itO&9K^.i0YQjBGs/Ag-W,,bCRhI\EWE!h<emKMG)JppMSa0T5`t;p;-^pZ&rBKDUCm(Fk%?'bBOll.)+ocnMF"t"D/6A6%VoMG-?-[Kc7_9ZNAa1kpZK5W5OOE3&4%K8#m'B.,7_p_4r16n[=Z`p,35)ad+OT[.LMD1d"Jk49&j8'[#EH.DEL_6r%b49!=-6ph%SbE1kitc8Qn/DC0pGGh3mr:m-gnROYJrq8-Me#UK(#5q"P7%d#E]c)MamY^gV?&)h&d^DgG?Qt'11!fb*^cL*_"`Fl2b>>g7%b(,%D5:td6aR+s;`T)K6])A]W)VsB6k'MK]?t0<(t)5+:('\\75.*"[RR-kWTp?9Uh\Kh)O##0Rq<@0NLRkL-e\!S(hK.+Mj9GN&&o)j%+qs'djqFPkUK<mGhac)<=!_qM@5TY.<"nYMGJ'VC=Gn_+S^;p%6'"aLgf;a2Mdpkl:UI1m."AFI-+PQp(nuoljlA6ns+Ml&QC<5o%&omNO]60Urs%tE%81e;T)BVlJ8W7>"]4fr7C1-/LMK27.q%[b+BEUpr[4$M_a#.SGb48#@\@MZ?iGDp\8Q4K%>BC)&"c$p!(-]9[%l@X.<og?P'kKCE8Bk5)['1p\pWD$rD6p1-JBX_.`k>HL[p*?KW5,i)4IT.`3K*b\_rMb/8l;7DTI\,X.j(gNT=ng`?-S(*_aeStf%7A]#(NmRAEP83=YN"jD_31[re$7t]PraOQFEGn45X1DH<7M-aXr.fn[gGc"\\)_-UL(mdN1?%U+)r4Chks7C-J;ic$U9=nOF&4l?%-M?O^.d]bEcAF3jC`.e)3U"\^K]+;s=O/1X7D!u.1>U5UPOUb<p^P+'ILHtoLpF0/fPqgA@Ib(@_n$I_bQL?).g:7/T%T96?RGnn%<`Y8*%OVjCBV;^Bib8_=W[X_thh1_oUgAa+T9;SrXT-FaU)LYEf\'PIR1qCK@l;,.;'`HY!HaToJiYB%26K-l]mTt8JPmoO&[9Qb%J=IB6_G@C-Qjfskr)[);W:T^i!9Pf[QTS0Kq;l-9qjg".OFDr^+D6j"4W\_*AKm=F5$^$?OKi+p'qeEHpC[@Ug%%A(/GCITN6s7M%@mlgZahkD%b5"L#$BD)R:\&:GoLR'7YKqgt;R!4paN\[1!gWl?8DW!/ENJ)"K^O'M)7_=e>t69EBL%mr$=r4I#+fQS=Z?F\>nS7p%c`7S%%&E4]*?0`tb80+N'R_@[GZ,S<rPRcM2]?)3Cg&_0Z0qBWk5X?YPMG!1INY@.YBuJf_Ob`5ReOCUW/tiCP*\cb5]jJiU?AhV%Z-"o<Y^tA*PS8Ssc/Q3aSG&]*<20i]n'dGVq#iM@+?E+6f:o"6h:Y@I]Pf*Wd$*23CkG^9O.+2EqJ*;5D.C^d=,[JPN*4CI_WmJ4%ZqsXDkg^lKqQ$caWliHq$$-F/mg=X<Lfa1$OC6,+L_fe#&GsGQ;4**sAFL,c/$0L`COhktj$7Xf,*da"5q!7.DQ1U2@2plE4]kIt%-oWjU`5BlM*gt5e2>Mn<WW`bRI;741V+CEG3TXUCmZbMG+2@g$Isq-JT76g`%tFW&bNBsrr:/sbs+^>KIeP3q7(:/fPI[kBD)f(H%OF?i:T1GW1Gks0BkPG#mHco.fdM,<j#CBI81@/#:;CK@Z30AQ>7fZo[?/Q9lWFPi(X4P!KKL0=`:WQc3JIM)0-(Ga'i;lL7[+M#(%/Ui/.pRqpQo@A;:b3!J(Xf9;`35''mBE%Pgkr%q$''IJAA>1HqbL2)Orq,Hs\,C:pJ-Ct'r8Mp-;Z)8=ht@Vf$C@IWDKR6D76)Z#%U**6D(>\CqHc,G*1]B5eAP>lcb27/mD^JHRbLXmUB?'gM%f&>>CD@iL9m/fkOjh7Mb&8EH]S=Y<U@$a]MP^+a`*L;uaq?57m]-X<%$Cr2eC]iDa9L%V=LLa7LQ+&+kXVU0!j9[-hUI0($&]9K)>,g:@dnd_'T8mdp5eOahmd[@8Xd7HW1!Lp`$[C%)9USX:W)4&YX6s0k%RLPLNnZ)@A?Jd,&&ej)NMf<4Y\Mp36NAaPer3CKc_3B:p1Dh([l&fakN@IbnT6d31D\e)Kg%aLDP4f7Fnt^V"a?'7XXaGcS4F@IP%@iagr;'l=Ze)](7HjEFD?sMKY8ZeK1o&6^T*uMhhP%)UbJu2llobfXJ;V4-/PA&b7c*b>775,Bs%];Ad*tQ'W2/fr8G;P4n5.F+a%E6T=t4Y)'VD]C<L"VIhbnje,j74S:7\Z_mtJr(nQD`PIh+'K@-e/>bDnUPcRge+sOfc>p=-5>kXjd>j%/=.PW7Cji>mEu]#FSE^a%8oU;E]>ur.%+^3G5YGVdNCT&lB3o&/A.RcoDd^iP<oqX,g1gBg@4V]FiQ];@H"%V(m5<;N%[-q!N:R*`*u/B"#"sI*&&?s;bU!nV%o\6L9,lF>?W&#'/1s=@BguLnq%`]s1bZHQ(1Nf9C-lCW(K&nJk`%<O`J?MS0i_Rq$6X#_JKNC5m9.A!=!%FLH"@82WB"4l6hX1cM%KULMlam267e!--^#,X'@4Ae8HcI/dMVl<cb)<64(Mg5L7r]NXmI\XmerEV^lAN\Nl;pC`PLUmC'V<B/u%q9W1i5JS2J2Ki@I[,'T%/O!Wb4qaP.^Rb[F.,t7*p8RoA<LLB%p["\02`VHCh+5PtiXjU,@EO.f.[p+:.XVi3lqZZa345emR)F#<h]OfU_0$hfqS???C5%mV%AGH<GP)FEYh!:;_S7QakTI(5bifC&&lq=g$?U^e\eu`cA%.u$aGK:s@4pf_XS@n-L=f;31??msjakhT%Mb.>.r5_gshbO0\L[9?.%:A:!&mjUKYs#Peiamo+i!q7p7i7g2r#X5-6qsMpS]"RiV-00DDg%Y<k2j4#cQ1XP"B`XtT%X_#&pcLNJ4&ihO&SBQEKkl1YC?=uF%p]G1V`\Qr(On'LRnD,J?HnB7CE*WGP7bhW_ZfeMaX*T^;q:N84,$/g-?U^Q6G?DW_OUp*2NC5it9^t_Z,;=4N>/7!j_?mQk:0sPS%bm7i*I^K0g/rEtX:GZ0C/aPK``QjOtP]8K6[H+\S6/WNtdh6;I&lW0-1rTdB=fVo)bZnfa!oCY;lT6EC,?pKAT;-aDV!n9tbsh=#%/k^N`jihYjoeLk&_,="cY/,iOeg]^]PHuF%j#?eKb$%:hO47p$IrFH#*9073>'FS0[b7`t+^7fH`_#k:'[;_2SiT$%gI?G$QA6c?%r&.m-'F)4W<!N1uedM<\^YqNkplI$E/,#qg%C#2S%up;)^E@^]Qj^g[<5^:J2Hh)M0W6sWSDSK7"A:`i%>PA'_>?%G)0Jt16Z[YJ%X#cILlWYdM<o=#NQ+dIIlsDgY3$Vl\9^)_L&`R'Eni8+BX+FIh.'.YtL9A5GEPf#mJpD<Tj&='gd:VKS"5YT@K$N*nd"\O,NT4ue%8UBMDBa/lq;D'KCoaC=)+>6DENl1<N>>mHW,T,d&7Y:s4@dt]Sc*2Q^krL(+kaADk[QO\Rj4mR?:%jn5S!t&=-mR04dDYG^PYFNb%0dd.5(<cqB:b6]*5aUE&W4;/(H/=d2$h:a\(_7(]7P`t]S1NOs(+hBc;>p:LWid;Rn]=WYLJF/@+,D#-*u9;.]@c9sn$-Pog#B+c%3rkjCE^;mr$1.j#,mkNe`;KCbr(G%0:0miPeEC^@=bOb-_3%E1Y?R_BhWjE3fe4[7?<lWe%8<Un$qAR1eurK&KU&r[LZ6;W-jE?*%AC9`l2slR'fJlL+OEM)iTS_j2o@,%$V63BU'Y`]]=LsOg.bUJZ0N6X7^8"(BdQQ\0d>_VH^4'(h40H=d,;ih8YceOpbKmEaKR"mJ%[-+A.8Obo<GZ%Zg@:tQ36c@Su0PW46?BmAL;m\t"C&3RPr)?@b`YV1bIVP$)Z`C,pSNc,&e]oBGD0pbX0E'DiO:KD\L2FqH8Ia`t%<"c&WC5B[[W3.oLT#ZO_&:!:76S#6LXdM6lc[L8QGZf(>43<mL3aP/4_1?MWIg%5g,H1Z^/DoA"S7>7gfYUD76uU:JP>!Ii]U6hi%nf^eL9$4Wiq^*Y_=>W'5G>p9n+hd&J9MOO\pq7'V)5E]jTdZTB00hai.Sp3[^i\%QOtA]MgmLj1`&Ie47%TpT<@5PKWY0:\j8]Y3%43tl&Bc^rWXiBa)KIMWrH%qS0fr;gFTa4TJ1k&O!GJB,,2r\NHM%Z^L5EVR)B6CUWeS]I^h6VW_BeRe"D<Znfob(b_Q(;#;gZ`)X%l%SAo:#.0-#BJ'Oa&Z#?!+#PX`$G,cAPe+uh9=!,jC1f=b:^g#=3BW:.k@(edHo^\9C7t4oH:+H<YJrM<8:Fl;mS;Ld#kV_PI2=t%5(5MhB7*<ZqXK&1?lC-Yp:gQVOLJ<CKk3mm4,[ChUamFH:"CY+.(cQ']k!nn"o`;7Gl&XoW48;[e\_udUa$/j5g]2._hkP\j=)=+%_*;4aib?6Ak8SbT=Y$ADaM!]WS*SmTqt-9KpAP"gf%X^+1VZhS(+SZgHL$I97\ZcR.GZh5*mi^Yr>*>G+en3rmm6!@6q\nqAXX?e%S\KUD$:L0S<)_FhXn6lc[d:)?Rb/hDpm96"9-cVr%3n^q_+#%L8,Xo0(@q0!:Z&,Zl_8($A5):*<b%,#5&eO8HZ,e;3T7YoR<OXG%L!f6!$_kfkAccSnG`bc</u5@ud.ZP6/)f;(V`R1)6+sm4L!V-lJ7'*=eSrTW'cP$cgf&hYVI-R4-)keG3FXBjMoQE.5opp\A4@P;%%>C?L6tDY=i\51G7WCHUnrbS#GFg1G\C704>TdPP;\GJ9Ai^m3i=%H3NXL3jX>K3+%%d<OQ%)dGm=+7XBdBV23^?Ff/\q@ciKZ)-%h0+4e]02HcIs%5]r^40,Ep?c9&WL#`?E^bu+*oN<ICe8<NU<l-ja):Ak81+"C3Wa3qo;u@@Xjc]WXBPb<tI2kc3sc,[AZ^`$BW\,%c%2IV<94DB/I*Dgj5$'%,\$L)Ea)et8E\@f9,0/Tjij-6H[O7tr6CYlT"[@f%R0Ke44ootG8OnPl(p"OclWr-:<ZQX1iZ$8i3Zhe%K2)9?5B(1=qL_hod2)ZZdo40WBDOupB8%E*@2KmTmcTqKml#b.H5">DpYFt>pXCPSlFTdOXZRm;5-e>P6J.jd94`>(f$a!!Y;PdK%Xi@F52NO3qj>61opQb6t;tU'6r-u>=1J;>89BMo.0>X7^#kBG5](]"8rXZbhq)A'.^Eo#1ClS&aY1u5A;@Rh-"L=!*O&NSqf;E<?%re'rppZYcZn5&_ls5QniJ,fLTJ,&-7^]!f*?i?nks7jK]q;qMRn`(.pI/;l1^Alpu0Alg%e'EOBri\QaH2ZjdO2(V^QbWOtb7?7U%q<+CMNgfVSJ,EB_qT&X2mm$bHVgP13~>%AI9_PrivateDataEnd