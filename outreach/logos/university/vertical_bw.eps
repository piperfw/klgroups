%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: UStA_Stacked_BK.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Duncan Stewart
%%CreationDate: 28/03/2014
%%BoundingBox: 0 0 72 91
%%HiResBoundingBox: 0 0 71.4995 90.3511
%%CropBox: 0 0 71.4995 90.3511
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">St Andrews stacked Logo PR Col</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2014-03-27T12:24:25Z</xmp:MetadataDate>
         <xmp:ModifyDate>2014-03-27T12:24:25Z</xmp:ModifyDate>
         <xmp:CreateDate>2014-03-27T12:24:25Z</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>204</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADMAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYqhbrVdLtJBHd3kFvIRyCSyIjFSSK0YjbbFVH/EXl/wD6udp/yPj/AOasVd/iLy//ANXO&#xA;0/5Hx/8ANWKu/wAReX/+rnaf8j4/+asVd/iLy/8A9XO0/wCR8f8AzVirv8ReX/8Aq52n/I+P/mrF&#xA;Xf4i8v8A/VztP+R8f/NWKu/xF5f/AOrnaf8AI+P/AJqxV3+IvL//AFc7T/kfH/zVirv8ReX/APq5&#xA;2n/I+P8A5qxVseYdAJAGp2hJ2AE8f/NWKo/FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXzz+a&#xA;PlTSfOP/ADkl5e0LVEeTTm0Um8RHMbfuzeSJxYb/AGymKoCL8q/yjksZL1fLGrehFA901b6Kvppa&#xA;xXh29Tr6Vwn07Yq1c/lf+TdtqS6bL5f1Jb1mdBF+kIvtRyiLjX1KVY8mUdSqOf2TiqKH5O/lUWZR&#xA;5Y1SqTLbn/T4vttemwH+7Onrqfo3xV1v+Tn5V3E0EMfljVOdwsDx1v4gKXJmEdf3n/Lq9foxVKo/&#xA;In5GSW63CaJqDxlVZuGowtwDW5ufj4yEKQq8TXo1BiqMj/K38nZbW4u7fy/qNzbW0c0rzQ6jDIhW&#xA;C3juZODLIQ1I51+moxVEzfk7+VUM8cD+WNU9SWV4FpfxU5pdQ2h/3Z09W6T6K4qhLv8ALH8mrNlF&#xA;35f1KDm0agvqEQH72WaHkf3myobZy7HZV3OKoiD8ofyonW0aPyxqtL2OKWCt/EPhmtpbpK/vNv3c&#xA;DfTirEfzV8geR/Lfk6y8y+XtNu7C+g1i2tJobu4EweOWy+vKRxLAbMn44FfXuFXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXheuMZf+coInVvT+peXpWZulapLuD2p6mKonUNRs7O1fSzNBbT6pDLY&#xA;25ndYoohLo2mxmWQmlEj5dBuxog3YYqlz2+rz2X6RFnbz+vFqEjwvCEvLqYXlmn1wzlElhlMrxSR&#xA;xAAKI1U0NOCqdeX9UEzyWFxdRXl/Dc6bPLcw7LKLrXEu+RQhWikVbpRJEwDIe1CpKq2ZY7i/tba5&#xA;jW4s00vTXFizmIXN08+oLCksna3SNZpZ9jVV6EVVlUyg80BbRfQuNYubYUit7jS7fTrOyXjbvc/6&#xA;LDdFZTEIYiys/MMKcSQcVSjzPdRNpur6naukt/FY3azXAi+qyTxPCq3UOoW9AFuYYZEnjkUD1FHw&#xA;gJ1VTHzVqtppMseoXbcYba8vJWFVBYR63pjkLyKitFPU4qkVhZanqup3Xpy6fNPBc2XHUGgW8iCz&#xA;XUrJZQmReDRQ3KSGaVPiZ9lZeNEVb8qa2y3Wjw3fp20N7LI2n2PMmWyghsLtYbaTnxd09O9g9KUD&#xA;ieQU0bjyVSD8+bdG/KmUkn4NT0q4X/XbSlhP0cFxV9HWkjS2kMr/AGnjVmp4kAnFVXFXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq8A1uZG/5yK8ySynhHYeVp2LDeo9FCSf+RhxVlGu20kdzqt2h9K/0&#xA;k3V5aSdQs1vpFgwVwCOSNTi691J+eKsUnElsh0F9Q+qhFvraaxhidbpLma7t2W3sGASH0HkgUxSM&#xA;4KxiTZeB9NVk2h6fLbp6t4Iv0ibjTrWf0AVgRLLX/qsUUCfsRIkIoBSpq3U4qkPmw31q+l6nHbyX&#xA;umwWulfpWxgT1JpYRLqQdQo3KGCSZXABJqO1cVTjSbu1u/K+lz20qzQtFCBIhDCq+W7hWFR3DAgj&#xA;scVYv5kmm1zzJ5ms9KUNY29o02o6mPihZ7XSkja2RgCryKskiOtfg5gncUxVnHmCzgvbuG0uAWgu&#xA;L26ilCsyHi+u6YDRlIZT7g1GKsaa91LS9Wup5tRggv7qazlknuLeQwSWtrcSwRXchgQk3MTxSGZW&#xA;Kq6fFyUCiKoryjoxt30iRpXlsopWm0cSgJMbe802+dJroKeLztFFEoqPgQBAB8VVUl/PWOM/ldeh&#xA;h8aRaFMo6faWWPn9IUr9GKvedAd5NC053PJ2tYWYnuTGpOKo7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq+dru4/wCshfzFaaFbpbfy0UhgfmFIkgsgVb0irkH1WrQ1327Yqz7TdN8pX0sltr+n6npN&#xA;/eFoma6v9TFtdtLEsTrDO8qcy8carwcK5C7KQK4qyKT8sfJ0lyLqS3unuVDhZzqF+XAldZXAb16/&#xA;E8asfcYqvH5c+VQSQl7UuJD/ALkdQ3cTG4Df3/X1iZP9bfFWF2jeUZtSvhaWzW1rpU/1BLu/16/s&#xA;2ae0luImCLzkHpxuJOJ5V3J474qqHQ/LltFBbxad+5lfhAItX1j01/0d4+S/CPVBi5x1jB+0F71x&#xA;VqfSPLqxfVoLOCa7vGEH1L/EGpRO4n9K3k5wuBKKxheQ4n4RviqfeXfLPkjzJpFprlpFqAhuGkkh&#xA;9bUL8SK4uFdyaXDCvrW6tseqg4qj5Pyw8mylDLb3UhjeOWMtqF+3GSCR5YnFZ9mSSV2U9iTiqX6t&#xA;5Z8g6KsEbx6hLeKgFhp1pfajLcusUbQqIolnqFVJGTkaKoO5AxV5Z+bHqj8t/N0LadLp0UUOiG3h&#xA;upbu4uFiN7Oio8l07Ci8dljHEEkcm64q9z8jkN5K8vkGoOm2hBHQj0ExVOsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdir5wnMcn51fmlNMnqSHSYLVPsU4yizjoRKVjp8K15bYqzF7Dy26FH0uFkYUKm&#xA;38tEH/kviqL03zDrWhUXT2n1WwqAdO1C70pGiWu5t7hLx2AA6RurL0ClBirOtA83aFrpkisbhfrs&#xA;Arc2DlRcRdqsgLArXYOhKHsxxV555EubmC68ziB7lHk1rUv95Ws1bimo3fJm+ufDxXkK8KkVG2Kp&#xA;xe6knK0kN3bkLOSWOtMw/uZRWZ/Tpb71FYq9x1piqKfUpGNon1mWSB721VvSvLO7swwuYwE9WQJe&#xA;MeXQcevtXFVn5Walp+mflVpl7qNzFaWcQuDLcTOsaLW7lAqzEDc7DFVHVPzAv9SIh0SNrTTZFJOr&#xA;NJYC5Neno2t5cQmPx5TJ/wA8++KpGlhoQZpJ7V725kNZbu9Hl+6uHP8AlzT3UjmnYVoOgoMVYl+Z&#xA;8dlD+XfndbOBbdJbLSDIipp6AmPVPhNNPeRP2z9vfFXs/wCWP/ktfKf/AGxtP/6hY8VZLirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVfODOE/Of8znMgiC2liTKzIgWktnuWkV0FPFlIxVnf6Xg/6mK0&#xA;/wC4hon/AGQYq79Lwf8AUxWn/cQ0T/sgxVCX8mmXwj9fzBbLLC3OC4h1PR4Zom6co5orJJEJGx4t&#xA;uNjtiqSR6X5DtWvB5ili1HS7u4lvri5sdfuDMJ5X5vLNY21xDFIzMSS1vGD2EffFWRp+Rf5S+YUs&#xA;tU0u4u304MXZLTUZ5oLncVEjSvNIpBFD6bo3jiqVX+k/lLp11PZeWCH1SKsU08nmG/srWKuzK0v1&#xA;vlIwpukYPgxXFVui6XomlwWkcevWhFkpW0g/SunS29vyLM31eO7t7p46l2+JpGcjYscVTr9Lwf8A&#xA;UxWn/cQ0T/sgxV36Xg/6mK0/7iGif9kGKsK/Na6S4/L3zmVv4r/jZaWC0U9ncBf9yi7E2cFso/2Q&#xA;OKvZPyx/8lr5T/7Y2n/9QseKslxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvnLVw9t+fn5jsd1n&#xA;8smdFViv9zDZsSSASp/dNQgHFXof6S1D/iz/ALieq/8AePxV36S1D/iz/uJ6r/3j8Vd+ktQ/4s/7&#xA;ieq/94/FULL5gv8A619Rs4Z7/VGT1I9Ot9V1ESlenJjLZRRxrXblI6r74qp615J06Ozv9X8z+YH0&#xA;OWSISXVla3cksLolKC85hJL6v2KBE2PFRWhxVfNqWraNBD9fgaDSmSP6lqyapfJaSq4HAenHazvb&#xA;kgj4JNuys2Kov9JX/wDxZ/3E9V/7x+Ku/SWof8Wf9xPVf+8firv0lqH/ABZ/3E9V/wC8firz784b&#xA;+Z/IXm9Z2YM8GjRRq09zc7NfTyNRrmC2YV9EdFpt13pir3DyNai08leX7QLwFvptnFwJrThAi0r9&#xA;GKp3irsVdirsVdirsVdirsVdirsVdirsVdirsVeA/mBYtH/zkTYWx+GDzR5futP9SoA9R4bhAv3p&#xA;H9+Ksp0y4kvdNtLxZ9RIuYY5gVj8zupEihtmWUqw36jbFW769tbCJZb2/v7aN3WNGlTzOvJ3NFRa&#xA;y/EzHYAbnFVJ45TeWlvr2tT+WbTUHC6fz1DUY766IYDiqz3UsUAbktA4Mm9OKNiqa/mE+reU/Llv&#xA;/hbSpZrVpxLrd3DMBciCIBnaSaZvVd5QvFpSxZRvuaDFXk/lLX49U1aKC602NHmgnkmvGu0unllj&#xA;0m5SSSZH/fcpWfnycb1oKgYqyXyDrV3o35ht5UstSttS0HV7gypbSHkUibTluCYSsaRMpqq0R2AC&#xA;kcFHxYq9B1f8v7mCtx5YvJrXiKLost7fQ6fStf3K20sbW58OIKf5HfFWPLemO9XTb6a/stXKl/0e&#xA;zeYJ3KrSrxvbXM0Uqbj4kY06Gh2xVF+nL/v/AFP/AJFeaf8Aqpiryz86nmn8py6dBJK95q2vWenx&#xA;C4+vB2jtrQy043zPOAJrwe3gO+Kvpu2gjt7eK3jFI4UWNB02UUHTFVTFXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq8R/5yWtp9Kbyj57tkZpPLupoLnh1MMrLIK+3KHh/ssVTfTfLuu3E0lppFjprad6&#xA;zy2+qXlnKYfqdwfXtzEyXSNOyxyqtBGq/CatXqqhvzEt7XyFocV1pSR3GuanL9XudRueSzR2pHGc&#xA;2vphIragcKGZkQbF2J3xVgnkbTdEudOg1BkOo2drerLbaHyVTNG+piEPzeaeOeZHMZ9ZZKFP3TNx&#xA;OKs983fmLLrXmXRvLfl/ULeLTtXjEOprKYUumS89WMhLa7jrWIRbjvzHwkYq8o1fyv52Sxh1DU9b&#xA;U6H6FmsFujKrM8OlTT2qRo/BfU+rgwvVxyZtuWwCqb+XtP1jS/Jv6V0x4dHsdReZbHUI7L0Z1iS0&#xA;9SaaOb1JLhPUEBmkUAE8GRNilFXpuoaT5z8pQxa/oOsy6/pAAkvbK+mmmBildCZ0kZrg+nHHyIES&#xA;hh9o+p9nFWZW0nlrzt5fDTQLdWcjMk1vKKSQTxkq61UhkkQ9GU+6mhBxVjOpeSdX0kodLhs9U0ta&#xA;mVbq2abUIxXbgUntI51Udmo9B1kY4q8vl06fXfzf8i+V5YlQ6IsvmHWIFQxiCe6lN4sLxFpOPBEg&#xA;joWPXFX0rirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqReevKlr5s8o6p5euSFS/hKRyEV9OVS&#xA;Hikp/kSKrYq88/5xz84XNzoFz5I1oND5j8pu1rLBJ9prZWKxkePpn93t24+OKsi/OLzfDoWgw2UO&#xA;r/onVtVkMNiwgjuC4AowYSskaJydA7mtAdh4KvLND8p2t/o9peadZjSdUmvbYfpmCWNYmthqhtLZ&#xA;ZNPhUWcskUi8iqxojFRJXkaYqnGmecdB0C80SGW/n1aaVNIdpP7+UK76irMqQp9mP1I6qF/bX+bF&#xA;V2hznU/Idh/iC3t0WaQwiBmSSJ4U0W7jtWrVkYvGsbbH7R2xVP8AUrzUo9F1TQ76K317RLKCQ/V7&#xA;t3gu/RtrK2vP96YxIGdfrBWM+mG+EcnJJbFWOarPrGjaLcw29xdXHlq/u5dP1WzUKt3b3sk6F4CI&#xA;+MUJKl/jiYRS1ACoziQqsfstUk0y60y4tZeMmnaVBFe6e1yLNYdRM9xFFJOx+Hmts7PG8ysuy9mB&#xA;xV7mvmttE/L1PMvmh1iktrNbi9KoYSzEfAojYkpJISo4dmNMVee/846aFqeoNrn5la5Hx1TzRO31&#xA;QEfYtFep4134s4Cr/kopxV7VirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVeK/nN5I1/R9et&#xA;vzT8kRn9N6aB+mrFASLu2UUZmVd2og4uOvGhFCuKp/banof5w+TbS50W/FjxuITrFu0cc0yonxva&#xA;So9UZHcK3xqyOBup3GKvO/NPk4aNZSReY7G6ZrXUnh8v6pEqfUYLZ7mS4iurtzPaW8fJ70xhOSgF&#xA;B8NKEqst/J/zJpWi6Ha2GqWZs7meCKaG7hsGUSNLJOrxtJbo6n47Z5Ii1OSMOrK2KsV1Cw8q6bDa&#xA;69HZQT65f3iLDLdvMZXt7zT5i1ykAWaX7UqS8I4uXKiimKsmvtK1vRzrc+vQr9Y1yz1J7e7gfnbg&#xA;R6aqQWnxCOQSLDaPIaoAd6E0xVTh8uReaPP2saReQ30enQ3k9zcSQMiWzFZIzE7Vbl6rFHiVgleI&#xA;ajeCr2G7TTIVN9drDGtohc3UoUCJFFWbm32QB1xV8/axqOofnt50j0PSTJB+XGhSrLql7uhu5RWg&#xA;WtD8QBEY/ZFXbfiMVfQtnZ2tlaQ2dpEsFrbRrFBCg4okaAKqqB0AApiqrirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirxHz1+VHmbyx5gk8+flY3oX5JfVvLw/uLperenGKBq9TH47oQ1Biq/&#xA;Q/NH5dfnFPp9vrTXGleatFdmGiSyBAswI9Ro45VaKf7HEh05KK7DriqO8t/lf+YFlolin6ct9O1K&#xA;AiKREhFwkcUMlw8EsTOT8am6f4COHEhaVBYqvKfOXloaNrqeXrafUW0dLhEW51C3leO5aySRuaux&#xA;eOWK1CmMhYo1RaGpHxhV6JeQeZb2AW+n2+r63HJBNp2nTXKNarHaT2sC+orzwLCzcnmUyy/EyD4W&#xA;J6qss0Ow8tfld5ev9b8z6hbQ6hqczXWq3caiOOSdqt6VtCgBIG9AF5HqfZV51cXnnz89rz6rYJN5&#xA;c/LOOSlxdOALi94GvECtG3HQfAp3YsQBir3Pyx5X0PyxosGjaJaraWFuPhRd2Zj9p3Y7szdycVTX&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXnv5k/kn5U87ML88tJ8xRUa31m0HGT&#xA;ku6+qoK+pxoKGoYdmGKsEh/MT82PyskSx/MHT38xeWlIjg8yWfxSovRfVJADH2k4t/lNirOrXVPy&#xA;h88T2vnFr+01AaJCxjW7kCR2ZZ1cyyW83H035IKOw7bdsVYz5l/5yIW+vz5f/LLS5fM+uPVfrQRh&#xA;aRduf7LOAf2iVTvyOKqflr8htV1zVI/M35r6m2uar9qHR0b/AEOAE14Nx4qQO6IAtevLFXtVvbwW&#xA;8EdvbxrDBEoSKKNQqKqigVVFAAMVX4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYqtlijljaKVFkjcFXRgCpB2IIPUYq8s8w/wDONH5W6zq8epC0m02jcrmzsZBFbzexQq3p/wDP&#xA;Pj/HFXoPl3yt5d8t6eun6Fp8On2i0rHCtCxG3J23Z2/ymJOKppirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirz3zDAp/OPyxFzkEFzYX89xAskgikltWg9F3jDcGZORoSMVRXmK5Oj+Z&#xA;9S1yC2e8kstFe8Nn6zRxu8UhUsAeUav6SleXGtNsVU/L/wCZGtalqGlWl75cOmrr2nzajo7Ndxys&#xA;/wBXEbNHMqJ+6qJkKtybY7gGoCqF8vfmC0GjeT2GmyLp/mK5lsRd3d687286vLwWWR42aQy+mQm/&#xA;X4em+Kou6/NGG1ntrS4tra1utRuL2LTXurwQW0kFg3CW4kmaKsYdzxjUIxbr9nfFUtf849Smg0b9&#xA;FeWJtSvNYe9t47WO6iQLc2Bb1AJWXg0LABllqAVPSu2Kplp/5mzXvmj9AJp9tFdxStBd2k1+kV/E&#xA;whEolFo0Y9SBieKujk7g8adFWPf4414aH5Yl0eyuLd7/AMzXNhf2092ly7iJ7syQevOCwVpIajiP&#xA;hUcQcVZE35kajHP5hs5tFWPUtCks44rQ3VTdfpBgtuYm9GnxseP+sCPfFU61bzPdWeqaXoltZJc6&#xA;3qcM1wIWmMdvFHbBBKzz+m705yqq0iqa9BirBfM3n2/1uw0rTYdLeO5k8xfoPzFphnCqTFbyXBhS&#xA;b4C8UwVWD8QCtVIFaYq9TsbeK2sbe2iiEEUMSRxwA8giooASvfiBTFVfFXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYqxrzT5MOs6npes2Ooy6TrWkestpdxokqNFcACWKaF/hdW4KeoIPQ4qonyReT6fr&#xA;CX2szXWqa1bLZTX5ijRYbdQ49OCBfgX+9c8mLNU7khQAqpr5Bnjl8tXMOrOl55ZtLmxt5TCjLNFc&#xA;pFGPVSo3RYF+yRU/diqgv5X2beQf8HXGoTyQxSCex1FFWK5glSYXEciFduSS1IPhtiqL1vyBb3c2&#xA;iXmj3smjal5eje302eJFlj+ryoqPBLE+zoRGvcEEVBxVdP5M1G41jQ9VuNclnutF9cqXghAlN1VZ&#xA;eQjEYAEdFSm4pUljiqCu/wAtTf8AmC21XUtXlvItPvpNS0y3eCD1IZn5FIzcU9ZoIy1VjqPclQAF&#xA;UP8A8qpcaJaadHr1zFcWGrtrlnfpFD6i3MplaVWVlaNkZrl9iNvfFVltp2k+Y/zPi1u0W4ZfLlrL&#xA;Y3906NFDc3fqkQxjkqCX6t++cso4guhU4qyDzF5SOp6xpWuWd61hq+keskE3ASxSQ3AUSwzREpyV&#xA;uCkEMCCOuKpVP+WUTNZSw6nLHdW2rNr1zcGKNmuL1o2h+MfCFjWFzGqrvSm9RUqs2xV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2Kpb5m1+08veXtR1y8DNbadbyXMiLTkwjUnite7HYYqxqz1f8ypIdG1&#xA;VodLudN1OS2+t2FvHcfWLaC5pykW5MjJN6Yap/coMVT7RfNFlq2sa3pdvDLHLoU8VtcySBQjvLEs&#xA;w9PizGgVx9oDfFUx1LUbPTdOutRvZBFaWcTz3ErbBY41LMfoAxVjP5ZeepPOGh3F1d2Z03VbC7ms&#xA;tR05q8oZI2qgNd942U/OuKsnn1CwtwxnuYoghCuXdVoW3UGp79sVVXkjSMyOwWNRyZ2IAAHck4qw&#xA;7yx5s1nUfPvmLQ7qWzn0zT7e0utNmtFcMY7ppdpXaSRXZfTG6gD2xVlsd7Zyuscc8buwYqiupJCN&#xA;xYgA/stsffFVseo6fIJTHcxOISFmKup4E7ANQ7fTiqotzbMoZZUZWbgrBgQW8B74q4XNsXaMSoXW&#xA;vJAwqKdajFVlrfWV2pe0uIrhVNGaJ1cA+5UnFVfFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUp83XW&#xA;j2nlfVbjWofrGkRWsrahBQNzg4H1FoSo3WvfFXkWteVdI8tRaLd/lp5nvVvbm8to9P0CK/a9sbm3&#xA;klUTH0GMn7uOMlmetFHvQ4qm35fWHkm2/NnznatDZx6/a30U2mI4X6ysU1inrPDy+KjFm5lfHfri&#xA;qffmHq0ep6xpPkawvbWPUb+UX1/HOeYFpZlZRG8aPGx+sS8F41FU54qxkahc+Rvzmhn1y+sVs/PF&#xA;v6V0LZTbpFeWQAglkWWSUj1EcpWu5xVR8r+U/wAv9X8zfmTZy6fYXkaXMZtrYLGyxI9mhkkgQbRs&#xA;ZSeToAeXfbFUo8teYrH9G/lXH5iu4n8rSWFxDcNcMrWv6SijUW6XRY8AUjr6Yfvv1AIVTzyRP+X9&#xA;z+Z3nmGxjsF0K8sLDmnGNbS64+t68iKQI5ErszL8NRirAPLmg6Tbf844L5o0mIr5kSOW31S+t3ke&#xA;eOwk1Ok6NGrrRPRjrTbbkdqscCvUNK8seVNc80WGoQ65ot5bzaVPZzaLpdqsS3di5XgZV+sz/DC/&#xA;2fg2O2FWB6fpnmeXyNc6Tpiva3n5W3U90GRAiX97a3LSQghaF/8AQVbl/MZF+RVZbfaR5f1/yF5j&#xA;83SypoJ86S2aQag8KForf1obW2E4NKxzyfFKSfsPv9nFU2/Li91mLz1rOlaxp+kHUE0+1lk1nQ+a&#xA;wyQrLKsEU8TcvTlozN13HsBir07FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWnRXUo4DIwIZSKgg9Q&#xA;RiqEsNF0fTmkfT7C3s3l3laCJIi3+sUAriqutparcNcrCguXXg84Ucyo/ZLUrTbFVp0+wa4+sm2i&#xA;NxyDesUXnyUcQeVK1A2GKrbjTNNuXMlxaQzOyhGeSNWJUGoUkg7VxVuDTdOgcvBawxOVKFkjVTxY&#xA;8itQOhO+Krf0Vpn1ZrX6nB9Wchng9NOBIAAJWlNgoxVzaTpT/asoGooj3iQ/ABQL06U2piqpBY2V&#xA;vz9C3ji9Wnq8EVeVBQcqDfFVKw0jSdO9T9H2UFn6p5S/V4ki5N4twAqcVRCQQp6nCNV9VuUtAByY&#xA;gCreJoAMVWvZ2j231V4I2tQoQQFVMfFei8aUoKYqssdO0/T4Pq9haxWkANfSgjWNKnvxQAYqiMVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVf//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:74117FD020071168B976CBD4A7D04F06</stEvt:instanceID>
                  <stEvt:when>2011-01-18T11:56:10Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:74117FD420071168B976CBD4A7D04F06</stEvt:instanceID>
                  <stEvt:when>2011-01-18T12:12:02Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:74117FD520071168B976CBD4A7D04F06</stEvt:instanceID>
                  <stEvt:when>2011-01-18T12:15:14Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0380117407206811871F82082B23A4D6</stEvt:instanceID>
                  <stEvt:when>2014-03-05T09:11:55Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FB7F117407206811A120DF0CF3DE0832</stEvt:instanceID>
                  <stEvt:when>2014-03-27T09:37:51Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FC7F117407206811A120DF0CF3DE0832</stEvt:instanceID>
                  <stEvt:when>2014-03-27T09:39:23Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:732EBE8621206811A120DF0CF3DE0832</stEvt:instanceID>
                  <stEvt:when>2014-03-27T12:24:25Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:OriginalDocumentID>uuid:ED579150C5B7DD11811493F8744A25C3</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:FC7F117407206811A120DF0CF3DE0832</stRef:instanceID>
            <stRef:documentID>xmp.did:FC7F117407206811A120DF0CF3DE0832</stRef:documentID>
            <stRef:originalDocumentID>uuid:ED579150C5B7DD11811493F8744A25C3</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:InstanceID>xmp.iid:732EBE8621206811A120DF0CF3DE0832</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:732EBE8621206811A120DF0CF3DE0832</xmpMM:DocumentID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>25.223611</stDim:w>
            <stDim:h>31.838194</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:HasVisibleOverprint>True</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 8.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -90.3511 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 90.3511 li
71.4995 90.3511 li
71.4995 0 li
cp
clp
[1 0 0 1 0 0 ]ct
21.1265 60.2114 mo
21.1265 60.0093 21.1162 59.8687 21.0796 59.8091 cv
21.0474 59.7583 20.9819 59.7349 20.8545 59.729 cv
20.5967 59.7134 li
20.5967 59.5522 li
20.875 59.564 21.1265 59.5688 21.3896 59.5688 cv
21.6367 59.5688 21.8872 59.564 22.1665 59.5522 cv
22.1665 59.7134 li
21.9097 59.729 li
21.7803 59.7349 21.7158 59.7583 21.6831 59.8091 cv
21.6465 59.8687 21.6367 60.0093 21.6367 60.2114 cv
21.6367 62.0552 li
21.6367 62.8149 22.0317 63.0337 22.7402 63.0337 cv
23.3174 63.0337 23.8428 62.8149 23.8428 61.9253 cv
23.8428 60.2114 li
23.8428 60.0093 23.8335 59.8687 23.7949 59.8091 cv
23.7632 59.7583 23.6987 59.7407 23.5703 59.729 cv
23.3354 59.7134 li
23.3354 59.5522 li
23.5488 59.5591 23.7632 59.5688 23.9541 59.5688 cv
24.1699 59.5688 24.3623 59.5591 24.5991 59.5522 cv
24.5991 59.7134 li
24.3623 59.729 li
24.2334 59.7407 24.1699 59.7583 24.1372 59.8091 cv
24.0996 59.8687 24.0889 60.0093 24.0889 60.2114 cv
24.0889 61.7603 li
24.0889 62.9067 23.6563 63.3677 22.5732 63.3677 cv
21.6636 63.3677 21.1265 63.0942 21.1265 62.1138 cv
21.1265 60.2114 li
cp
true sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 nzopmsc
f
25.6201 62.7134 mo
25.6201 62.8569 25.627 62.9644 25.647 63.0239 cv
25.6685 63.0708 25.7285 63.0942 25.8179 63.1001 cv
26.0591 63.1157 li
26.0591 63.2739 li
25.8726 63.271 25.6582 63.2603 25.3955 63.2603 cv
25.1333 63.2603 24.9189 63.271 24.731 63.2739 cv
24.731 63.1157 li
24.9736 63.1001 li
25.0635 63.0942 25.1221 63.0708 25.1436 63.0239 cv
25.165 62.9644 25.1719 62.8569 25.1719 62.7134 cv
25.1719 61.5083 li
25.1719 61.3364 25.1602 61.2192 25.1333 61.1763 cv
25.1016 61.1333 25.0474 61.1157 24.9346 61.1157 cv
24.7368 61.1157 li
24.7368 60.9673 li
25.0522 60.936 25.3745 60.8325 25.5718 60.7485 cv
25.6201 60.7681 li
25.6201 61.2241 li
25.6318 61.2241 li
26.0269 60.8823 li
26.146 60.7798 26.248 60.7485 26.4624 60.7485 cv
27.0869 60.7485 27.3457 61.0981 27.3457 61.6792 cv
27.3457 62.7134 li
27.3457 62.8569 27.3511 62.9644 27.3726 63.0239 cv
27.3936 63.0708 27.4526 63.0942 27.5435 63.1001 cv
27.7632 63.1157 li
27.7632 63.2739 li
27.6299 63.271 27.4736 63.2603 27.3242 63.2603 cv
27.1748 63.2603 27.0195 63.271 26.895 63.2739 cv
26.895 61.7563 li
26.895 61.312 26.6436 61.0747 26.2788 61.0747 cv
25.9526 61.0747 25.6201 61.3579 25.6201 61.5786 cv
25.6201 62.7134 li
cp
f
28.8711 59.8794 mo
28.8711 60.0356 28.7261 60.1743 28.5723 60.1743 cv
28.4155 60.1743 28.2773 60.0356 28.2773 59.8794 cv
28.2773 59.7271 28.4155 59.5806 28.5723 59.5806 cv
28.7261 59.5806 28.8711 59.7271 28.8711 59.8794 cv
cp
28.8228 62.7134 mo
28.8228 62.8569 28.8281 62.9644 28.8506 63.0239 cv
28.8711 63.0708 28.9297 63.0942 29.0215 63.1001 cv
29.2681 63.1157 li
29.2681 63.2739 li
29.0742 63.271 28.8599 63.2603 28.5981 63.2603 cv
28.3364 63.2603 28.1216 63.271 27.9277 63.2739 cv
27.9277 63.1157 li
28.1753 63.1001 li
28.2661 63.0942 28.3257 63.0708 28.3452 63.0239 cv
28.3691 62.9644 28.374 62.8569 28.374 62.7134 cv
28.374 61.5083 li
28.374 61.3364 28.3638 61.2192 28.3364 61.1763 cv
28.3037 61.1333 28.2495 61.1157 28.1367 61.1157 cv
27.939 61.1157 li
27.939 60.9673 li
28.2554 60.936 28.5776 60.8325 28.7764 60.7485 cv
28.8228 60.7681 li
28.8228 62.7134 li
cp
f
31.1636 62.7134 mo
31.0732 62.9116 31.0181 63.1157 30.9429 63.2983 cv
30.6768 63.2983 li
29.7539 61.1392 li
29.7231 61.064 29.6904 60.9673 29.5889 60.9614 cv
29.4072 60.9526 li
29.4072 60.8022 li
29.6162 60.8071 29.8242 60.8169 30.0327 60.8169 cv
30.2417 60.8169 30.4453 60.8071 30.6543 60.8022 cv
30.6543 60.9526 li
30.3936 60.9614 li
30.2534 60.9673 30.2163 61.0435 30.3052 61.2681 cv
30.9429 62.8091 li
31.0566 62.5649 31.1743 62.311 31.2759 62.061 cv
31.5015 61.4907 li
31.645 61.1235 31.6348 60.9673 31.4731 60.9614 cv
31.2544 60.9526 li
31.2544 60.8022 li
31.4214 60.8071 31.5928 60.8169 31.7588 60.8169 cv
31.9243 60.8169 32.0967 60.8071 32.2612 60.8022 cv
32.2612 60.9526 li
32.0967 60.9614 li
31.9614 60.9731 31.8706 61.1606 31.7964 61.3218 cv
31.1636 62.7134 li
cp
f
32.9399 61.813 mo
33.3809 61.8618 33.8306 61.8521 34.2168 61.8306 cv
34.2168 61.3325 34.0332 60.9233 33.6475 60.9233 cv
33.2368 60.9233 32.9141 61.229 32.9399 61.813 cv
cp
34.6929 61.729 mo
34.6929 61.8022 34.6929 61.8774 34.6826 61.9536 cv
34.3613 62.0063 34.0332 62.0278 33.7129 62.0278 cv
32.9316 62.0278 li
32.9316 62.6528 33.2417 63.0845 33.9004 63.0845 cv
34.1572 63.0845 34.3613 62.9556 34.5654 62.8306 cv
34.6343 62.8853 li
34.5264 63.0669 li
34.4883 63.1313 34.0332 63.3677 33.6699 63.3677 cv
32.8618 63.3677 32.4316 62.854 32.4316 62.1294 cv
32.4316 61.6089 32.5718 61.2993 32.8193 61.106 cv
32.9204 61.0278 33.0327 60.9438 33.1499 60.8911 cv
33.3384 60.8071 33.4932 60.7485 33.6758 60.7485 cv
34.2583 60.7485 34.6929 61.1235 34.6929 61.729 cv
cp
f
35.4155 61.5083 mo
35.4155 61.3364 35.4048 61.2192 35.3774 61.1763 cv
35.3472 61.1333 35.2905 61.1157 35.1792 61.1157 cv
34.981 61.1157 li
34.981 60.9673 li
35.2974 60.936 35.6206 60.8325 35.8169 60.7485 cv
35.8667 60.7681 li
35.8667 61.312 li
35.8755 61.312 li
36.1655 60.9673 li
36.2925 60.813 36.4771 60.7485 36.6157 60.7485 cv
36.7056 60.7485 36.8188 60.7739 36.8618 60.8071 cv
36.814 61.4497 li
36.7017 61.4497 li
36.6421 61.3218 36.5308 61.2036 36.3364 61.2036 cv
36.1011 61.2036 35.8667 61.4497 35.8667 61.7915 cv
35.8667 62.7134 li
35.8667 62.8569 35.8706 62.9644 35.8921 63.0239 cv
35.9126 63.0708 35.9937 63.0942 36.1187 63.1001 cv
36.395 63.1157 li
36.395 63.2739 li
36.1187 63.271 35.9038 63.2603 35.6401 63.2603 cv
35.3774 63.2603 35.1646 63.271 34.9707 63.2739 cv
34.9707 63.1157 li
35.2183 63.1001 li
35.3081 63.0942 35.3657 63.0708 35.3882 63.0239 cv
35.4106 62.9644 35.4155 62.8569 35.4155 62.7134 cv
35.4155 61.5083 li
cp
f
37.354 62.4946 mo
37.354 62.7134 li
37.354 63.0454 37.7339 63.1675 38.0444 63.1675 cv
38.3823 63.1675 38.6724 62.9712 38.6724 62.6812 cv
38.6724 62.5083 38.5815 62.3716 38.4155 62.3296 cv
38.1802 62.269 37.8843 62.2095 37.6265 62.1138 cv
37.3716 62.0181 37.1733 61.8569 37.1733 61.5308 cv
37.1733 60.9526 37.6753 60.7485 38.1802 60.7485 cv
38.4312 60.7485 38.6597 60.8071 38.8687 60.8823 cv
38.853 61.0747 38.8501 61.272 38.8433 61.4868 cv
38.6919 61.4868 li
38.6919 61.3638 li
38.6919 61.0845 38.3755 60.9233 38.0728 60.9233 cv
37.6177 60.9233 37.5464 61.1763 37.5464 61.3579 cv
37.5464 61.5884 37.7251 61.7114 38.1304 61.7817 cv
38.7681 61.8892 39.0679 62.0503 39.0679 62.4673 cv
39.0679 63.0571 38.4771 63.3677 37.8843 63.3677 cv
37.6265 63.3677 37.396 63.3286 37.1353 63.2378 cv
37.187 63.0024 37.1938 62.7466 37.1938 62.4946 cv
37.354 62.4946 li
cp
f
40.3003 59.8794 mo
40.3003 60.0356 40.1558 60.1743 39.9995 60.1743 cv
39.8452 60.1743 39.7065 60.0356 39.7065 59.8794 cv
39.7065 59.7271 39.8452 59.5806 39.9995 59.5806 cv
40.1558 59.5806 40.3003 59.7271 40.3003 59.8794 cv
cp
40.2515 62.7134 mo
40.2515 62.8569 40.2573 62.9644 40.2788 63.0239 cv
40.3003 63.0708 40.3589 63.0942 40.4497 63.1001 cv
40.6968 63.1157 li
40.6968 63.2739 li
40.5034 63.271 40.2905 63.2603 40.0259 63.2603 cv
39.7642 63.2603 39.5503 63.271 39.3569 63.2739 cv
39.3569 63.1157 li
39.604 63.1001 li
39.6948 63.0942 39.7524 63.0708 39.7749 63.0239 cv
39.7974 62.9644 39.8022 62.8569 39.8022 62.7134 cv
39.8022 61.5083 li
39.8022 61.3364 39.7925 61.2192 39.7642 61.1763 cv
39.7319 61.1333 39.6792 61.1157 39.5659 61.1157 cv
39.3677 61.1157 li
39.3677 60.9673 li
39.6831 60.936 40.0063 60.8325 40.2036 60.7485 cv
40.2515 60.7681 li
40.2515 62.7134 li
cp
f
40.9194 61.2349 mo
40.9194 61.1235 li
41.3394 60.936 li
41.3394 60.561 li
41.3394 60.4204 41.3335 60.2817 41.3159 60.1372 cv
41.5112 60.0786 41.6812 59.9937 41.7729 59.9341 cv
41.8374 59.9937 li
41.8042 60.2271 41.7769 60.5288 41.7769 60.7544 cv
41.7769 60.9575 li
42.5112 60.9233 li
42.4644 61.2134 li
41.7769 61.2134 li
41.7769 62.6157 li
41.7769 62.8638 41.8472 62.9868 42.0718 62.9868 cv
42.2124 62.9868 42.314 62.9272 42.3882 62.8853 cv
42.4585 62.9771 li
42.2007 63.2603 li
42.1528 63.314 41.9644 63.3237 41.854 63.3237 cv
41.5698 63.3237 41.3286 63.1899 41.3286 62.7544 cv
41.3286 61.2134 li
40.9194 61.2349 li
cp
f
44.7788 61.2349 mo
44.8579 61.0376 44.7788 60.978 44.5835 60.9614 cv
44.4458 60.9526 li
44.4458 60.8022 li
44.6167 60.8071 44.7827 60.8169 44.9526 60.8169 cv
45.1255 60.8169 45.2905 60.8071 45.4644 60.8022 cv
45.4644 60.9526 li
45.314 60.9614 li
45.1831 60.9731 45.0659 61.1392 44.8618 61.6089 cv
43.7769 64.1196 li
43.6069 64.5083 43.4116 64.7749 42.9624 64.7749 cv
42.8687 64.7749 42.7534 64.7329 42.6929 64.6938 cv
42.8208 64.2935 li
42.8921 64.2935 li
42.9565 64.3579 43.0894 64.4224 43.1655 64.4185 cv
43.4761 64.395 43.646 63.9595 43.7495 63.7153 cv
43.8735 63.3872 li
43.7798 63.1353 43.6733 62.8745 43.5737 62.6274 cv
42.9897 61.2241 li
42.9019 61.021 42.8276 60.9731 42.7104 60.9614 cv
42.6128 60.9526 li
42.6128 60.8022 li
42.8208 60.8071 43.0269 60.8169 43.2358 60.8169 cv
43.4448 60.8169 43.646 60.8071 43.856 60.8022 cv
43.856 60.9526 li
43.6519 60.9614 li
43.5034 60.9673 43.4116 61.021 43.5239 61.312 cv
43.8667 62.2095 li
43.9429 62.4126 44.0269 62.606 44.1392 62.7974 cv
44.7788 61.2349 li
cp
f
46.9995 61.8833 mo
46.9995 62.4438 47.2026 63.1899 47.8882 63.1899 cv
48.3755 63.1899 48.5845 62.7036 48.5845 62.2036 cv
48.5845 61.5151 48.2593 60.9233 47.7427 60.9233 cv
47.1772 60.9233 46.9995 61.3853 46.9995 61.8833 cv
cp
46.5015 62.1138 mo
46.5015 61.312 47.0044 60.7485 47.8667 60.7485 cv
48.5532 60.7485 49.0835 61.2827 49.0835 61.9692 cv
49.0835 62.7886 48.5005 63.3677 47.6792 63.3677 cv
47.0044 63.3872 46.5015 62.854 46.5015 62.1138 cv
cp
f
51.0806 59.8306 mo
51.0151 59.8638 li
50.9214 59.772 50.7964 59.7134 50.6626 59.7134 cv
50.3286 59.7134 50.271 59.8687 50.271 60.479 cv
50.271 60.936 li
50.9741 60.9155 li
50.937 61.1978 li
50.271 61.1978 li
50.271 62.7134 li
50.271 62.8569 50.2769 62.9644 50.2983 63.0239 cv
50.3198 63.0708 50.3794 63.0942 50.4702 63.1001 cv
50.7163 63.1157 li
50.7163 63.2739 li
50.522 63.271 50.3101 63.2603 50.0474 63.2603 cv
49.7847 63.2603 49.5698 63.271 49.3765 63.2739 cv
49.3765 63.1157 li
49.6245 63.1001 li
49.7144 63.0942 49.7739 63.0708 49.7964 63.0239 cv
49.8149 62.9644 49.8218 62.8569 49.8218 62.7134 cv
49.8218 61.1978 li
49.4526 61.2192 li
49.4526 61.1021 li
49.8218 60.936 li
49.8218 60.7114 li
49.8218 60.3579 49.8901 60.1147 50.0474 59.938 cv
50.3569 59.5864 li
50.4956 59.4263 50.689 59.3599 50.8394 59.3599 cv
50.9214 59.3599 51.0054 59.3892 51.0806 59.4185 cv
51.0806 59.8306 li
cp
f
21.8584 67.2407 mo
21.8193 66.8696 li
21.7993 66.6919 21.7729 66.6274 21.5317 66.478 cv
21.3516 66.3696 21.0762 66.3228 20.8218 66.3228 cv
20.3657 66.3228 19.8564 66.6274 19.8564 67.2759 cv
19.8564 67.7153 20.1187 67.9917 20.9316 68.0845 cv
21.8511 68.1782 22.4326 68.4067 22.4326 69.1509 cv
22.4326 70.2642 21.4336 70.7993 20.4658 70.7993 cv
20.0073 70.7993 19.563 70.6558 19.3496 70.5503 cv
19.4023 70.2114 19.4023 69.8618 19.3955 69.5542 cv
19.6025 69.5542 li
19.6553 69.9907 li
19.6885 70.2642 20.2041 70.5122 20.7197 70.5122 cv
21.3042 70.5122 21.8843 70.1528 21.8843 69.5103 cv
21.8843 68.8892 21.4038 68.7134 20.7373 68.6372 cv
19.7163 68.519 19.311 68.1958 19.311 67.522 cv
19.311 66.5132 20.1987 66.0513 20.978 66.0513 cv
21.5005 66.0513 21.8911 66.2173 22.1582 66.3228 cv
22.0933 66.6558 22.0674 66.9351 22.0674 67.2407 cv
21.8584 67.2407 li
cp
f
22.7183 68.2075 mo
22.7183 68.0708 li
23.2266 67.8403 li
23.2266 67.3853 li
23.2266 67.2153 23.2192 67.0454 23.2017 66.8696 cv
23.4346 66.7974 23.6431 66.6919 23.7529 66.6235 cv
23.8306 66.6919 li
23.7944 66.98 23.7622 67.3442 23.7622 67.6177 cv
23.7622 67.8687 li
24.6533 67.8267 li
24.5947 68.1782 li
23.7622 68.1782 li
23.7622 69.8872 li
23.7622 70.186 23.8467 70.3354 24.1191 70.3354 cv
24.2891 70.3354 24.4111 70.2642 24.5029 70.2114 cv
24.5879 70.3247 li
24.2759 70.6685 li
24.2168 70.7339 23.9902 70.7485 23.8521 70.7485 cv
23.5059 70.7485 23.2129 70.5825 23.2129 70.0552 cv
23.2129 68.1782 li
22.7183 68.2075 li
cp
f
29.3013 68.9165 mo
28.4785 66.9722 li
27.6499 68.9165 li
29.3013 68.9165 li
cp
30.3242 69.8071 mo
30.3813 69.9399 30.4521 70.1157 30.5317 70.2524 cv
30.603 70.3755 30.6748 70.4595 30.7905 70.4731 cv
31.0132 70.4927 li
31.0132 70.687 li
30.7275 70.6841 30.4409 70.6685 30.1489 70.6685 cv
29.9185 70.6685 29.6309 70.6841 29.2813 70.687 cv
29.2813 70.4927 li
29.5869 70.4731 li
29.7236 70.4673 29.8535 70.4224 29.8535 70.3442 cv
29.8535 70.2524 29.7813 70.0806 29.7183 69.9253 cv
29.4185 69.1763 li
27.5415 69.1763 li
27.3569 69.6147 li
27.2983 69.7505 27.1313 70.186 27.1313 70.2896 cv
27.1313 70.4282 27.2417 70.4536 27.4424 70.4731 cv
27.6836 70.4927 li
27.6836 70.687 li
27.3735 70.6841 27.123 70.6685 26.9341 70.6685 cv
26.6797 70.6685 26.4326 70.6841 26.1855 70.687 cv
26.1855 70.4927 li
26.4272 70.4731 li
26.5811 70.4595 26.7065 70.3247 26.7783 70.1528 cv
27.938 67.5142 li
28.1411 67.0581 28.3608 66.5767 28.5381 66.106 cv
28.7456 66.106 li
30.3242 69.8071 li
cp
f
32.2778 70.0044 mo
32.2778 70.1802 32.2842 70.3091 32.3101 70.3823 cv
32.3364 70.4419 32.4082 70.4673 32.5186 70.4731 cv
32.814 70.4927 li
32.814 70.687 li
32.5854 70.6841 32.3223 70.6685 32.0049 70.6685 cv
31.6836 70.6685 31.4238 70.6841 31.1958 70.687 cv
31.1958 70.4927 li
31.4893 70.4731 li
31.5996 70.4673 31.6709 70.4419 31.6978 70.3823 cv
31.7227 70.3091 31.7314 70.1802 31.7314 70.0044 cv
31.7314 68.5366 li
31.7314 68.3286 31.7163 68.186 31.6836 68.1333 cv
31.644 68.0845 31.5791 68.061 31.4438 68.061 cv
31.2007 68.061 li
31.2007 67.8813 li
31.5874 67.8403 31.978 67.7153 32.2192 67.6118 cv
32.2778 67.6401 li
32.2778 68.1938 li
32.2905 68.1938 li
32.7725 67.7759 li
32.918 67.6528 33.0376 67.6118 33.2993 67.6118 cv
34.0605 67.6118 34.3745 68.0356 34.3745 68.7446 cv
34.3745 70.0044 li
34.3745 70.1802 34.3813 70.3091 34.4067 70.3823 cv
34.4346 70.4419 34.5049 70.4673 34.6167 70.4731 cv
34.8838 70.4927 li
34.8838 70.687 li
34.7222 70.6841 34.5317 70.6685 34.3496 70.6685 cv
34.1675 70.6685 33.979 70.6841 33.8296 70.687 cv
33.8296 68.8364 li
33.8296 68.2974 33.5205 68.0103 33.0796 68.0103 cv
32.6821 68.0103 32.2778 68.354 32.2778 68.6226 cv
32.2778 70.0044 li
cp
f
37.6323 68.3892 mo
37.6323 68.2563 37.105 67.9067 36.7134 67.9185 cv
36.0483 67.937 35.7437 68.3159 35.7437 69.1118 cv
35.7437 69.7192 36.0815 70.3755 36.7593 70.3755 cv
37.0327 70.3755 37.2944 70.186 37.4702 69.9653 cv
37.6528 69.7378 37.6323 69.5161 37.6323 69.23 cv
37.6323 68.3892 li
cp
37.6323 66.6274 mo
37.6323 66.478 37.6147 66.3618 37.4702 66.3618 cv
37.105 66.3618 li
37.105 66.1782 li
37.4526 66.1274 37.7983 66.0688 38.1245 65.938 cv
38.1802 65.9888 li
38.1802 70.0044 li
38.1802 70.1802 38.188 70.3091 38.2134 70.3823 cv
38.2397 70.4419 38.3101 70.4673 38.4194 70.4731 cv
38.7222 70.4927 li
38.7222 70.687 li
38.4536 70.6841 38.2886 70.6685 38.1274 70.6685 cv
37.9585 70.6685 37.7983 70.6841 37.6284 70.687 cv
37.6597 70.0864 li
36.9351 70.6938 li
36.8774 70.7397 36.6909 70.7485 36.521 70.7485 cv
35.6089 70.7485 35.1792 70.0981 35.1792 69.2397 cv
35.1792 68.6489 35.4624 68.2075 35.7896 68.0356 cv
36.3628 67.7349 li
36.5581 67.6333 36.7339 67.6118 36.8452 67.6118 cv
37.1382 67.6118 37.3521 67.6978 37.6323 67.8188 cv
37.6323 66.6274 li
cp
f
39.6089 68.5366 mo
39.6089 68.3286 39.5972 68.186 39.564 68.1333 cv
39.521 68.0845 39.4604 68.061 39.3228 68.061 cv
39.0796 68.061 li
39.0796 67.8813 li
39.4653 67.8403 39.853 67.7153 40.0962 67.6118 cv
40.1558 67.6401 li
40.1558 68.2974 li
40.1694 68.2974 li
40.521 67.8813 li
40.6763 67.6909 40.896 67.6118 41.0679 67.6118 cv
41.1772 67.6118 41.3159 67.6431 41.3667 67.6841 cv
41.311 68.4663 li
41.1714 68.4663 li
41.1011 68.3091 40.9624 68.1665 40.729 68.1665 cv
40.4409 68.1665 40.1558 68.4663 40.1558 68.8833 cv
40.1558 70.0044 li
40.1558 70.1802 40.1616 70.3091 40.189 70.3823 cv
40.2144 70.4419 40.3101 70.4673 40.4624 70.4731 cv
40.7993 70.4927 li
40.7993 70.687 li
40.4624 70.6841 40.1987 70.6685 39.8804 70.6685 cv
39.564 70.6685 39.3032 70.6841 39.064 70.687 cv
39.064 70.4927 li
39.3657 70.4731 li
39.479 70.4673 39.5483 70.4419 39.5737 70.3823 cv
39.6011 70.3091 39.6089 70.1802 39.6089 70.0044 cv
39.6089 68.5366 li
cp
f
42.1772 68.9087 mo
42.7104 68.9692 43.2573 68.9556 43.728 68.9292 cv
43.728 68.3257 43.5063 67.8267 43.0347 67.8267 cv
42.5366 67.8267 42.144 68.1958 42.1772 68.9087 cv
cp
44.3062 68.8032 mo
44.3062 68.897 44.3062 68.9888 44.2944 69.0786 cv
43.9038 69.145 43.5063 69.1704 43.1128 69.1704 cv
42.1636 69.1704 li
42.1636 69.9331 42.5425 70.4536 43.3413 70.4536 cv
43.6558 70.4536 43.9038 70.2993 44.1519 70.147 cv
44.2339 70.2114 li
44.104 70.4341 li
44.0591 70.5122 43.5063 70.7993 43.064 70.7993 cv
42.0796 70.7993 41.5581 70.1743 41.5581 69.2935 cv
41.5581 68.6606 41.7261 68.2837 42.0269 68.0493 cv
42.1499 67.9517 42.2886 67.854 42.4312 67.7896 cv
42.6597 67.6841 42.8462 67.6118 43.0698 67.6118 cv
43.7788 67.6118 44.3062 68.0708 44.3062 68.8032 cv
cp
f
47.2007 67.6118 mo
47.3491 67.6118 li
47.4106 67.8013 47.4722 67.9712 47.5405 68.1411 cv
48.2866 70.0308 li
48.3911 69.7642 48.5015 69.4946 48.6021 69.2202 cv
48.9253 68.3091 li
49.0308 68.022 48.9585 67.8862 48.7173 67.8716 cv
48.4956 67.8579 li
48.4956 67.6763 li
48.7114 67.6841 48.9194 67.6978 49.1343 67.6978 cv
49.3491 67.6978 49.5581 67.6841 49.7739 67.6763 cv
49.7739 67.8579 li
49.603 67.8716 li
49.4546 67.8862 49.3491 68.061 49.187 68.4419 cv
48.7446 69.4556 li
48.5688 69.8618 48.4438 70.2993 48.2944 70.7134 cv
47.9956 70.7134 li
47.1079 68.4849 li
46.9976 68.7271 46.8726 68.9741 46.771 69.2153 cv
46.1323 70.7134 li
45.8267 70.7134 li
45.1567 68.5239 li
44.9897 67.979 44.8921 67.8862 44.728 67.8716 cv
44.5454 67.8579 li
44.5454 67.6763 li
44.8071 67.6841 45.061 67.6978 45.3218 67.6978 cv
45.5854 67.6978 45.8394 67.6841 46.0981 67.6763 cv
46.0981 67.8579 li
45.8394 67.8716 li
45.6128 67.8862 45.5435 67.9575 45.6128 68.1938 cv
46.1655 69.9907 li
46.2495 69.8169 46.3198 69.6392 46.3979 69.4634 cv
47.2007 67.6118 li
cp
f
50.4048 69.7378 mo
50.4048 70.0044 li
50.4048 70.4058 50.8687 70.5562 51.2456 70.5562 cv
51.6558 70.5562 52.0073 70.3188 52.0073 69.9653 cv
52.0073 69.7583 51.896 69.5884 51.6948 69.5356 cv
51.4097 69.4634 51.0493 69.3931 50.7378 69.2749 cv
50.4253 69.1567 50.1841 68.9595 50.1841 68.5649 cv
50.1841 67.8579 50.7944 67.6118 51.4097 67.6118 cv
51.7144 67.6118 51.9946 67.6841 52.2495 67.7759 cv
52.23 68.0103 52.2222 68.2505 52.2163 68.5122 cv
52.0337 68.5122 li
52.0337 68.3618 li
52.0337 68.022 51.6499 67.8267 51.2759 67.8267 cv
50.7261 67.8267 50.6382 68.1333 50.6382 68.354 cv
50.6382 68.6372 50.8521 68.7856 51.3491 68.8706 cv
52.1265 69.0005 52.4888 69.1958 52.4888 69.7026 cv
52.4888 70.4224 51.7729 70.7993 51.0493 70.7993 cv
50.7378 70.7993 50.4604 70.7524 50.1382 70.6431 cv
50.2036 70.355 50.2104 70.0435 50.2104 69.7378 cv
50.4048 69.7378 li
cp
f
27.1523 22.7368 mo
27.1523 22.8335 27.0742 22.9126 26.9771 22.9126 cv
26.8799 22.9126 26.8013 22.8335 26.8013 22.7368 cv
26.8013 22.6401 26.8799 22.561 26.9771 22.561 cv
27.0742 22.561 27.1523 22.6401 27.1523 22.7368 cv
cp
false sop
0 0 0 1 cmyk
f
27.1523 22.7368 mo
27.1523 22.8335 27.0742 22.9126 26.9771 22.9126 cv
26.8799 22.9126 26.8013 22.8335 26.8013 22.7368 cv
26.8013 22.6401 26.8799 22.561 26.9771 22.561 cv
27.0742 22.561 27.1523 22.6401 27.1523 22.7368 cv
cp
f
27.1523 27.7744 mo
27.1523 27.8711 27.0742 27.9487 26.9771 27.9487 cv
26.8799 27.9487 26.8013 27.8711 26.8013 27.7744 cv
26.8013 27.6763 26.8799 27.5986 26.9771 27.5986 cv
27.0742 27.5986 27.1523 27.6763 27.1523 27.7744 cv
cp
f
27.1523 27.7744 mo
27.1523 27.8711 27.0742 27.9487 26.9771 27.9487 cv
26.8799 27.9487 26.8013 27.8711 26.8013 27.7744 cv
26.8013 27.6763 26.8799 27.5986 26.9771 27.5986 cv
27.0742 27.5986 27.1523 27.6763 27.1523 27.7744 cv
cp
f
24.9443 25.2485 mo
24.9443 25.3452 24.8662 25.4243 24.7686 25.4243 cv
24.6719 25.4243 24.5933 25.3452 24.5933 25.2485 cv
24.5933 25.1519 24.6719 25.0728 24.7686 25.0728 cv
24.8662 25.0728 24.9443 25.1519 24.9443 25.2485 cv
cp
f
24.9443 25.2485 mo
24.9443 25.3452 24.8662 25.4243 24.7686 25.4243 cv
24.6719 25.4243 24.5933 25.3452 24.5933 25.2485 cv
24.5933 25.1519 24.6719 25.0728 24.7686 25.0728 cv
24.8662 25.0728 24.9443 25.1519 24.9443 25.2485 cv
cp
f
25.9438 24.0059 mo
25.9438 24.1025 25.8647 24.1797 25.7681 24.1797 cv
25.6714 24.1797 25.5923 24.1025 25.5923 24.0059 cv
25.5923 23.9072 25.6714 23.8301 25.7681 23.8301 cv
25.8647 23.8301 25.9438 23.9072 25.9438 24.0059 cv
cp
f
25.9438 24.0059 mo
25.9438 24.1025 25.8647 24.1797 25.7681 24.1797 cv
25.6714 24.1797 25.5923 24.1025 25.5923 24.0059 cv
25.5923 23.9072 25.6714 23.8301 25.7681 23.8301 cv
25.8647 23.8301 25.9438 23.9072 25.9438 24.0059 cv
cp
f
25.9438 26.4688 mo
25.9438 26.5654 25.8647 26.6445 25.7681 26.6445 cv
25.6714 26.6445 25.5923 26.5654 25.5923 26.4688 cv
25.5923 26.3721 25.6714 26.293 25.7681 26.293 cv
25.8647 26.293 25.9438 26.3721 25.9438 26.4688 cv
cp
f
25.9438 26.4688 mo
25.9438 26.5654 25.8647 26.6445 25.7681 26.6445 cv
25.6714 26.6445 25.5923 26.5654 25.5923 26.4688 cv
25.5923 26.3721 25.6714 26.293 25.7681 26.293 cv
25.8647 26.293 25.9438 26.3721 25.9438 26.4688 cv
cp
f
28.3364 24.0059 mo
28.3364 24.1025 28.2583 24.1797 28.1611 24.1797 cv
28.064 24.1797 27.9854 24.1025 27.9854 24.0059 cv
27.9854 23.9072 28.064 23.8301 28.1611 23.8301 cv
28.2583 23.8301 28.3364 23.9072 28.3364 24.0059 cv
cp
f
28.3364 24.0059 mo
28.3364 24.1025 28.2583 24.1797 28.1611 24.1797 cv
28.064 24.1797 27.9854 24.1025 27.9854 24.0059 cv
27.9854 23.9072 28.064 23.8301 28.1611 23.8301 cv
28.2583 23.8301 28.3364 23.9072 28.3364 24.0059 cv
cp
f
28.3369 26.4688 mo
28.3369 26.5654 28.2583 26.6445 28.1611 26.6445 cv
28.064 26.6445 27.9854 26.5654 27.9854 26.4688 cv
27.9854 26.3721 28.064 26.293 28.1611 26.293 cv
28.2583 26.293 28.3369 26.3721 28.3369 26.4688 cv
cp
f
28.3369 26.4688 mo
28.3369 26.5654 28.2583 26.6445 28.1611 26.6445 cv
28.064 26.6445 27.9854 26.5654 27.9854 26.4688 cv
27.9854 26.3721 28.064 26.293 28.1611 26.293 cv
28.2583 26.293 28.3369 26.3721 28.3369 26.4688 cv
cp
f
29.3364 25.2485 mo
29.3364 25.3452 29.2578 25.4243 29.1611 25.4243 cv
29.064 25.4243 28.9854 25.3452 28.9854 25.2485 cv
28.9854 25.1519 29.064 25.0728 29.1611 25.0728 cv
29.2578 25.0728 29.3364 25.1519 29.3364 25.2485 cv
cp
f
29.3364 25.2485 mo
29.3364 25.3452 29.2578 25.4243 29.1611 25.4243 cv
29.064 25.4243 28.9854 25.3452 28.9854 25.2485 cv
28.9854 25.1519 29.064 25.0728 29.1611 25.0728 cv
29.2578 25.0728 29.3364 25.1519 29.3364 25.2485 cv
cp
f
21.834 20.5908 mo
21.8013 21.4619 21.6372 26.0557 21.6372 26.0557 cv
21.5127 29.2598 21.4028 32.0723 21.4028 34.5771 cv
21.4028 45.5942 23.5313 50.6099 35.7915 56.5562 cv
48.0483 50.6118 50.1782 45.5962 50.1782 34.5825 cv
50.1782 32.0762 50.0679 29.2598 49.9429 26.0518 cv
49.9429 26.0518 49.7808 21.4619 49.7495 20.5908 cv
21.834 20.5908 li
cp
50.6851 19.6445 mo
50.9136 26.0889 li
51.5874 43.4146 51.8413 49.896 36.0249 57.5024 cv
35.7915 57.6128 li
35.561 57.5024 li
19.7427 49.896 19.9961 43.4146 20.6685 26.0923 cv
20.8979 19.6426 li
50.6851 19.6445 li
cp
ef
37.5171 32.7705 mo
37.98 32.8862 38.4175 32.9917 38.8159 32.8213 cv
38.8159 32.939 li
38.3931 33.1006 37.939 32.9863 37.4878 32.8794 cv
36.9644 32.7476 36.4556 32.6226 36.0229 32.918 cv
36.0229 32.7861 li
36.4819 32.5171 37.0112 32.6401 37.5171 32.7705 cv
cp
37.5171 30.7241 mo
37.9819 30.8418 38.4175 30.9492 38.8159 30.7788 cv
38.8159 30.8999 li
38.3931 31.0581 37.939 30.9424 37.4878 30.8369 cv
36.9644 30.7012 36.4575 30.5801 36.0229 30.8735 cv
36.0229 30.7402 li
36.4819 30.4712 37.0112 30.5996 37.5171 30.7241 cv
cp
37.5171 31.7437 mo
37.9819 31.8599 38.4175 31.9653 38.8159 31.7964 cv
38.8159 31.916 li
38.394 32.0762 37.939 31.9619 37.4878 31.8525 cv
36.9644 31.7207 36.4556 31.5977 36.0229 31.8916 cv
36.0229 31.7598 li
36.4819 31.4907 37.0112 31.6172 37.5171 31.7437 cv
cp
35.4829 32.7861 mo
35.4829 32.918 li
35.0405 32.6226 34.541 32.7476 34.0176 32.8794 cv
33.5664 32.9863 33.1025 33.1006 32.687 32.939 cv
32.687 32.8213 li
33.0796 32.9917 33.5234 32.8862 33.9897 32.7705 cv
34.4956 32.6401 35.0229 32.5171 35.4829 32.7861 cv
cp
35.4829 30.7402 mo
35.4829 30.8735 li
35.0405 30.5801 34.541 30.7012 34.0176 30.8369 cv
33.5664 30.9424 33.1025 31.0581 32.687 30.8999 cv
32.687 30.7788 li
33.0776 30.9492 33.5234 30.8418 33.9897 30.7241 cv
34.4951 30.5996 35.0229 30.4712 35.4829 30.7402 cv
cp
35.4829 31.7598 mo
35.4829 31.8916 li
35.0405 31.5977 34.541 31.7207 34.0176 31.8525 cv
33.5664 31.9619 33.1025 32.0762 32.687 31.916 cv
32.687 31.7964 li
33.0776 31.9653 33.5234 31.8599 33.9897 31.7437 cv
34.4951 31.6172 35.0229 31.4907 35.4829 31.7598 cv
cp
39.0415 33.6563 mo
38.6147 33.9673 38.0728 33.8936 37.52 33.7671 cv
36.9321 33.6318 36.3276 33.5225 35.8101 33.9902 cv
35.8101 30.1001 li
36.2866 29.6045 36.8706 29.7222 37.4917 29.877 cv
38.019 30.0054 38.5688 30.1284 39.0415 29.8174 cv
39.0415 33.6563 li
cp
32.4575 29.8174 mo
32.9341 30.1284 33.4917 30.0054 34.021 29.877 cv
34.6416 29.7222 35.2202 29.5781 35.7036 30.1108 cv
35.7036 33.9902 li
35.1938 33.5225 34.5811 33.6318 33.9932 33.7671 cv
33.4321 33.8936 32.9116 34.0059 32.4575 33.6509 cv
32.4575 29.8174 li
cp
39.6587 30.042 mo
39.6587 30.167 li
39.4702 30.1826 39.2202 30.0142 39.145 29.7979 cv
39.145 33.7056 li
39.104 33.7354 38.7983 33.9746 38.3188 33.9795 cv
37.8081 33.9868 37.2026 33.7476 36.6489 33.7476 cv
36.3022 33.7476 36.0386 33.8901 35.8198 34.1255 cv
35.6968 34.1255 li
35.6968 34.1255 35.3706 33.7476 34.8599 33.7476 cv
34.3262 33.7476 33.6968 33.9922 33.1885 33.9922 cv
32.6821 33.9922 32.4106 33.7266 32.3672 33.6948 cv
32.3672 29.7734 li
32.2632 29.9824 32.0337 30.1602 31.8506 30.167 cv
31.8506 30.042 li
32.0337 30.0332 32.2632 29.8208 32.3672 29.6113 cv
32.4565 29.6802 li
32.9111 30.0352 33.4331 29.9067 33.9946 29.7681 cv
34.5938 29.6187 35.2271 29.4849 35.7573 30.0176 cv
36.2905 29.478 36.9058 29.6167 37.519 29.7681 cv
38.0718 29.9067 38.603 30.0352 39.0522 29.6802 cv
39.145 29.6113 li
39.2202 29.8276 39.4702 30.0562 39.6587 30.042 cv
cp
39.6372 34.064 mo
39.6372 34.064 39.395 34.291 38.8413 34.291 cv
38.1792 34.291 37.4263 34.0059 36.7573 34.0059 cv
36.0903 34.0059 35.8296 34.335 35.7573 34.3911 cv
35.7573 34.3911 35.4204 34.0059 34.7813 34.0059 cv
34.1196 34.0059 33.332 34.2783 32.5557 34.2783 cv
32.1504 34.2783 31.9233 34.0835 31.8652 34.064 cv
31.8711 30.165 li
31.4282 30.165 li
31.4282 34.5 li
35.0684 34.5 li
35.0684 34.5 35.2554 34.9063 35.7573 34.9063 cv
36.2358 34.9063 36.4399 34.5 36.4399 34.5 cv
37.1099 34.5107 40.1069 34.5 40.1069 34.5 cv
40.0972 30.165 li
39.6362 30.165 li
39.6372 34.064 li
cp
ef
35.1196 40.4072 mo
35.0483 40.3071 35.0317 40.1416 35.1011 40.0361 cv
35.2671 40.1436 35.4214 40.1611 35.6118 40.1963 cv
35.4468 40.2437 35.2554 40.3052 35.1196 40.4072 cv
cp
f
.233873 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
27.7939 43.4482 mo
27.4927 43.5166 27.2446 43.7505 27.1963 44.0879 cv
27.1963 44.0879 27.3003 44.0176 27.4043 43.9844 cv
27.5601 43.9331 27.6963 43.9458 27.7827 43.9546 cv
27.8687 43.8086 27.8838 43.5659 27.7939 43.4482 cv
cp
@
34.9893 40.9521 mo
34.9966 40.9697 35.0869 41.1841 35.1235 41.2739 cv
35.1636 41.1772 35.2603 41.0503 35.3101 40.9556 cv
35.2515 40.9487 35.1929 40.9468 35.1362 40.9448 cv
35.0879 40.9448 35.0391 40.9468 34.9893 40.9521 cv
cp
f
34.665 41.3159 mo
34.7109 41.2173 34.7827 41.0767 34.8276 40.9697 cv
34.7378 40.9839 34.6484 41.0015 34.5615 41.0225 cv
34.5981 41.103 34.6621 41.3159 34.665 41.3159 cv
cp
f
34.1274 41.1489 mo
34.147 41.1807 34.2334 41.3179 34.2622 41.3809 cv
34.3604 41.0752 li
34.2979 41.0942 34.2383 41.1118 34.1836 41.1313 cv
34.1646 41.1367 34.146 41.1436 34.1274 41.1489 cv
cp
f
30.7349 42.3389 mo
30.7222 42.2192 30.5605 42.1001 30.4824 42.063 cv
30.2974 41.9751 30.1846 41.9365 29.9634 41.9419 cv
29.8066 41.9468 29.7183 41.998 29.7183 41.998 cv
29.874 42.0947 30.082 42.1929 30.1484 42.4023 cv
30.3145 42.3037 30.5244 42.2759 30.7349 42.3389 cv
cp
@
35.3882 41.7432 mo
35.3413 41.8379 35.3169 42.0313 35.2729 42.1367 cv
35.3833 42.1177 35.478 42.084 35.5532 42.0488 cv
35.5005 41.9595 35.4409 41.8311 35.3882 41.7432 cv
cp
f
34.5146 41.7993 mo
34.4805 41.854 34.4316 41.9717 34.3823 42.04 cv
34.4663 42.061 34.5518 42.0825 34.6377 42.1016 cv
34.5991 42.0278 34.5513 41.8677 34.5146 41.7993 cv
cp
f
35.0757 42.1563 mo
35.0303 42.0562 34.9653 41.8838 34.9434 41.8013 cv
34.9248 41.8892 34.8491 42.0522 34.8164 42.1353 cv
34.9004 42.1475 34.9849 42.1563 35.0698 42.1563 cv
35.0713 42.1563 35.0737 42.1563 35.0757 42.1563 cv
cp
f
28.3306 45.9653 mo
28.2993 45.9478 28.1567 45.9419 28.1147 45.9419 cv
27.7075 45.937 27.4736 46.1128 27.3501 46.3521 cv
27.5469 46.3208 27.8472 46.2993 27.9995 46.4341 cv
28.1016 46.3657 28.3062 46.2075 28.3306 45.9653 cv
cp
@
27.5479 47.4312 mo
27.5293 47.3599 27.4937 47.3071 27.4512 47.2603 cv
27.4512 47.2603 27.25 47.3071 27.0342 47.5542 cv
26.9448 47.6587 26.8369 47.8579 26.8765 48.0288 cv
26.8765 48.0288 26.9941 47.8989 27.2007 47.8354 cv
27.3193 47.8022 27.4136 47.8052 27.4775 47.8228 cv
27.5391 47.7271 27.583 47.5688 27.5479 47.4312 cv
cp
@
27.5737 48.4614 mo
27.4307 48.6089 27.2993 48.8892 27.3589 49.188 cv
27.3872 49.3315 27.4937 49.397 27.4937 49.397 cv
27.5308 49.2173 27.6777 49.0103 27.9224 48.9829 cv
27.9365 48.688 27.7886 48.5337 27.5737 48.4614 cv
cp
@
31.4722 48.9224 mo
31.2305 48.8442 30.9214 48.895 30.7314 48.9868 cv
30.562 49.0728 30.4507 49.2056 30.4507 49.2056 cv
30.8979 49.1606 31.1147 49.354 31.1147 49.354 cv
31.2739 49.2466 31.4106 49.1255 31.4722 48.9224 cv
cp
@
28.6816 49.4321 mo
28.6816 49.4321 28.7036 49.7729 28.9409 49.9819 cv
29.0107 50.0454 29.1069 50.1138 29.2227 50.1079 cv
29.085 49.9419 29.124 49.6499 29.2261 49.4595 cv
29.1553 49.4146 29.0864 49.3755 28.9585 49.3735 cv
28.8164 49.3687 28.6816 49.4321 28.6816 49.4321 cv
cp
@
30.4492 49.8237 mo
30.0771 49.8394 29.7529 50.0259 29.6616 50.2876 cv
29.6616 50.2876 29.7983 50.231 29.999 50.2388 cv
30.1558 50.2427 30.2856 50.2827 30.2856 50.2827 cv
30.4141 50.1841 30.4985 49.9614 30.4492 49.8237 cv
cp
@
36.1304 51.1948 mo
36.1987 51.1089 36.2241 51.063 36.2358 50.9644 cv
35.937 50.8784 35.5806 51.0044 35.5288 51.2974 cv
35.6616 51.2505 35.8628 51.2349 35.98 51.3354 cv
35.98 51.3247 36.0874 51.2505 36.1304 51.1948 cv
cp
@
30.2407 51.1548 mo
30.2329 51.063 30.1875 50.9692 30.1699 50.9468 cv
29.8853 51.022 29.6431 51.2349 29.6523 51.6021 cv
29.9346 51.3247 30.1616 51.4673 30.1616 51.4673 cv
30.1616 51.4673 30.2529 51.2856 30.2407 51.1548 cv
cp
@
35.4233 51.7817 mo
35.0933 51.6841 34.7573 51.9048 34.6875 52.1792 cv
34.8032 52.0942 35.1016 52.0259 35.313 52.1587 cv
35.3569 52.0942 35.3823 52.063 35.4097 51.9712 cv
35.4312 51.9009 35.438 51.8696 35.4233 51.7817 cv
cp
@
31.2163 52.0962 mo
31.2163 52.0962 31.083 52.5991 31.4399 52.7563 cv
31.4399 52.7563 31.3765 52.4868 31.6504 52.2817 cv
31.5337 52.1353 31.4546 52.0386 31.2163 52.0962 cv
cp
@
35.4741 53.6489 mo
35.3433 53.7485 35.1362 54.0728 35.1753 54.3218 cv
35.1948 54.4487 35.2974 54.5103 35.2974 54.5103 cv
35.3501 54.2856 35.5483 54.0747 35.7212 54.0054 cv
35.7104 53.9087 35.6792 53.8521 35.644 53.7896 cv
35.6011 53.729 35.5435 53.6841 35.4741 53.6489 cv
cp
@
2 lc
2 lj
33.6187 41.7183 mo
34.127 41.7324 34.8076 41.6094 35.2397 41.5269 cv
35.5464 41.4688 35.689 41.395 35.689 41.395 cv
35.5708 41.3843 35.3999 41.3882 35.2515 41.4092 cv
34.749 41.4761 34.1226 41.5464 33.7251 41.5234 cv
33.4072 41.5059 32.9531 41.4233 32.9453 41.0698 cv
32.9429 40.9399 33.0293 40.8169 33.0293 40.8169 cv
32.8472 40.8467 32.623 41.0293 32.6499 41.2632 cv
32.6841 41.5425 32.9966 41.7007 33.6187 41.7183 cv
cp
@
0 lc
0 lj
28.6792 42.9663 mo
28.6792 42.9663 28.9561 42.7959 29.0024 42.5498 cv
28.6055 42.4409 28.1973 42.6587 28.0908 42.9561 cv
28.0908 42.9561 28.3999 42.8311 28.6792 42.9663 cv
cp
@
27.708 44.8599 mo
27.708 44.8599 27.9102 44.5923 27.7852 44.4028 cv
27.3896 44.4429 27.1426 44.6577 27.0186 44.9229 cv
27.0186 44.9229 27.3867 44.7842 27.708 44.8599 cv
cp
@
35.0415 53.106 mo
35.1343 53.0581 35.1714 52.7153 35.0933 52.6509 cv
34.7969 52.6821 34.4517 52.9224 34.4165 53.2515 cv
34.4165 53.2515 34.5029 53.1763 34.6421 53.1177 cv
34.7441 53.0708 34.936 53.0425 35.0415 53.106 cv
cp
@
35.5532 42.0488 mo
35.6294 42.0122 35.6841 41.9751 35.7085 41.9521 cv
35.8296 41.8501 35.897 41.6958 35.9019 41.5391 cv
35.9097 41.3687 35.8335 41.1646 35.6909 41.0752 cv
35.5796 41.0029 35.4448 40.9697 35.3101 40.9556 cv
35.2515 40.9487 35.1929 40.9468 35.1362 40.9448 cv
35.0879 40.9448 35.0391 40.9468 34.9893 40.9521 cv
34.9355 40.9556 34.8818 40.9624 34.8276 40.9697 cv
34.7378 40.9839 34.6484 41.0015 34.5615 41.0225 cv
34.4922 41.0381 34.4253 41.0557 34.3604 41.0752 cv
34.2983 41.0942 34.2383 41.1118 34.1836 41.1313 cv
34.1646 41.1367 34.146 41.1436 34.1274 41.1489 cv
33.9058 41.228 33.7041 41.3369 33.5015 41.0137 cv
33.4668 40.959 33.4395 40.8569 33.417 40.7954 cv
33.3921 40.7251 33.353 40.6499 33.3203 40.5952 cv
33.2656 40.5283 33.1509 40.4512 33.208 40.3071 cv
33.2632 40.1753 33.4868 40.1978 33.6587 40.1841 cv
33.8804 40.1646 34.1558 40.1274 34.3242 40.0273 cv
34.3931 39.9834 34.4155 39.8853 34.4824 39.8076 cv
34.5396 39.7373 34.6445 39.6602 34.7031 39.6284 cv
34.8306 39.5635 35.1016 39.5161 35.3394 39.5142 cv
35.5815 39.5122 35.7886 39.5352 35.9624 39.5635 cv
36.1235 39.2837 36.3979 39.0703 36.688 38.9351 cv
36.7651 39.0195 36.6704 39.6758 36.6636 39.7217 cv
36.8354 39.8462 37.1538 39.8765 37.4116 39.8516 cv
37.5103 39.8428 37.6528 39.79 37.6528 39.79 cv
37.6831 40.0767 37.2417 40.3105 37.0093 40.3247 cv
37.0093 40.3247 37.1987 40.4688 37.5464 40.4546 cv
37.8667 40.4424 38.1108 40.2808 38.1108 40.2808 cv
38.1382 40.3599 38.1069 40.5215 38.0728 40.5742 cv
37.9604 40.7866 37.6479 40.938 37.314 40.9097 cv
37.6167 41.3213 38.5093 41.105 38.6655 40.6987 cv
38.7886 40.7866 38.8325 40.959 38.8198 41.1455 cv
38.8032 41.3403 38.6421 41.5601 38.5073 41.6621 cv
38.2983 41.8257 37.853 41.9399 37.6304 41.8521 cv
37.6304 41.8521 37.7378 42.1577 38.1206 42.1577 cv
38.4351 42.1577 38.6069 42.0542 38.7319 41.9927 cv
38.7319 41.9927 38.6851 42.6938 37.7456 42.6675 cv
37.3979 42.6553 37.0132 42.5059 36.9224 42.2056 cv
36.8413 42.251 36.4575 42.6113 36.4995 43.2705 cv
36.1792 43.1846 36.0679 42.8311 36.0659 42.4551 cv
35.7847 42.6187 35.4604 43.0737 35.5337 43.543 cv
35.2993 43.4287 35.1821 43.1914 35.1304 42.7275 cv
34.8975 42.8945 34.6333 43.2021 34.6538 43.6294 cv
34.4814 43.5591 34.3823 43.4482 34.2622 43.2617 cv
34.1396 44.0107 35.0649 44.1216 35.0649 44.1216 cv
34.9321 43.9175 34.9307 43.4639 34.9961 43.3252 cv
35.1089 43.7134 35.394 43.9702 35.8687 43.9985 cv
35.7749 43.731 35.7368 43.2969 35.9097 43.1001 cv
35.9683 43.4727 36.3696 43.7031 36.7661 43.7173 cv
36.7417 43.397 36.7866 42.9312 36.9292 42.729 cv
37.0483 42.8735 37.2417 42.9824 37.4858 43.0015 cv
37.4946 43.1758 37.5981 43.2373 37.7417 43.3306 cv
37.8921 43.4219 38.0796 43.4639 38.271 43.4307 cv
38.1831 43.6343 37.9497 43.7363 37.6948 43.7471 cv
37.4468 43.7559 37.1831 43.6768 37.0396 43.5308 cv
37.0396 43.7661 37.1206 43.9331 37.2612 44.0425 cv
37.394 44.1514 37.5933 44.1934 37.8179 44.1704 cv
37.8091 44.2339 37.6187 44.3799 37.562 44.4097 cv
37.1421 44.6118 36.5737 44.4131 36.3247 44.1514 cv
36.2964 44.3711 36.437 44.5698 36.5786 44.6611 cv
36.73 44.749 37.0396 44.8701 37.3013 44.835 cv
37.1694 45.0479 36.8354 45.1724 36.5854 45.1602 cv
36.1675 45.1411 35.9194 44.9351 35.7573 44.77 cv
35.8091 44.937 36.0083 45.2271 36.2817 45.3325 cv
36.4028 45.3799 36.5601 45.4097 36.6187 45.396 cv
36.769 45.8335 37.0708 46.022 37.4067 46.2046 cv
37.7827 46.4116 38.2534 46.522 38.7007 46.6294 cv
39.6343 46.855 40.355 47.313 40.4917 48.3599 cv
40.7065 48.5405 41.2886 48.5552 41.5005 48.3755 cv
41.6226 48.272 41.7593 48.061 41.687 47.7563 cv
41.6147 47.4282 41.3989 47.1978 41.144 46.9937 cv
40.8218 46.7407 40.48 46.5015 40.1333 46.2798 cv
39.6548 45.9761 39.1655 45.645 38.812 45.1973 cv
38.5493 44.8599 38.3979 44.4272 38.4507 43.9966 cv
38.4937 43.6274 38.7075 43.2388 39.0581 43.0142 cv
39.3228 42.8472 39.6265 42.7837 39.9351 42.7925 cv
40.4399 42.8066 40.9663 43.019 41.3647 43.2813 cv
42.0112 43.7046 42.6382 44.4204 43.1567 45.125 cv
43.3062 45.3257 43.5015 45.5298 43.7007 45.6245 cv
43.896 45.7173 44.1636 45.6997 44.3003 45.5728 cv
44.3569 45.52 44.4136 45.4434 44.4526 45.3784 cv
44.5083 45.5259 44.4683 45.728 44.3765 45.8442 cv
44.2974 45.9497 44.1118 46.0815 43.8755 46.0825 cv
43.7026 46.0845 43.5815 46.0337 43.4556 46.0005 cv
43.4556 46.0005 43.436 46.0269 43.4585 46.0376 cv
43.6362 46.1216 43.9487 46.3032 43.9604 46.6821 cv
43.9712 46.9517 43.7925 47.3716 44.1128 47.4312 cv
44.3501 47.4751 44.521 47.2778 44.5806 47.0669 cv
44.6421 46.8423 44.5591 46.6069 44.4155 46.5278 cv
44.7896 46.4243 45.0786 46.7192 44.9702 47.0923 cv
45.2222 46.9409 45.3618 46.3208 45.1235 46.0444 cv
45.0835 45.9966 45.0444 45.9595 44.9976 45.9146 cv
45.2271 45.9341 45.4624 46.1499 45.5435 46.4116 cv
45.6538 46.7798 45.5425 47.1997 45.3169 47.4878 cv
44.9878 47.9077 44.478 48.0327 43.9663 48.0024 cv
43.77 47.9907 43.1655 47.9048 42.8384 47.5415 cv
42.562 47.2378 42.3491 46.6577 42.5366 46.1021 cv
42.4722 46.2026 42.4937 46.2817 42.3638 46.3052 cv
42.2163 46.3325 42.0151 46.3101 41.9019 46.1392 cv
41.7417 45.9126 41.856 45.5103 42.1284 45.4487 cv
42.0229 45.6704 42.1421 45.811 42.2886 45.8247 cv
42.3726 45.8315 42.4966 45.7808 42.5425 45.6978 cv
42.7046 45.3853 42.2935 44.9053 42.1812 44.7769 cv
41.6831 44.1899 40.6284 43.0771 39.5972 43.3882 cv
39.2827 43.4868 38.9976 43.8403 39.0737 44.3042 cv
39.1265 44.6099 39.3452 44.8687 39.5464 45.0493 cv
39.8296 45.3081 40.1733 45.5493 40.5093 45.7808 cv
40.9976 46.1167 41.5093 46.4331 41.9155 46.8677 cv
42.1304 47.104 42.3618 47.4204 42.3618 47.8481 cv
42.3618 48.061 42.3159 48.3667 42.1304 48.6157 cv
41.8257 49.0308 41.2231 49.2388 40.5366 48.9712 cv
40.5288 49.3813 40.4722 49.854 40.3452 50.2085 cv
40.6812 50.1382 40.8394 49.8042 41.2007 49.7407 cv
41.2729 49.7271 41.3784 49.7329 41.4194 49.7817 cv
41.3716 49.7993 41.3091 49.8345 41.2593 49.8911 cv
41.1304 50.0415 41.0405 50.2251 40.9429 50.4038 cv
40.8647 50.5464 40.7358 50.7524 40.4917 50.8892 cv
40.314 50.9868 40.0815 51.0317 39.8296 51.0171 cv
39.9448 51.2427 40.439 51.2632 40.7202 51.144 cv
40.7788 51.1196 40.8472 51.0864 40.8765 51.0767 cv
40.8169 51.3286 40.5757 51.5308 40.353 51.6626 cv
40.019 51.8677 39.5405 51.9331 39.103 51.8169 cv
39.2573 52.0649 39.6636 52.1567 40.0562 52.0806 cv
39.7671 52.4448 39.062 52.603 38.4897 52.4399 cv
38.6069 52.6646 38.9917 52.729 39.3179 52.7437 cv
39.0513 53.2485 38.3003 52.9683 37.7124 53.0083 cv
37.1753 53.0474 36.7788 53.2485 36.4976 53.5532 cv
36.3062 53.7642 36.1206 54.0298 35.7212 54.0054 cv
35.7104 53.9087 35.6792 53.8521 35.644 53.7896 cv
35.6011 53.729 35.5435 53.6841 35.4741 53.6489 cv
35.521 53.5571 35.605 53.4712 35.6812 53.4204 cv
35.8745 53.3022 36.106 53.2896 36.2358 53.0864 cv
35.9028 52.9634 35.6362 53.2231 35.3169 53.2144 cv
35.1929 53.2095 35.0801 53.146 35.0415 53.106 cv
35.1343 53.0581 35.1714 52.7153 35.0933 52.6509 cv
35.1743 52.6011 35.2729 52.5747 35.3521 52.5786 cv
35.5767 52.5942 35.7905 52.7271 36.0259 52.687 cv
36.1401 52.6646 36.2397 52.6011 36.3218 52.5327 cv
36.2769 52.4634 36.1714 52.4458 36.0786 52.4399 cv
35.7593 52.4106 35.3657 52.3901 35.313 52.1587 cv
35.3569 52.0942 35.3823 52.063 35.4097 51.9712 cv
35.4312 51.9009 35.438 51.8696 35.4233 51.7817 cv
35.4907 51.729 35.6187 51.7241 35.687 51.729 cv
35.98 51.7524 36.1235 52.0317 36.437 52.021 cv
36.4956 52.019 36.562 52.0083 36.5933 51.9634 cv
36.5308 51.7905 36.2417 51.7114 36.104 51.5864 cv
36.0659 51.5513 35.9937 51.4478 35.98 51.3354 cv
35.98 51.3247 36.0874 51.2505 36.1304 51.1948 cv
36.1987 51.1089 36.2241 51.063 36.2358 50.9644 cv
36.3726 50.9312 36.4976 50.9517 36.5933 51.0171 cv
36.8491 51.1919 36.9546 51.729 37.2407 51.8257 cv
37.3999 51.8784 37.5669 51.8013 37.6558 51.7573 cv
37.9868 51.6011 38.2876 51.3638 38.4858 51.0864 cv
38.6226 50.9009 38.7349 50.6567 38.6226 50.3735 cv
38.4683 50.0083 38.019 49.9272 37.7319 49.7056 cv
37.5854 49.5864 37.5171 49.3755 37.5347 49.2056 cv
37.5669 48.8774 37.7886 48.6743 37.8179 48.3853 cv
37.8257 48.3267 37.8179 48.272 37.8032 48.2212 cv
37.728 48.4702 37.4878 48.6284 37.3667 48.9067 cv
37.3013 49.0679 37.188 49.4214 37.2905 49.6216 cv
37.2886 49.6284 37.0483 49.5405 37.0552 49.5405 cv
36.9146 49.4829 36.6685 49.4419 36.5122 49.4526 cv
36.1597 49.4741 35.98 49.6177 35.98 49.9165 cv
35.98 50.0649 36.0581 50.2739 36.3062 50.2935 cv
36.4683 50.311 36.5962 50.2485 36.6909 50.1821 cv
36.7065 50.3794 36.5435 50.5161 36.3589 50.5903 cv
36.106 50.6899 35.7964 50.6235 35.5112 50.6587 cv
35.2886 50.6851 34.9507 50.7524 34.915 50.9995 cv
34.9033 51.0913 34.9243 51.1978 34.9609 51.272 cv
34.9932 51.3442 35.0518 51.397 35.1001 51.4409 cv
35.0137 51.5044 34.8999 51.5005 34.8018 51.4917 cv
34.501 51.4653 34.2446 51.2739 34.1216 51.0688 cv
34.021 51.4038 34.2407 51.6763 34.5142 51.7485 cv
34.4956 51.7856 34.3882 51.8247 34.3403 51.8325 cv
33.9912 51.895 33.6924 51.7573 33.499 51.6313 cv
33.499 51.7856 33.4624 51.9595 33.6816 52.0913 cv
33.5991 52.1899 33.4883 52.2515 33.3623 52.2651 cv
32.9268 52.3169 32.769 52.0737 32.5713 51.8228 cv
32.5151 51.7524 32.4619 51.6587 32.4165 51.6489 cv
32.3374 51.6362 32.3027 51.6997 32.2676 51.7446 cv
32.1709 51.8599 32.0703 52.0942 31.9263 52.2036 cv
31.8496 52.2603 31.7578 52.2915 31.6504 52.2817 cv
31.5337 52.1353 31.4546 52.0386 31.2163 52.0962 cv
31.2319 51.9985 31.2725 51.9302 31.3213 51.8774 cv
31.459 51.729 31.688 51.7017 31.7793 51.4761 cv
31.7617 51.439 31.689 51.4204 31.6455 51.4165 cv
31.3589 51.3901 31.0547 51.5903 30.7734 51.6362 cv
30.6948 51.6519 30.5977 51.6567 30.5117 51.647 cv
30.394 51.6313 30.1719 51.5747 30.1616 51.4673 cv
30.1616 51.4673 30.2529 51.2856 30.2407 51.1548 cv
30.2329 51.063 30.1875 50.9692 30.1699 50.9468 cv
30.2642 50.8892 30.3594 50.8657 30.4634 50.8657 cv
30.8438 50.8657 31.2788 51.1567 31.5518 50.8608 cv
31.4448 50.729 31.105 50.7251 31.0127 50.7251 cv
30.6597 50.7056 30.3862 50.5552 30.2856 50.2827 cv
30.4141 50.1841 30.4985 49.9614 30.4492 49.8237 cv
30.5835 49.7886 30.6904 49.7886 30.7866 49.8062 cv
31.0615 49.8657 31.2378 50.103 31.4771 50.2173 cv
31.5693 50.2651 31.6694 50.2896 31.7866 50.2827 cv
31.7754 50.1841 31.7402 50.103 31.6948 50.0366 cv
31.5864 49.8745 31.4009 49.7886 31.2725 49.6479 cv
31.1987 49.5708 31.1367 49.481 31.1147 49.354 cv
31.2739 49.2466 31.4106 49.1255 31.4722 48.9224 cv
31.6445 48.9204 31.7661 48.9673 31.8608 49.0474 cv
32.1797 49.314 32.1504 49.9341 32.5039 50.1978 cv
32.9385 50.52 34.1123 50.6177 34.2876 49.9595 cv
34.3726 49.604 34.1841 49.3823 34.1465 49.0396 cv
34.1196 48.7837 34.1436 48.6001 34.2715 48.4478 cv
34.4438 48.5356 34.6406 48.5337 34.811 48.5386 cv
35.1016 48.5513 35.4331 48.438 35.8022 48.2661 cv
35.9604 48.1958 36.0776 48.0376 36.3413 47.9185 cv
35.7085 47.9888 35.6284 48.2036 34.9502 48.1665 cv
34.5439 48.147 34.1821 48.1079 33.9775 47.8345 cv
33.9907 47.8247 34.0908 47.7476 34.144 47.6987 cv
34.4482 47.4067 34.5605 46.9868 34.478 46.6245 cv
34.4556 46.5337 34.4023 46.4312 34.3594 46.3989 cv
34.3594 46.3989 34.2847 47.2095 33.3154 47.7798 cv
33.4424 47.5063 33.3853 47.0112 33.1772 46.8267 cv
33.2231 47.1997 33.0303 47.6177 32.812 47.8325 cv
32.6816 47.9556 32.5356 48.0835 32.3491 48.106 cv
32.3599 48.0835 32.4077 48.0151 32.4326 47.9517 cv
32.5537 47.6353 32.4824 47.354 32.3208 47.1841 cv
32.2939 47.3784 32.252 47.5894 32.1768 47.7446 cv
32.0249 48.0532 31.8213 48.2974 31.5415 48.4204 cv
31.4653 48.4507 31.3413 48.4751 31.2793 48.4614 cv
31.332 48.4028 31.4116 48.2788 31.4546 48.1558 cv
31.5146 47.9849 31.4595 47.729 31.376 47.6001 cv
31.2134 48.0044 30.9888 48.3296 30.6069 48.5806 cv
30.4224 48.6987 30.189 48.7661 29.96 48.7339 cv
30 48.6987 30.1025 48.6001 30.1489 48.5513 cv
30.2808 48.3979 30.4287 48.2612 30.4941 48.0278 cv
30.3452 48.189 29.8784 48.395 29.5059 48.3931 cv
29.4229 48.4087 29.4277 48.4546 29.4087 48.563 cv
29.3999 48.7544 29.4141 48.9888 29.3691 49.186 cv
29.3442 49.2915 29.3018 49.3892 29.2261 49.4595 cv
29.1553 49.4146 29.0864 49.3755 28.9585 49.3735 cv
28.8164 49.3687 28.6816 49.4321 28.6816 49.4321 cv
28.6602 49.3286 28.6582 49.2388 28.6729 49.1577 cv
28.7168 48.897 28.9019 48.7251 28.9111 48.4282 cv
28.6406 48.521 28.481 48.8149 28.2075 48.9321 cv
28.124 48.9673 28.0313 48.9907 27.9224 48.9829 cv
27.9365 48.688 27.7886 48.5337 27.5737 48.4614 cv
27.6362 48.3315 27.7593 48.27 27.9102 48.231 cv
28.2251 48.1509 28.5703 48.1743 28.6841 47.8901 cv
28.5854 47.8374 28.5254 47.8403 28.415 47.8481 cv
28.2344 47.8579 27.9946 47.9399 27.7905 47.9399 cv
27.6689 47.9399 27.5596 47.9106 27.4775 47.8228 cv
27.5391 47.7271 27.583 47.5688 27.5479 47.4312 cv
27.5293 47.3599 27.4937 47.3071 27.4512 47.2603 cv
27.5605 47.1899 27.6797 47.1646 27.8032 47.1675 cv
28.022 47.1714 28.1724 47.2622 28.4058 47.3296 cv
28.5151 47.3628 28.6245 47.3501 28.6714 47.3188 cv
28.6089 46.8706 28.043 46.8735 27.9995 46.4341 cv
28.1016 46.3657 28.3062 46.2075 28.3306 45.9653 cv
28.6465 45.9634 28.8574 46.1958 28.9189 46.479 cv
28.9458 46.5962 28.9404 46.7153 29.0034 46.8267 cv
29.1313 47.0513 29.4595 47.1147 29.7427 46.9712 cv
30.0039 46.8423 30.2432 46.644 30.519 46.4946 cv
30.7827 46.3501 31.063 46.2056 31.3604 46.0972 cv
31.6074 46.0005 31.7432 45.9106 31.9766 45.8159 cv
31.7666 45.8618 31.6631 45.8442 31.3203 45.9106 cv
31.105 45.9536 30.8511 46.0444 30.6323 46.062 cv
30.4438 46.0747 30.1665 46.0649 30.063 45.9585 cv
30.063 45.9585 30.2012 45.9409 30.3247 45.8657 cv
30.564 45.7134 30.6729 45.5024 30.6899 45.3623 cv
30.6899 45.3623 30.0137 45.8687 29.2612 45.7456 cv
29.1899 45.7349 29.104 45.7212 29.0713 45.6772 cv
29.4204 45.5718 29.6968 45.396 29.8477 45.0898 cv
29.5093 45.2832 29.1084 45.4502 28.6191 45.4292 cv
28.5063 45.4258 28.3711 45.3906 28.2886 45.3501 cv
28.2612 45.3345 28.1699 45.2866 28.167 45.2466 cv
28.167 45.2466 28.2339 45.2466 28.2817 45.2412 cv
28.6465 45.2095 28.9585 44.9653 29.1567 44.7065 cv
29.0493 44.7065 28.9404 44.7368 28.8237 44.7788 cv
28.5806 44.8687 28.3237 45.0161 28.0762 45.0142 cv
27.9531 45.0107 27.8276 44.9688 27.708 44.8599 cv
27.708 44.8599 27.9102 44.5923 27.7852 44.4028 cv
28.0137 44.2759 28.3379 44.4766 28.6069 44.4185 cv
28.7305 44.3901 28.8198 44.3306 28.9302 44.2534 cv
28.873 44.1899 28.7871 44.1616 28.6904 44.1514 cv
28.5039 44.1284 28.27 44.1655 28.0776 44.1406 cv
27.9502 44.1265 27.8369 44.0757 27.7827 43.9546 cv
27.8687 43.8086 27.8838 43.5659 27.7939 43.4482 cv
27.8599 43.353 28.0024 43.3252 28.1431 43.334 cv
28.4814 43.353 28.7036 43.6167 28.999 43.6855 cv
29.0854 43.7065 29.1816 43.7085 29.2861 43.6748 cv
29.293 43.6045 29.2793 43.5483 29.249 43.499 cv
29.1523 43.3408 28.9175 43.2778 28.7983 43.1738 cv
28.7642 43.146 28.6855 43.0508 28.6792 42.9663 cv
28.6792 42.9663 28.9561 42.7959 29.0024 42.5498 cv
29.147 42.5396 29.2749 42.606 29.397 42.7188 cv
29.5454 42.8433 29.6836 43.0068 29.8213 43.1245 cv
29.8066 42.9966 29.8193 42.8784 29.8511 42.7803 cv
29.9033 42.6113 30.0107 42.4829 30.1484 42.4023 cv
30.3145 42.3037 30.5244 42.2759 30.7349 42.3389 cv
30.8086 42.8872 30.2598 42.9507 30.2319 43.4307 cv
30.2241 43.5625 30.2832 43.7485 30.3413 43.854 cv
30.5142 44.1602 30.8682 44.4482 31.2007 44.6064 cv
31.4707 44.7417 31.6924 44.8457 32.0825 44.958 cv
32.5151 45.0864 32.9893 45.1602 33.3608 45.0127 cv
32.7241 45.0371 32.2183 44.7822 32.2588 44.1548 cv
32.2651 44.0581 32.2998 43.9438 32.3491 43.8965 cv
32.4087 44.2446 33.0493 44.4482 33.3682 44.1865 cv
32.9023 44.1655 32.5566 43.7485 32.73 43.2407 cv
32.8223 43.3462 33.0332 43.4375 33.2412 43.457 cv
33.4087 43.4746 33.7627 43.4551 33.9375 43.0054 cv
33.9878 42.8169 34.001 42.4165 33.6445 42.4233 cv
33.5425 42.2881 33.5444 42.1401 33.6587 42.0278 cv
33.6938 41.9927 33.8013 41.9556 33.9072 41.9595 cv
34.0576 41.9629 34.2173 41.9995 34.3823 42.04 cv
34.4663 42.061 34.5518 42.0825 34.6377 42.1016 cv
34.6968 42.1138 34.7568 42.1245 34.8164 42.1353 cv
34.9004 42.1475 34.9849 42.1563 35.0698 42.1563 cv
35.0713 42.1563 35.0737 42.1563 35.0757 42.1563 cv
35.146 42.1563 35.2114 42.1489 35.2729 42.1367 cv
35.3833 42.1177 35.478 42.084 35.5532 42.0488 cv
cp
@
35.7612 39.5337 mo
35.7612 41.1455 li
@
35.7612 21.5347 mo
35.7612 22.248 li
@
35.7612 24.4717 mo
35.7612 28.8154 li
@
1 lc
1 lj
35.7612 24.4717 mo
37.0532 24.4717 38.1323 25.3789 38.1323 26.502 cv
38.1323 27.2632 37.6597 27.9014 36.9722 28.2632 cv
37.0483 28.2368 37.105 28.2104 37.1733 28.1807 cv
38.4106 27.6885 39.2671 26.6094 39.2671 25.3525 cv
39.2671 23.6348 37.7231 22.248 35.7612 22.248 cv
33.7998 22.248 32.2554 23.6348 32.2554 25.3525 cv
32.2554 26.6094 33.1118 27.6885 34.3496 28.1807 cv
34.4175 28.2104 34.4741 28.2368 34.5498 28.2632 cv
33.8618 27.9014 33.3906 27.2632 33.3906 26.502 cv
33.3906 25.3789 34.4692 24.4717 35.7612 24.4717 cv
cp
@
0 lc
0 lj
37.3765 28.0435 mo
38.1294 27.5688 38.5845 26.792 38.5845 25.9063 cv
38.5845 24.4771 37.312 23.3223 35.7612 23.3223 cv
34.2095 23.3223 32.9385 24.4771 32.9385 25.9063 cv
32.9385 26.792 33.3926 27.5688 34.1445 28.0435 cv
@
34.8823 21.5347 mo
34.8823 22.3501 li
@
34.8823 24.6177 mo
34.8823 28.833 li
@
34.0044 21.5347 mo
34.0044 22.6699 li
@
34.0044 25.1431 mo
34.0044 28.833 li
@
33.126 21.5347 mo
33.126 23.2798 li
@
33.126 27.3843 mo
33.126 28.833 li
@
32.2476 21.5347 mo
32.2476 28.8169 li
@
31.3691 21.5347 mo
31.3691 28.8169 li
@
30.4907 21.5347 mo
30.4907 28.8169 li
@
29.6123 21.5347 mo
29.6123 25.0464 li
@
28.7339 21.5347 mo
28.7339 24.0322 li
@
27.8555 21.5347 mo
27.8555 23.0181 li
@
27.8555 24.3467 mo
27.8555 26.1909 li
@
26.9771 21.5347 mo
26.9771 22.0039 li
@
26.9771 23.3311 mo
26.9771 27.1719 li
@
26.0986 21.5347 mo
26.0986 22.9932 li
@
26.0986 24.3154 mo
26.0986 26.1802 li
@
25.2202 21.5347 mo
25.2202 23.9814 li
@
29.6123 25.4668 mo
29.6123 28.833 li
@
28.7339 26.479 mo
28.7339 28.833 li
@
27.8555 27.4932 mo
27.8555 28.833 li
@
26.9771 28.5005 mo
26.9771 28.833 li
@
44.5454 21.5347 mo
44.5454 22.0039 li
@
44.5454 28.5005 mo
44.5454 28.833 li
@
26.0986 27.5181 mo
26.0986 28.833 li
@
25.2202 26.5303 mo
25.2202 28.833 li
@
24.3423 21.5347 mo
24.3423 24.9692 li
@
23.4634 21.5347 mo
23.4634 28.8169 li
@
36.6401 21.5347 mo
36.6401 22.3501 li
@
36.6401 24.6177 mo
36.6401 28.833 li
@
37.5171 21.5347 mo
37.5171 22.6592 li
@
37.5171 25.1431 mo
37.5171 28.833 li
@
38.396 21.5347 mo
38.396 23.2959 li
@
38.396 27.3843 mo
38.396 28.833 li
@
39.2749 21.5347 mo
39.2749 28.8169 li
@
40.1519 21.5347 mo
40.1519 28.8169 li
@
41.0308 21.5347 mo
41.0308 28.8169 li
@
48.0591 21.5347 mo
48.0591 28.8169 li
@
35.7612 41.9136 mo
35.7612 42.7505 li
@
35.7612 43.9722 mo
35.7612 48.061 li
@
35.7612 48.312 mo
35.7612 50.6919 li
@
35.7612 51.7271 mo
35.7612 52.3901 li
@
35.7612 52.6733 mo
35.7612 53.1108 li
@
35.7612 53.3618 mo
35.7612 53.9897 li
@
36.6401 39.0298 mo
36.6401 42.5396 li
@
36.6401 43.7046 mo
36.6401 44.3237 li
@
36.6401 44.6929 mo
36.6401 45.2007 li
@
36.6401 45.4272 mo
36.6401 49.4526 li
@
36.6401 51.063 mo
36.6401 53.4165 li
@
37.5171 40.4546 mo
37.5171 40.9048 li
@
37.5171 41.0698 mo
37.5171 42.6289 li
@
37.5171 43.1406 mo
37.5171 43.7539 li
@
37.5171 46.2661 mo
37.5171 48.6606 li
@
37.5171 51.8257 mo
37.5171 53.0493 li
@
38.396 40.9907 mo
38.396 41.7344 li
@
38.396 42.1279 mo
38.396 42.4971 li
@
38.396 46.6089 mo
38.396 50.0942 li
@
38.396 51.1997 mo
38.396 53.0386 li
@
39.2749 42.9121 mo
39.2749 43.5977 li
@
39.2749 44.7329 mo
39.2749 45.6704 li
@
39.2749 46.8159 mo
39.2749 51.854 li
@
40.1519 42.7681 mo
40.1519 43.3813 li
@
40.1519 45.5103 mo
40.1519 46.2925 li
@
40.1519 47.4683 mo
40.1519 51.0015 li
@
40.1519 51.2192 mo
40.1519 51.8208 li
@
41.0308 43.0562 mo
41.0308 43.7173 li
@
41.0308 46.1548 mo
41.0308 46.895 li
@
41.0308 48.5024 mo
41.0308 49.0122 li
@
41.9097 46.8677 mo
41.9097 48.8638 li
@
41.9097 43.6802 mo
41.9097 44.4888 li
@
42.7886 44.6294 mo
42.7886 47.4556 li
@
43.6665 45.6245 mo
43.6665 46.0591 li
@
43.6665 46.1646 mo
43.6665 47.9712 li
@
44.5454 47.1606 mo
44.5454 47.9604 li
@
34.8823 39.5337 mo
34.8823 40.9487 li
@
34.8823 42.1313 mo
34.8823 42.9487 li
@
34.8823 44.0776 mo
34.8823 48.1694 li
@
34.8823 48.5474 mo
34.8823 51.4966 li
@
34.0044 40.1436 mo
34.0044 41.1753 li
@
34.0044 41.9697 mo
34.0044 47.1821 li
@
34.0044 50.3159 mo
34.0044 51.8481 li
@
33.126 43.4077 mo
33.126 44.1372 li
@
33.126 44.2935 mo
33.126 47.2954 li
@
33.126 50.4106 mo
33.126 52.2622 li
@
32.2476 47.5806 mo
32.2476 45.0039 li
@
32.2476 51.7446 mo
32.2476 49.8286 li
@
31.3691 44.6841 mo
31.3691 45.895 li
@
31.3691 46.1392 mo
31.3691 47.6392 li
@
31.3691 49.1157 mo
31.3691 49.7202 li
@
31.3691 50.1665 mo
31.3691 50.7661 li
@
31.3691 50.981 mo
31.3691 51.4458 li
@
30.4907 42.3057 mo
30.4907 42.9453 li
@
30.4907 44.0811 mo
30.4907 45.4868 li
@
30.4907 46.5278 mo
30.4907 48.6431 li
@
30.4907 50.8677 mo
30.4907 51.6431 li
@
29.6123 42.9224 mo
29.6123 45.2129 li
@
29.6123 45.396 mo
29.6123 45.7856 li
@
29.6123 47.0132 mo
29.6123 48.3872 li
@
28.7339 43.5767 mo
28.7339 44.1567 li
@
28.7339 46.1216 mo
28.7339 48.5249 li
@
28.7339 44.3677 mo
28.7339 44.814 li
@
28.7339 45.0884 mo
28.7339 45.4312 li
@
27.8555 47.1782 mo
27.8555 47.9604 li
@
48.0913 44.6206 mo
49.5054 40.8203 49.481 36.0928 49.2397 29.4395 cv
23.4849 44.6206 li
22.0752 40.8306 22.0947 36.124 22.334 29.5059 cv
48.0913 44.6206 li
cp
@
22.2993 38.2637 mo
34.271 38.2637 li
@
22.228 36.5073 mo
34.271 36.5073 li
@
22.2139 35.6284 mo
32.7671 35.6284 li
@
22.2109 34.7495 mo
31.27 34.7495 li
@
22.2173 33.8706 mo
29.7734 33.8706 li
@
22.231 32.9917 mo
28.2764 32.9917 li
@
22.2998 32.1147 mo
26.7793 32.1147 li
@
22.2998 31.2358 mo
25.2827 31.2358 li
@
22.2998 30.3569 mo
23.7861 30.3569 li
@
22.3628 39.1426 mo
32.7808 39.1426 li
@
22.4497 40.0205 mo
31.29 40.0205 li
@
22.5645 40.8994 mo
29.7998 40.8994 li
@
22.7109 41.7783 mo
28.3096 41.7783 li
@
22.896 42.6572 mo
26.8188 42.6572 li
@
23.127 43.5342 mo
25.3286 43.5342 li
@
49.228 38.2637 mo
37.2515 38.2637 li
@
49.3491 36.5073 mo
37.2515 36.5073 li
@
49.3628 35.6284 mo
38.7554 35.6284 li
@
49.3647 34.7495 mo
40.2524 34.7495 li
@
49.3599 33.8706 mo
41.7485 33.8706 li
@
49.3452 32.9917 mo
43.2456 32.9917 li
@
49.3257 32.1147 mo
44.7417 32.1147 li
@
49.3003 31.2358 mo
46.2397 31.2358 li
@
49.2729 30.3569 mo
47.7358 30.3569 li
@
49.2124 39.1426 mo
38.7427 39.1426 li
@
49.1265 40.0205 mo
40.2319 40.0205 li
@
49.0112 40.8994 mo
41.7222 40.8994 li
@
48.8657 41.7783 mo
43.2124 41.7783 li
@
48.6265 42.6572 mo
44.7417 42.6572 li
@
48.4487 43.5342 mo
46.2397 43.5342 li
@
22.2397 37.3848 mo
49.3052 37.3848 li
@
48.8901 21.5347 mo
22.7275 21.5347 li
22.4517 28.833 li
49.187 28.833 li
48.8901 21.5347 li
cp
@
25.2656 25.2485 mo
26.9771 23.3311 li
28.6626 25.2822 li
26.9829 27.1719 li
25.2656 25.2485 li
cp
26.9771 22.0039 mo
24.0884 25.2559 li
26.9771 28.5059 li
29.7939 25.2559 li
26.9771 22.0039 li
cp
@
24.3423 25.5405 mo
24.3423 28.833 li
@
44.7212 22.7368 mo
44.7212 22.8335 44.6421 22.9126 44.5454 22.9126 cv
44.4487 22.9126 44.3696 22.8335 44.3696 22.7368 cv
44.3696 22.6401 44.4487 22.561 44.5454 22.561 cv
44.6421 22.561 44.7212 22.6401 44.7212 22.7368 cv
cp
f
44.7212 22.7368 mo
44.7212 22.8335 44.6421 22.9126 44.5454 22.9126 cv
44.4487 22.9126 44.3696 22.8335 44.3696 22.7368 cv
44.3696 22.6401 44.4487 22.561 44.5454 22.561 cv
44.6421 22.561 44.7212 22.6401 44.7212 22.7368 cv
cp
f
44.7212 27.7744 mo
44.7212 27.8711 44.6421 27.9487 44.5454 27.9487 cv
44.4487 27.9487 44.3696 27.8711 44.3696 27.7744 cv
44.3696 27.6763 44.4487 27.5986 44.5454 27.5986 cv
44.6421 27.5986 44.7212 27.6763 44.7212 27.7744 cv
cp
f
44.7212 27.7744 mo
44.7212 27.8711 44.6421 27.9487 44.5454 27.9487 cv
44.4487 27.9487 44.3696 27.8711 44.3696 27.7744 cv
44.3696 27.6763 44.4487 27.5986 44.5454 27.5986 cv
44.6421 27.5986 44.7212 27.6763 44.7212 27.7744 cv
cp
f
42.5122 25.2485 mo
42.5122 25.3452 42.4341 25.4243 42.3374 25.4243 cv
42.2388 25.4243 42.1606 25.3452 42.1606 25.2485 cv
42.1606 25.1519 42.2388 25.0728 42.3374 25.0728 cv
42.4341 25.0728 42.5122 25.1519 42.5122 25.2485 cv
cp
f
42.5122 25.2485 mo
42.5122 25.3452 42.4341 25.4243 42.3374 25.4243 cv
42.2388 25.4243 42.1606 25.3452 42.1606 25.2485 cv
42.1606 25.1519 42.2388 25.0728 42.3374 25.0728 cv
42.4341 25.0728 42.5122 25.1519 42.5122 25.2485 cv
cp
f
43.5112 24.0059 mo
43.5112 24.1025 43.4331 24.1797 43.3354 24.1797 cv
43.2397 24.1797 43.1597 24.1025 43.1597 24.0059 cv
43.1597 23.9072 43.2397 23.8301 43.3354 23.8301 cv
43.4331 23.8301 43.5112 23.9072 43.5112 24.0059 cv
cp
f
43.5112 24.0059 mo
43.5112 24.1025 43.4331 24.1797 43.3354 24.1797 cv
43.2397 24.1797 43.1597 24.1025 43.1597 24.0059 cv
43.1597 23.9072 43.2397 23.8301 43.3354 23.8301 cv
43.4331 23.8301 43.5112 23.9072 43.5112 24.0059 cv
cp
f
43.5112 26.4688 mo
43.5112 26.5654 43.4331 26.6445 43.3354 26.6445 cv
43.2397 26.6445 43.1597 26.5654 43.1597 26.4688 cv
43.1597 26.3721 43.2397 26.293 43.3354 26.293 cv
43.4331 26.293 43.5112 26.3721 43.5112 26.4688 cv
cp
f
43.5112 26.4688 mo
43.5112 26.5654 43.4331 26.6445 43.3354 26.6445 cv
43.2397 26.6445 43.1597 26.5654 43.1597 26.4688 cv
43.1597 26.3721 43.2397 26.293 43.3354 26.293 cv
43.4331 26.293 43.5112 26.3721 43.5112 26.4688 cv
cp
f
45.9048 24.0059 mo
45.9048 24.1025 45.8267 24.1797 45.729 24.1797 cv
45.6313 24.1797 45.5532 24.1025 45.5532 24.0059 cv
45.5532 23.9072 45.6313 23.8301 45.729 23.8301 cv
45.8267 23.8301 45.9048 23.9072 45.9048 24.0059 cv
cp
f
45.9048 24.0059 mo
45.9048 24.1025 45.8267 24.1797 45.729 24.1797 cv
45.6313 24.1797 45.5532 24.1025 45.5532 24.0059 cv
45.5532 23.9072 45.6313 23.8301 45.729 23.8301 cv
45.8267 23.8301 45.9048 23.9072 45.9048 24.0059 cv
cp
f
45.9048 26.4688 mo
45.9048 26.5654 45.8267 26.6445 45.729 26.6445 cv
45.6313 26.6445 45.5532 26.5654 45.5532 26.4688 cv
45.5532 26.3721 45.6313 26.293 45.729 26.293 cv
45.8267 26.293 45.9048 26.3721 45.9048 26.4688 cv
cp
f
45.9048 26.4688 mo
45.9048 26.5654 45.8267 26.6445 45.729 26.6445 cv
45.6313 26.6445 45.5532 26.5654 45.5532 26.4688 cv
45.5532 26.3721 45.6313 26.293 45.729 26.293 cv
45.8267 26.293 45.9048 26.3721 45.9048 26.4688 cv
cp
f
46.9038 25.2485 mo
46.9038 25.3452 46.8267 25.4243 46.728 25.4243 cv
46.6323 25.4243 46.5542 25.3452 46.5542 25.2485 cv
46.5542 25.1519 46.6323 25.0728 46.728 25.0728 cv
46.8267 25.0728 46.9038 25.1519 46.9038 25.2485 cv
cp
f
46.9038 25.2485 mo
46.9038 25.3452 46.8267 25.4243 46.728 25.4243 cv
46.6323 25.4243 46.5542 25.3452 46.5542 25.2485 cv
46.5542 25.1519 46.6323 25.0728 46.728 25.0728 cv
46.8267 25.0728 46.9038 25.1519 46.9038 25.2485 cv
cp
f
47.1802 21.5347 mo
47.1802 25.0464 li
@
46.3022 21.5347 mo
46.3022 24.0322 li
@
45.4243 21.5347 mo
45.4243 23.0181 li
@
45.4243 24.3467 mo
45.4243 26.1909 li
@
44.5454 23.3311 mo
44.5454 27.1719 li
@
43.6665 21.5347 mo
43.6665 22.9932 li
@
43.6665 24.3154 mo
43.6665 26.1802 li
@
42.7886 21.5347 mo
42.7886 23.9814 li
@
47.1802 25.4668 mo
47.1802 28.833 li
@
46.3022 26.479 mo
46.3022 28.833 li
@
45.4243 27.4932 mo
45.4243 28.833 li
@
43.6665 27.5181 mo
43.6665 28.833 li
@
42.7886 26.5303 mo
42.7886 28.833 li
@
41.9097 21.5347 mo
41.9097 24.9692 li
@
42.8335 25.2485 mo
44.5454 23.3311 li
46.231 25.2822 li
44.5503 27.1719 li
42.8335 25.2485 li
cp
44.5454 22.0039 mo
41.6558 25.2559 li
44.5454 28.5059 li
47.3628 25.2559 li
44.5454 22.0039 li
cp
@
41.9097 25.5405 mo
41.9097 28.833 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Duncan Stewart) ()%%Title: (UStA_Stacked_BK.eps)%%CreationDate: 28/03/2014 09:21%%Canvassize: 16383%AI9_DataStream%Gb!R&GC00KdO>$B!PSX]+e`BbgQWt:%S93FoRql5+Oj52pHF(sci/qM(YQ;137g@Wm!W`"=I*Tqd:et*P1Q1mXsT^UUmISM-fkgG%Jih26DDppC$SJWl1:Zd*F>`iLaG<Ed-:C7^A)44'8L-=D*TnYe/dWU7VX;pD4'CFcVsWn]Oe7Z2o0pfm)`?A;QT'7DI$Ou3DJ;-R%2j\EJM(klijZ[ad_5MFg)Rm<LPWL53;/tq9J,ZZcp:;\3r_89r-gf<]e%GpXh9Pg5?8'Z`pa?&HlRnON@_g,QKCW(sQZQ`1<;Or8%G2MZr(<^uE3LEQ*r"@0JF>e$^LC;Pd\:?XkTUs#=e5(WpXEV^k;01D:Pi3H<Qc-;n?W&K>/ZHS,iXlrP"uVQ;,T[bIG:Xn*&n3ES%jq;-Vj'j5.7\sPf?\@d];sp\uHSASt(O\W3gHh<j1-8jo#6,'E_t#q-OMBl$rG'iQ5>28S6A=cOP'hR5m;tiI2lD%1)Dr,')#PJV%rZr<Ec$?M)"?)X-<es9qG=':L@o[CFe"*NFDJ%]rIJSb(*+km75VsVri<2+.An,f\b](36Qj&ZqR#R(]$=['89;!M3#a1,Jpq_:b%@s^!RoELLY(j[)4=C-*)_dqiOo0Gkepc.G3O?XRo,XMAn.K?$I)@3QPFsg0@J.qNU.NF2">h&gsERMs)a(S.sdC_JIRgJT6B\F^"%Pi)6FI(l&3DW'^(lRC><!<edmC]#OLGro3GX7CYLR[m6gV_2>b1Mq9jof3rUT)5DXdqpc:DP'n$ri3()bAO+9R/&<76+>u^2gG]O%j%&oPql^C`Dj[6`kG5IEq,_bsSP`d[P3/S#IVR/@p7PjB:7?5_/ls/s#QKB79q[UU>:jmr[(5OUN9O(u$O%l&eA<GAp@)g6`"[9:%DSB<Hh=^#SUk%"0;P6\%\.mKnT7Q#<Ik\F$&-AtDOt,ZMJRJ6pLBVF^@t9pGPG.0/UX>_nDpJ33[LiRnpBi8<DA1%dBAAr9#)fb/%:K5GQF1rX$8);l`Me.*K"V">hHSF[a,@[@A[WX^'+g\silSiH^%!1)TiL2V-T^W8>OVW@5;ObkJNB]ss2b46-ru$@o&A=T-s#n1/%mM&K-1'RMCYFFRT46292gImV.o%U+u#r"lr<.k&C4pW)dWBa)S=?/gH.NoVoN]mpgK@U;1>_c-[JsEYCKNrRQBWIcCYL*P](C"`P%PFM/ngaVIL'_HKo3q%/Pn.NIX!OK:a%uY>q?erguVrL;)+;>Fp!:l+B<kh"gXSj%2o0;_`!C)%+khi&GYM=%<N4T1gchFs+EsJpn%^YQqJQeSEg6jSh/\6860QTL'ac(LE2ja9,U3q"GO?]8mbdYB_DO-46m-_5F=d<:ELj03%hl(eFQ`(?RPT_uRH";W#t3dF4YNacCc%NkO-UolJT2\>$tBFPGFd`\6hjHI;<gV9RP(q*E,pg&V$S7K06-B/&01Pu5&54:8/H$H-m])hV]H#ZF_Yg5=M:jp6q&/oJUEb@Tf[%TdD?rCQ?k\S*Gq#WK38I._O"TQt6Di8G"CiTP:sf0jNZjWe4m(/#!jmR/]r3#!fad'AubmARDRd>W,mEc`$aM6]@Tb?A3#h&7U5Q%H4I-,!5T+,eXADZ*HrIuAjGh9BSAImql.eFBGKk$aA<-"M1NtZ't`*M\#_]^9\[JLC?b-u@iJEZ"fQh+D2q-pY.A"Ugc*%`Qk004%*_s30m?'%)Noq&;NTL4e\*LEh]\=Se@uR9*2ll$K)J\(@Ne.\`2d+A?R@1G^JJJYTmKIjP%U5Wiflfc^cIpcK3lc!T"5NZ?G7Mnl%^&+Fu]@[uPS#sM?Yl%!/4:*:_<S.O<OmZt*dT_:Wlb8q8j:R>7?WF;GNAoq&A%1nkj3\!9LV`,E%pH#FG9MC$S^3e$f)KFq4+L,W%CA.t.cFg2f!r4GEZi"G_NMl5aZM=?!F1sU<aU9R<q9k_3s(X#nO38=dod1fh8N!In$dI0#V:5O(\EeZ!,ENk#QgH4HfA$sJrj?+8%!LAJAK>%A-^tcN@SZqQ)?$f)Z^Ek1.91h2/s.B\`_[5AXNp?X='0Z"Aa&=!Yr@`4Kl<\hF=AHp:>tOa>NXo'H-8LC>i<3*'.6IMN%T,5k?s$9BTIpnWq^An-r=<%:,Vnlh!B`HsBMj7j>ae1R5@7R*ih\NoJg87S_rc-AUJ,\39M6ddXR2#!KoC"tXfltjfWT&E:;b8;K%'3O!$l?<KH^(Y4`eGScY95toq3n0TN_'#\"^R&IOe4J9C^\JtEr3=bP9ipq0(N2#&YA8X7;?-#1N4[8F#E5?ngQC9s*W'mTa9d&f%Q1;n5=5D/025W]!*u#Qe&;RXlhOTiiajR:P>BC^9EITJRB6$7KqQK=7L8&\rlOV^E_9C`,,'3??mWl8Hc*I.S\lt*uPHK7`<ro,>%EAdTfWBA3uX73m8mH&HXDDar/8_YAHB*<_;rJsW5QB*^3L8*6QHX9m87P_Xu]CQ1_*8X<Z<3Q<Zo=!3j<LQSU[Q87a7u4#Mr8)+I%.s7P,h>)>IY"?C2,GPr]<Vf2GDf4(lG&g^14>uF0-M=r6SXI4(8&CU=X7'1bPcN-!SW8`7j5sgL)p?3:]%#8FNX#%satgI_)am5Z%4KRr7BWgtgHg]1^Q;](T\NZZXpT-B-Z!7^WX&2e);eeCL,VR\,ehhoUI#QsXD+N?*[n0UPf1+"4a4hIj)e&79V!UeLB3b7d[k6QG%Ie4N7bClpsN$`[L_5Ii-/&i2VV84o3k*qQa2&A-(,fcjuaqBYNq"-'nROOSF:T!D&Fq5pEP"lg<Z.YO-iS6+`%V5pKRn'b,0?Jfm%=r,K6)cn=Q++5F+3_.M39c0GN0$g#X!Kq530+<]<lf-NbQoFi>MM(u`?@Y5VnR;Ad:./je[cWeYV"0KjIVQ67>Hd1J<hul%Z*aHV%ea5H$,r,5<T#N\4-VpqEC@suEVQC,9^uh@K=H8k,^L^DCB<K-f<4b;^8(uDunFmQPUkNqcAKJ5*?:i7FN#U?>G9YKrU-mD,!Dr;*%`iq[us"E\AGg`]eYViN/`_gdmkrZ!@06=5$hKTk<@ffVe,gq+Vedms1)f,qN]@T4h+gLLPW9a@#(prC4.=]1,%>b;6``5+VD_s*q%-c`UYZY$C&R!_\HWm.N.;Oa[g$acAoK`uI9`>6lPe*lbH#]u!bb00%nES\1j%QUI^>RXM91p)cseS8=UTX*!\#Bd"H4/bl_RPc#t%V2qZG(\Ag#kSEdbHa8TP7^MpbFCI,`B8[$nF<EpdenhUIJ0[WcirlA[_K;pBIqFhR?6iq[C/hP&7!M!\8Tq'kWY(ZKHGiiBLH+bH%(YTbQ)N>B4-<nWNKfS;h3$N\NmI<D.$N[/+S1a]p\Tpmph`KZ5TJrPk/8(e8>*AbtX'DO%cnZB+Ze7Ih#?G&NQ[2_MNBBT;>*<J+%,#OMc&!:&6rR>\8.W6q*&\e-W:H,cOIeUT:C[m5f7lB(X&l8gZ#GQ0O_8jn[]#eQ,3b5.DA<eO%jYYJ^jE#q9b\GNk*FG,Ad1l)$%lIhVeOB+6+%:`Ha5M'V(.cDBVNjKY_+\g]"m0@dL3KAscnX-!Y,dp'9f&3fX1;^?%QrR-XM6i/?\mKuGfp+kWf!@%;8>Y"<rJq,#%j#ZSL_MZ-*B/pgV)e=ohqa00*APi]u!'B""Qh?S?PDNI>#KTS]/64@5=%6*teA8*\YO9J0@C-6[p9gtWl1URG=)"\-5\<`ll\nrA%`gY(.1LI?(qTVcZ:AGc^[Bt6TnM#(-7MB)_;b1<f>&(M1XDMCUi<fsNY2]k[Q)0+F0q[EGlfh)Bi+g\`,T^plk%$5IJoK6-6S%Cb%*K@Y_=jjg;CTU_j8$Z[FRS6bT2U+R\8bLWj3r*C=5r3(/ESRL\1C!u06F;jF7FFkR$rA,cAZ=B_<30%B@;L3=2(9J%&MmEmUb6MX%>%f28AiNibS=tI*<j(`=7-uneDJ&94)]L5Ya`+UhJmg?l7?Hh.nZnC;7kt/Ep7L(fA\)VtZiih=DcAg,;/L3Gg8t)YV^i8nWqjdV%g,p;#PFek\7,)m4cb$qBZpdl]8<LF<(S0u)Z*lO;X>6.s1NdD_G>K55N[-etG1@>CG0Q-H%s)/F=2lH+b.q%.F(W)^dN+=Es0cKF%c8kK:)_j"T&bC#^0e^!Bo5Yd)0=M8ZEdHkZ,-7JSV*EX`HT<,@>-fHOk?]D19N0ajpMuaB0=M8^Z=_m="VQ9Y=_BPni0\rGNS'TR%Ljds9fU(EIIG'V4Qed=Cfld"JgTW?C$2_"hp9j$Q<mSM2I)\3Z?Zm+VAN+%)`f,?;s"l+3]ZW:t?"P><AN&ORAg?/D2W7qR,Mlui%iE^&dG==lsNW*GjhIUfACX"_qSp,%&460[Z'Ad;6hR0S0g=+S?B8`BXL2N5M6lFs(??DkdXk'17MWnqK(>-"[RhsP>qhDbXf(@sA%m;aLY93n!Gjp&-MSuq,#cP&X=MqfQLP!?Q=HjcN.SK8e1T0jF"_jbTt1G=gdWSYR7;=]Bf8,5G,Z8`C;.Re>AQ$FdUYP>G'p&4)(%1LIQMV':,Kn?P0kcS19o:SAS6%Pl(a80DsdROp:Q9.oN#Ar`p`\QnB.RHml@WgOO7>K[OPe*TIIEn";\<UIF!^3H@49uUJ_bJMRq%NdhLnZK#YAOZfm"qn]YL^FBunK;[MNkig.M/UT>j/ONnNn`4olna>d->L,e\c&pHI;BM<j@Hf##>"$BH6HHbgq9#7HQPU=9o_!L9%.XZ_.`H.fukW/=,lS%l.pa`Bga4FanbuT<M-YGqF":d86O`0k1;ttM1><))AHZJ)`cU"uThOflf4?#>PQT+a#$att1iQdeYo:O&N%=`<X\R(EiV"Z,tLLJkju$D\aspA;ntG&rIg%>)RfC7emGR:nB?*uo[)#*"O9DWErB$I=@nX),1epl!kpcQ$<a@kOs0r:lDr:>/4u%i9Ad31d6@Q*Q7!c`HNjpDkFAP@>\&-[L3n07j)%6W#L5D0qHf:+)SmiZ<*s<E2]6F`G`em#;9(q-@^KMs&9CQKa!FYq4"mdNp!="%i5oKl/]G-k5;:a^`![SXMh-:5,]D\+GW.p19':qX0eBTlA#IJR+8],nB_1;hj9`QG&JbtlBOE6uMTa2Mp<Is]4.%Xk8A@okMO1,b%5#hG(^pk3K**Ds'$)Z1j&6CjWSP!jm:/?m35M$?,P"L?-hG$b,YX#&?L!kJ^[/mAtoH%#to!hB_j9hNHe:m>MN#,j?T6@YLp^%_M%UR/a7B(P4/-ak)aP.0<2L[7`!G?ajF%=U+J+/tjTS)[l@T7iT8@ct/oaT`i.r,_S/<;:b8bR]0@kjeE"gFMC#""Y!;r=tCNGGZk(%7.#2GRD#R(/kZ@tkE=1]-8a\0)#`PIEYgibD#TS-V8YhYF'N)?Aa:/UeU#hhPbmRd&&e(p,D3#4bdkhK?/FRVa4oXg:<j2?krf]t%/9(0&;CVZj"@Br[1tg6:Q'S`J^rcaF39RBX=CE[F?YDK+<6Nt@$Pmg-8T8kN<UtQF7^C60rKZsr1epS/[,_d"pW7<pG<#3Wqr7RY%(p$2!.]:,dGaT`^;_*#&LLsplN=V^uqu1uH?X1O1gCO&3pac*7++r=jkYVG/Y?VKk>"PJ48IiA!H'^Ho^Zkqf_PEBL>kMZAe66+@%W`OY+J&A'2EXZ%3YLY^HH!BjsNfHa9iKXeJb?n\E=7$grWr63Q(5-p-%,X0VJJ2HBO!0Ih&H/%$E^.am3&d9g::'Wmo)XBO$n;6h%`R+7G.ijB)DqY$VrXjPOEL7DleNT+]rkeD,7>05eqa:c,+.k'h#R:L!+8&_bdlVtI!rf7IiqlO)#B+s_X`p/GYJ6&05GR]SQ>!9B%!%dF4kll-k)u=0!dRfl";6p/n51$*>!kO$teh#9R'n*!p:TC;>]`h1)/`T!-?FRB:54K@M5$r\i`,>#O3Hd9+bLXB[o$Z9'p+(2^%a[`#Hf-<h;l=#^$?%$=#X#dGu`K``L6,>N:Dl4)eB[QE-qJpV"PFoeRQd's@@el<u/q)b(r9<:09=C$1^FihfPORlu%;!cm?,lSY%p^=l(f5+&$?M\tnq84<Lj\O`rDksRJ"9]282Ch),Z[;K?;]o)9atnW<Bca9B_nfHp"[*-kn]DXa_bNL4%;?Gi*/4N35ZgQ90gsM>%J$)8`,[e,`(^p1D:ElXWHDK()M)G>EpZ:e$qYFZHErqUJcJ[#QQ6mnImqZHE.\>Em,Tu`,4h?rQ1pSTB!K2,oN/)T*J^=jYJq`f\%AR[qmV<Vu5R8+Z@OF$1:i>9]u#kN?]9`!aZ88o*\0,^MV<qD."!f`*E@p#tSX/ASa8nF91@c8+/M\33b?SNj;E_q0RPmrS-H%YCg%6pQH8qHh&u&j?JP[PcP[-/EuBCQK`b"R0tGcPL`2[%g6,LEMcF5RF3b,#(W#)4CO^P@@KUA6dLY9hB3F0::hHUh_H@.0Hc&6`+9F%s!K_C6R$Xh;[gu_K\J0:aM2\L:cCp@O5@:A?Q`R&]UY3A8)64.qVN9p0Tt)qkfR5>oQBhi.X;(-csf\XPtK-O5(!?r94=35g4/>J%#E@&'Ys&"J,cZeY-\UT`\N<0J*Pj,ic@@RFF_G_]$b`eEN0o('kPf[*a(`1<Aj>m3j@eY4X8CMcjlLE@mSN>XS%YF.DDJW>]EK);%-o5JC=G#1L86n$Hc]dj"BrZY%h=JC4'Da[=[R9_$:(2,Nb&:g3X^7\?-rs=%$<]t;X/&?)aU3Ajgeb-mD+&niML=1>W&4H"k1LZ'%B-'5E:SV"cmoe-mY`uq,(LFRj:)pbjaAUa?3H<uG862A"TjcG.i\G:sho8Lc:_KPE]HW?OK6J`s8'_u3CrWJs;F18rj]Pt]>5"jD%mtJrTGQ\<MXk[4E/WdU9IOq`abZpCc\,i.6?Nd]`>.fe.c@=hJQ#,A]+Mp_2cV>t[a&079]m7*jG)+aBQr@jXR8ZE8R23bl1',P.%Ok>#uf"]D/gAgIJmG8Q"6Z3d<fA-`?C:)r$BN^qo[?AYi0n6;/>;^Cu:6(-`.;*Fk9G"r+rNbhfZPtOgi(6P4C-BoI@L[T%Vk8;V%mcXK9SeO$Vo2?_/NsKhd!cpRb]F'68Er4*3'-r8OK19b"SU/d%$F;Ofc?R:#@Cjh\aC;;o;LFNR:u\=k7ps)2S?-+!Eo,k:5r^B:%&:I3igXV5;h/2;?o=p6fV1u-Z]\0p_g*?0rjVL]W0o<p!6RG!%[;MDt/2A\.DRsm0Anb<2E:4^ObH%jX.5RUj+8F@9dhtVoba]]'%+n%&0HmeOK'^V;lY*.gH3JIu+/3K@UG\^iRa-U5r7@jI<%'nM%.u#hN]o,K3i",?#Y+EGD$$@SfSaK.I:VWfgH5atsZl5.Pdp;Gs%eIU48T_ss;R*R5G]GA;]KF8Uf^_bt7FcPu+e"iirIl5$3c!F/h*b#S7i\5QI2l6d"X_0<;&2\aM'qBa9#E+.hU'fj<YTJb;Go]9X%?9SPdc3'M>T"QkeSA-'&.Od:7\V@Z`J%8is043?A)91.KlV=-0:53<AoBh+$I`<)mQ$oBc_Ga5k63705HM2G1Uq0og?&;=AgLtI=%\RtqVD1^"BQ^;*mIRni#59&H<BRJ-iq9:dEMT4p3Hj<PN4R`CuP35C!oSTd7lTf7'@#=i:I<S7i=*n=(`Lj;F26H9n2<-'h@^k""%BmkSMEf:.H\%gQ*1@JB&Qb3FjpQQf/J:p+pT/eoY3%US\#B)W]nMucG$f(H]p[qo#k)6_H&^Lp>cC?dmLdF+](=(g;!G$$%j!l1B%:MN@Y:XfmcC8K8T_jA5!cmq%I*/"Y85/.UI2p0prQ:0%\"J/0P*If0\q?BK9:nm]B@PApRe*7C%ea,*Da?1LpQO;k)$usT</up;f%pi8\a'%X]VnhB6FjV%rRU0hnnp?Li<4#K"/])n0KPV!VV.KQ<IC$H!jQhU8bqY"f,kqNaaDBId"WZ64%rZR;sV650cK48Njb(=.<%fPF81I?_dq^_*U@,>4C]0%sZ_0"L6\6fq'i0'BG0O(UN1OB+$sSi8?mJ+$g-1V]/s."PhO5i/E,bDR0%%)sCkoCGio:J8HfPJX7J%W(+!JLlHgYiOee@bn'LX"CQ'F-9Fek:Q9T)N=04,Rq[58]_[Yofpbt2138tTd?_8kZ4gSW*_rl"9[72/+._`7GOd7fI-iNsFnAB,%b`D%^pDYd=C&]L['[ngq@P6W[GI?tfW3^Q&9@B_Ib_SQJ_ecTLN@42"g%\_F^0?+W-DEhAD.UJHc[PLYq+U7kEcB0mB9U_Of!n=1%n<8.!T/TCjKdG7fOMq$CRFG0EQV#E`T/\I6Nhshm"*gntMf/DeHV2LE/X2Iik\;)2a3,4E0>F^20?QQ!5Yr44-qo*qh!oHQH2OhK%.+i8(@TA6>GJ]ctp!8^TcJ_Q)gac+idaF%/?%91c'h3Z]g.t*8UJ\DUD1'I$md`1p.Q=CpV6O,:6EO/U`.-]n!+('Kc&HYi_E,He%m=G*P^*657R.Z$#j1Sj#eY@ieqAc"gk'KeH_"5Oc=4pgK>\<-qNFh'q3fb+3C_F*ec]?Y#SkJnJZ^<e%,l\#c#B:H6,pl[Wi;%$$%E5Jhd.&Xaa0JS_7M8?VB?Pa(%j-&lDo7WXWG9eE)$f.!NEYVV@eH(n9H"$fH59\73T>2p+s($'#>R]ESZXMuA4klmtU21%MY>1=V%,-qQgMWkA[QkdK)G=YQ7lWA*PgsANIWuL?"]i&uNC^Uol*00e'LinrAf<._""u!I=C%g:oN!1VZR4na%"7(g.V65D)d%p>%O/&,C%@='a^ArNnrhjGcaiqaqDE+c"/@&blWfRB4rKhQ(O.p!3TO[1?-7Ol/`7X3lgZ7^a,(U"VhF[58?j@8[`!HocbKhN(10#RiB,VSRa%iU;u@dSi10EE2Nb\^>*aV/tQp*i%5.X4UlVNbAf,Jgccufho)6<[IIe@L\O7T2q;4d*6K![ZlLsV:Dr%_,q2*m60tA4;lJX<(u(K%oZ"mhjh?Tmjl>h"i?>_u5GDm#)-?l?+L-h:4P52'_PT;A.L'gOJj@+@fW&9S$DueD!FRNKN%hlV$LXh9af+9uD/_YBReaT`;tr;$%>tf]UKb@'4?B_C."DN_(FR$L0^E='K3]bnhSO`se>cI?UMM`N$`DIu]gactMji%iaI>:J0Mst5JI2FVt];`\&o_I?>@o!&aYn`++%nl`T*Q'SIeU,D76.KKq4f=PVuCqV9=r4VC@oqHXK-q($fP_EPi1bQ!,b9h"4Dq@UX9FmN'[]4Q<q,bL00;\jB"0R0&SiErE:9Ln1%:^4q9(RWQO0QS#aX1chq+ro9'#,.u*02P0&DN5f^3o]2;a($<BQETBHDk0&P@I7W$mUD0mjlOUUZ<44.%.(5so<=TBrceFL1O^-N%\Bo.5V#9NiFRJlSHTr.71d\_JS6>WZpBm6'0jsnWgrr<^b,b6FYOVJPC?"eNc2;:L-]!*sU"0$*9`G<Shus:59.-RE`/TY%;FH^"%P9`/sOIV3__r,5U^/r*s#G<4^q09"t4TT>GG0gMq_9GrWe#oUYB&GR+$FBEroBYuN`atQ:UNrZXFec>oI=83nBXbqmp5QqQ:n>W/%5n>l+cL*!RnJr''_8&;1ZBJ=-Tu],$`!/0?3fr'*T`P#r`bT&f"FT`k=M%e:D[DIfAa9ls\k9Tq0_84sSr]L#+\P5bY:!.D1M2b\%:9J5/9GA-jGB?_9":!9I8a,7kQVE.Y&\Q!^oEEQ@`?6q2]KA0:Ki\Ce.bDu&>ZT3lC$u5QJ^ZI?D@_t!p[,Kd2#RID2-TqJQAWfK%T\+MW5CgNU^DKrM&g)#JIO#4u/\RXj0):jSdpcPR$b7e&Ih86BhZ],iY)c'0J_n-k*<A5D]GAC<M-c3lMM8%W+#H<tCq[%YLqf;$%ZW$@QIGeA$YZcD]Pe\`lQW@jG>5/rIlr/k?^qjnOka\mqLtH"ITBV":kG.s=:?=:eh>;ZCGF;+>\D4fQVH!RQEH"d;$j5R?$H6&Z%.&`;+KD?6"%[@M6=N_;>f-HBU+<NV`FL3ch<3c8l'?X(q4L_.?hZno`_gC@Zo?F5YP@8r!NmDVnpL<F`T`ol/Q6[+U=A=qo(JG?/%+3Zi3+F'eoojV\9_pR$Z+o*!,?3QNHl[g:I6hNmQSZVskLVqe2ntGi%OR,,]NsmV@TX]BFOfeB49@Uu]SQ7Z#C%o:UnEENm`]s8I%Md#^Zh5f(>3LGf;=m<^:>uEC<Ld[R91M]bH4?Jj(R)+Pj=I_F*&+qV=?%Xl4<EIVLs-.8N'9&Eom^tRE=mW%c&%NO:XD9DBK3<!>%S6.%9UMBBQOC?PEfi(S>D/-'=+R)o*K'Jh.F&4Vr;a**/RfrsHJhAmR[U6?4c:Ki,\e/LI%npt*=@U4ocu'5f:\d9Fo?h6*c\@h4%dAc%hJp_W/c3>@=ac_87AmL1)[i=`pQ^_uIo>XDoknrR%^Sg\^^!6?ZVB=BkP$\f`8[!+\3PN*7*ID`e*=_'=`eMU,c;3-!@3rGf%jH+Y/9a<lJjLbTdIIKD(ia97>ja$Hi]R",+h5[Fqi,8+Vm;ZSF^,&!`CniVXF1q(.HtWM]P<J";?VMosFruIK>F>D:6B:?E*)&Ee%?cq/pD9o,^k*"NXB$VMF/Z$"rpco45Lt&l9h&X;!YaE89p_L\^CFWsfo9OV5V9H\35-De\b(f(%R6n]uqO)iGffZDeq6!1Kgt*K>%bm9Rn2FEn]SfM=s:IBN!k?lCdV'E>)4kYLlc4#n9G/lOA=NqA):GfAqRS@pWXlhRBkp9b,q$q`0CWg$Ej\-kR;Fe;>k+?G4/9_t%%I6JKTTi64fX)b"NF#L?cN'S%B5ac]TF=+'I:isH/!.ld=U+8CW'T9`j*fGCg)4,_eU4!j!3J.Fe@e8.I^s-b=s5UEBF\>m.mY,b`%V>K0Km_lePrX6-A3H7tuL`8okGB8=meI32gLsLnS@=^_]?S/L3VCVBLoW]@46C1e0(c;?G6eA=I1l+J95c/oiJ`aS2;ZriNFV!t-%J5,d:q%('K"pQ&LPt\O'Wng1i4.d5V+[%:lJo(Rr>X@\Qh^\K=_S)BHdHsU>B-RSQg[i6tP>TJ:'D3qV,<cS<0md1h,Md@GJ?DWD%iu1UEKdndY=t#6G3d&&pS-!;MCmoec5BUh'%au!WIZqpSG-\L)OPp>65eXoN[jKA9aP-?L84B=oG&D;sN'%Y*$1Kq*WUj]&,]@PQ%S92Q'0i'U&RfNV-F?,EbgX>qc/d""PWWPkdlCPR=F<.OfhpSC$X]e97:FF>4KZ7?+lYL?LN!_%hdM[5*]?rI>QLsAkXe7Vh_.0K;%8&NFa#q]*UIM`I&YlL<H-@+^dr,0d@<%i^L?:os`6nTuWhQ-S"KtBsD(hO'Ye&#0KGkTdI1=>#[0R2/U`m?B!5IjG+PS\Pd0Dsfh%G#hu4$K&trYd/b.g-gjaC#po_4M;R.*e183l3TtAmTj-p0KhPgGe<==-e/0qTuU%V<_^Gle!ZP0`")2hB)_/Z/'V&-0$[;*&nE#`%43t$d_5lj"iUYc&PM[.1Om#-1#btGj\+!Q6.R8fIORa14K)N16f/6Wf?Y7SMnCS4<ontPPGal`U"Adl=K<k%rSZEh/?sr&44rh)q%(L0rslSs[N_k;(LnH\BFWf-]NGYt*J^P:%%-suSn^&%*X(Q$T2O_[XGLJ6lmSY1_mW"b_N0T-TpS62J).=2Pu.>o^eYDG$,pc\Vm%m=qfO$<j7oo8fsH4(G)JGXG#m2^1;Y;IARGKBk!VCP5Y,>aE(C85D@^q1A:bNKN)'n,+5n$Fm`<I9dhHY/2MVKtaa9oMRM8b5:(K%-X9I);o""4mZe^grkiPO2+#HMEgIXWUuMBiAF;Z>62K#;9&J5K=2_&@HY(OF+a``^2agiPE-5+MEj+a((IlOOZE5<?MQfXHqD<\/%V5jm$Isk:E0<qtulNa6`FH)Qc9MRp#HZZ&N.L>(\REMWuX!%A2J+P+2';V%n(bZo6L.E7r?hZUW(^iW63JdKkhi3biGWlo?rU.?R%d_!.VrHg6$)BfP2O&@\.-@HX*J[<tPNA4?1jb5-0R;50cH_k'Hi-ro+W(:3#R[$'#8g[*JIID,qPrD(aABLUL7q8?+-L:4DFa`cr%6NSq86Y@%[Q`s7IWg0o+r_t([nU4Nf+FQC]Wpqd$O9RC:S0+o,X`UK#I5B(JdeHM^^X]gFV?p.?5<eFu)J2N;Y/jW$,H7E6Oe2TM%1-bBrHUFU:j.htjd`ZM[`i)FZa(Vhu@A`b_h_R`J=m98-^&!/380<m>4]A./DlnN`eM?CT>FBcLS=LKAXiA!aV9I&\1"+aoSr+6%%7>pm0Zb3b(6[HX4SR!"iO^=lBT8gID%jRl(/g!$iF47l&]Ek'k$.APNo<B-dNKIQIbf2T`6jt;_H1cUa4:b4]Oj:YJTZ73"b6(Z_%N%^-O]"Es>Fa25rq$7c;D<b1eBi^kr:C1_ck1<<Gs(f"[^du#2['-4kBpJK$Up:7TZBV_0!US.9/G)a$HDHJ`iMhKPGo"p&eFVOE%o+Rq1(\V*&lLH,r(n**!dN4'"Z7_Ef_fAQEb;E.!fb4\?1\NT*'83%sIn_bZb8WN6jY+%4pL$1'[O)8/U[RG0gRZLbHf<@&EoAAl%BpuBX>sq*g1)U[KDqb/i'<Tu*IYuiK<?;Vhe!0+OQTKBgB_JkF-C]3*BecCW+F4EN-?!<$%YK'&gRi@gpJstlT5ptK_o191'IWjm%BD&rE.,LPnhG)lS\A8'0d9B:!Gi*EtN_I45Eegi8e$mlcjGYmEgUd2E<[bEUrar@iWgLFn<":E+%h%t%qrfu<qt;0mOH%_-Ft^6m%Z%pn!D5+br9=[B.3&c9_jD@=K7W0T14hVY0Vl!gNGoQ8Ue$hQbgKDMfmI67]h8p?eGX!78dLEOlnCcX&@/BSKj3u?:'_Aa\X]j9A%lU0"Wq0TpLD)$CflC(Z<n:EaVA'Ma5HFO',b2f[$@>^r`\^)_^Z0lJ5I^_:8.$fpakhaq+b(2,BQ4MdrO`Et)5k)S[9]tUk0=uhm%&TQEY@p8^CM!2rT(Y>rU7`dB&H%;F.]I/)hHpPJY*W:h&LXQndgum(W-a!,4A;#W>H(U9HhgCJH3kZ!G?4ugN.+ssDNu_ZD'$h$J%ktj/[HBjj;1""J5'o:GS6brGEU>Xde%Sg5WOA:/Aq<BICf%FOG=sD@VVdk<Xgdch=Rk[h?jjaX9bDXc")Ymf!;P$@84WRIs8EI8(%OEN<U`?+&T#ARU39BU%(da$h1^5<V/rsI2ANkEI0=*e$k@ALt;,&$p.FC-mrJ\\1R.8k!\Rihla&?Pnd3\)M`8maeVOTKeE]K&l#%rTfR)q')M$eplQol%pcsKsZ/:MA08/PWbo4/$^VhRSiH!Ab>ba1_BZaCM.Hh:X].>`bIW@KdcBh2N#g>[e5<f`-7BOaC.hmcf/lo%VXBdhN2Uen"_c>\eQ`_>LUE(Y`hQhA+n\WWk3LO%ZgOPs;sB_MA>VWa"h!lqFL(gF!5[2:,0Vd$?pa)+7Bc>2F>]<p?kXBmCMc^X%%s72\7Oi,I:Isj6UA\uGX8KN+/S6HAFe_ng+=q*GlI//QE0DA]iUIJ5:0%C`3lG0_`%fepgI!OnBt?):K%Gq\\@dVDTBmIR9V0^C%TPN!=l3LMd.`<?u0iT,eC6oi=^dR?L<k1jbU8'qNj,$iSd(^fdY($et1d/d,F<e:ZI^M?9n_;+_,;H$FY(m]iJarSE5qH[/LF@=m%3-E05'X>lM@EJdp5:%<u*4`@bpN9pcLE1?"b#^:kbrMj&rp,g>eoZ\]J9gat2<?Qt\D1lj_MIV4Y6/6J7?;q(oJDHZJW8muf&_99%MXT_LRXe"o2$?#eU;q(N2Mqim%GLso.>GncM0:.\\k]l(YX^(Lm:R`*`u0'fA^>)B,al<j(l`"km'2"Nd5Cj"I!I-B-5\Y:&B)9!%Z10\o7.mR,)`a-PIuW->JE:e9TL1?8d:cCi"7Fr#eHTS'dX;&U5D7$>(JKQ41kSra4?0?W9,PZR9D>@#;jY?_$7Fl,N\N6=)OMs%%C%Sh)0!IP.RO.9FB0GQo:1fuBcR[2Dgh/tbC^Bub$W;lsCMX#ld9!t[];tLiDEuSk(f3($^!7SD5Fi4Y6/C<F9a\`#.kQCf/B`c"%9:&ijZVG,"md_O4AqaqgfB(Nm8T9)K3b:AnB.J9B/N-9R9GNbjc"P%R@*Q>9F_XMA?8in^187@ZWV&Z_=KRX&VlZ04#/n*AWf#E8%8SD-WcRqm0F`T4Da3(3QRUg$W\`gkNU-+1gj]`W=FuI*I"=IMK_d\8g/)Q@m])u*'R"?NFIhQ3nL#T1>PciL;Ha.a'2JLe?mg^f?%3Su"!Zk@4cMTmss+6)lLa*!e.(ICUBZ"b4nemG(5("F2/2eWX81m`RWHYha[ARHJ'b2q=5c=UYUq=e8Q8"$I!Y)Qrq/X]S7\E0?^%o<NT(_"hqpXf.Fi-u.EnN*pH=<j5E)R4n9OP[53;Ge/X>m$hH/"e7D;Dd34#-5P&O2oMQa%>,uWW`MK[laI<c6aA+c-ejs82BrMP%pT\C#E'RWAcT1"\iW]\>Jf:p("1FjdXC3>;9I@ikOkHFSI#],A1hhFa!MJe6173)(9<SF]G9?n2O\>rkYRT!FrZ.F#cfNuEk[5oW%'$p&GP$cD?5Nc]WmqEU:.kKB5#I=2ra#ZqBEo?nFbaKDSRh3b\MAm-8GEQ9\,K/;TMJJ$ES`$c*j=mT:Z%CjLqC-=GUtJ8)J7nVH%77aLh#oEH"XM-RX+^*8"anS2<_4*F'p*!T&g6'QolG>XNg0*_/b*p[0])]khHa2#!jZeDWd(YG!0=Q@boK#tc.r_I#cS.th%MN%$%IJIC.8'rtT(qWnB:)')6CCk>N8"<80!_oIVCJ&5?H;baW5T`[!p5[iFe(QOde=4n[Zr8MX\iht,m52Ng4*uc*ah#nM(?e!q?L$)!%TB8f3cG(s'?Xg^P<IYrUUZEiK0(jNdgEDp8RaY9n_+O0W!^Pa"(auSl2.>&MSP0fH*h8q(1UCYD3]]]BVh\0bMKQ2,lHj"j&\WYr%oa8j30S=8o)+GA3d%6&WR(!f#4P*PL-VG;'I:j$`)fIU)0+R!D#ak#?Z^&XGdVQTfJOdsUjVb/iftu,tP"o2e[O+c-CbZ#@.#KZL%m'4=BEN8bD:Y\Y8&R_%B_Te;n()6$dkUW$OLEW;@V9It:W`uY\&.+Q@gJ@47T`]Fi5]MpGfD&$2q9od4+si(O)#390&oBAqY=Z+?%0^)K1aa"XKQ:)c"PPO$8U-0VMRp,<Y^e?$mE:S`68-mkF&oHH&6?26182M/@<MF=bpAp:QM5E[fbi!:jd/_<!em:'NMq+IscA1DF%dQ1.QE9:g=bfYR8QO\-rMIKj^>J9*'Lu@m+`Ptd.h\KVOoum*WY?hWSCmjBnQJYMZ;%k,+FJT$>Hh99/Z7[M6G,*k(7["_9rT?ZU%hR)*N!AnQ&9hf44`ZC/*Bl=?4dZkH8mC,>g-lRlpFQM="c3>5K0G`,OLk,Fe<itXR.FO-#(t<=g-jss2h]":!P%/k5VHX1nC;VE7%?&3Pj*G`P?#PPin/i8I%,%,o0n)Z9Ps&F4#hmF:>25_TL.kQM6Ci8,L5sbDE[ag,B23ti#jVX#c2RM%h3XPEWqaYL:U'j3-3jB/&%P]!`HM=,f78+"4BY);L':T<)&9SLjVggWfb;C^7O9uQ&eGoKCX(Zu$2J",8Km8E)T=]E48enQYr^ta(#H\C+XN&[9h-EF&-`s3<,%N1*@alg8d`:""$7QBQ0`Qek;daVA,\9DOCX_7&lE1W@;oSi`h(oCP,rD#JcqRJA=_e&eFUHWl>5mC#HVZthVSES5"m4TLB\*+)`j%&Kq14`A]S-%/(gdS=Fs*FCOJJ?m_*9`H:]'_4olpX%"O4El\j@j?dp;4U+==Za=[/1%[#m0u2I_Mk2:Y\bl#P*ZIOD3#cY+]Xac*%60Ih,-ATl-K20Q+g,b#7#cX7Y-a14$RmUhZ5pp4ODOj.m0U6&NSZ6&*bFu8fTTcYb\'C\RcCcu8(>Lm)/ngY=Vdp0QR6tVE'PGe?%f#9O-FOh=Oi:$+[LX%r5Nl3QYc_7\jTL8_X7QGRZ%ETB25ds60N@/W-p<n,TGp\X(.ktt*9r,7+^Mu?n^c9B@ZLioHVhRpo=hdRm%2NRLE'su]Oaj:p.nJ1[>VSCLbjcr[T'!n-@V_+NnA2(Bnn7Wh1dBE(C!OLX<A^s">cA6o2SE'UN7BZVboVg4cfk*G%7'<V[UrjTb%-iY?(cCq<giiO=A+8J\=<(dI#6!R_$RmER!ND5&Fe1S/g%cUJAiI.K(XmN^)9m6EW<Y1h:%qGUJLp;-)B"C6mR?qHNlt5Z^)j/*9%=r'gkK5Bn/'X>u]h)E%k0^TW,G(%?,`VnM%5!"m1c&r1,=3_YgEI1nEr>&#;j_)h]<a?d(Q,B[jqnO'\93o_!M"K,(&ncd5@:H)A%PJFX<F7"k82Rt[`Zcb059Zhmic3(C1]/Iaj>A]sO@ZgoGZHIaNf*&5";q&sS@#RcnX$,rBVu;$"F"j@YQ5tpVr>p4(lR&1.2M,Y-%oBnT!0/9rZM-1([fqkPJ[V^bt$49qrek%V9!&Na3^JN-,@qHsCfqsUD68?s,&=`aLjj)qY?c(NV:)1FHhD1;<R4Z#do3I]@ABc=0%;8/QgZnMS9gp>1OjM&,.MuJ*,cL-RhZ_uO_lbM3><?+)I=o`<W&:cGJ&Cqt'!2`8].,M!cdT3>fIiKWRJjmL[`i79o4=sC4Sc.?Q%-&6A&^H(&<Xn"HmP1t2fr<GAo1s<:R8%%cMKcQRbXDR(n'pb^BV_X!S7_(^o9HU1k*M'7,c`T-!OL($0jr%%>r>jR$kLMFqSaS3.%)?4cl=a7tp*tmP;o*rT!(7AZeOTsOCFNOY(7V&/`-Mba0-uP6)N(&rWADT_4=jW#7bHQ'EW/VuV3\O&Ds,F*MAB#Ei7q;md?#6+(%@uu(]@-Yc]'#n@+c9Wq#\9UK^d,2Uj4sC(/Hks=U2Fp2V*g*_K(>M(tK9FUR)6&,<4G5K:GR&d"QT\d$,;P:CF0H++P4UY,cS7;C%dA7kBelX7Z<gJ$0cA^l;fgB`9[*MKg&ndQclt"I2iBYL)D%kFHF=lU\g!f8_CE%+u2qBW1IEXgbZpFQ@UU#g9cat`*k*WJLZ]]H>%4EXM-h6q[^&QqLlRDSY`cqDPLWb>-cRD8U#HFN3QOeOVcoD0FY5&?JpVtskE7bm-QlE'U9[Q/i]Gs7`5O6nPANj=kXb<WDh0C*G0%lF-M-ZCS)ALtee.7^Ce>7*qLd_jTkGP/#[I4ri]qj&D!Yk/1UYCDh,8\nfcB3.l4E[e/r:+3rXX1L&FUIb7)$4]65\gCjmdd%3dT%gX=38aN(:QSk+WXIkcn!@g5Ic+k8.W>NIsJP`X_b4+uW>O$j4A+,@[OG*'hBh8s'<#Mrd]U#\9+Yd\cd]X&X)8&'V_*R@6jL'+-=%K[f:VkqmeCg4RD:`QN(1dh"b^*%PMNa%WDibKSAbA8>s#dG'MmBU^ceMpm22*%04U`d>[D[\#bYN:%/L2jh"mr((4Ze$R?-=g&nR%CjR'=!bH[]UHc+,_a;IXIr_Is1/cf=*=u%oYjdqrWQi+P#>(^$1K']h/b>'Tj,DKc?"BbFs6_3Y'uAQl7OlOsgHHhs6.n[r.Y?^I%(hdYkT5";UPNAL;N].iTpK@:/#1N'e2fUEi$\6KqjBJP!.9as3Nh4"`_HEK7]rP*l1+St;3UVAmL&7'@\T'*hnJOa,:5-#:]jYQQ%E-Cb+L]5tbQ!noY8'Z\;D`G$pI-R3h<AcuQhTR%a7r6s)V^jY2Pi1op62LX;!iA38ma!f8g*+AZ()ICcd9dkGiE2Yr$_gm+Gt*(_%p;tSU-G>liLI4&<j`R4;<.bJ4)Ab0G-]J/@i\Gr20970DT8!6hW`Vk7A/[(=WLggUAtmJDI&VQ1Ijr$r?L!6ri]NF,M"Q[R0%/&.%F4!X&#siDT.jOLRgLMbmUs6kVZd,?`XS.s`2tO\g`*MYoAhS#,gN!,QM@Mgc1@0[C^jG(/RcU)'>:$n(U8CJL;E\ZX@HY<A>W'cf%IT[dFLQ`EM,o94bO"V5Q."0Vn]CF5GWcBnhmLlojT@J((Cd_c=BN)]u-c]`'$p/HYs&WI=RjG\[=_-.cJ]Ce/G11cn'^9&6g[CLQ%m98DfGP>p6[!;OM2C7h.,^0*"H6;%fh:egEFHt55?P9!/*7d2PlOggK;NlU63eGHMDb3)`F]Lr%+\La(o$f7n7XBc''g$TCj]6<9%"t+2%7(7s#h5'bsmnhP):!E(2qV>u6Psn<9h<%\s`@lY@Du6$be0_0B-/H8/)b67GDj(!-'^i*]G`/BjI[G`c3TAb@I25nP)/YtR%Nl#XXM4A;[XRCSD]55E"s6T1mE12CDi1:OYNO%@qm<H@0]D@GA*,Ki,^46]?HooTMgGTQ%/=Xr+%p6T)F5(LlWb]o*L\Xk,SP`'W%fl:Xmjm<RZQ?)5uc[=5TdhrHuf?U_eN6$UUlnk2LWtRf>B@C#O;;>;4S^BKX_:n4@flY`2._0Z@.jNeZdi$,-W:MTbPYGe\1U?=_%3X=hQm3%nD.$m^"?N1jQ1!6@L;FYC@AlmZ-7ST&P3Hg``B9Z&e]eO.9flT^DLZciUZg#\7G^#WOB7HiK0!aa@6F"eAkq"6k_e_@=%=Z/@_VDAiO#!#^gB%%W#SoelCDR/Mc!)WD:lmS@KBXPd#&,`'+kpQPC'1$i19kT\SB"0V%<ApCF/tJDZq0P#j&M]5Rj4e.o)<K9a%B6%jQ9kVs!q$\G\UU7<?#;@];dB'kWS8WRmPPHe:Z3.&Fa8VJ$oP6G>9s'=Zh,e6#?0q!n3[`L41HI+?7iR+Vpo-iV36K@M2(T`Q%5l#D7S+Wk"P\H>_7D\gqH](@-(T'*(Ou>*")R[u#b>q?34\Q(n`e$s_f.O7"(fQLZN4i?W4JLIoEb9Bt\PWp^i3o`[MsgS-Z_iQq%)si?"Cm$lpk0@;MYa:AjPq9P%`b!na;"iMr3SL+<oegqc(8o\OG?\Eq[m<E%Mehb3,)Si+h//=UA9c@i553=kU:X,9O(O_?39Mc7%p;!+<.CETU`T>B?l^hCVgDDm%!c6;m;nk2>\t!&&B<q8NK>#hqO`&o`pe`6+q2T'5Vi#>GU%p#Fa'!+)_pEeci<Gdm&8cN_5;Q'C%\m\8-iWq7,+6iBRd%RGM5$OWgA[^Go^)_-VfO_?-$CJtJ5Ifb0:]SX]s-Vj&:]S_mNc+0Bbuj],,kH$QV%=&Hm5T(`kW=I(Tuo1H%fi?d=#&9f%0!%dEYl."S(mma$/L;th-J$c!2bcQjmS3pR^p^bo=LY%E>3eSDdCRMcP]`7U)r11&@79kmli'#h`03Q<k-nk^$2pQ/%_OY57kg)Ek;^-j_qc7h^4rbk("L>N5-/q/5rJ/YbGN6ofXj%.YMUelT%H-U2PQ1dJn$c;t:rn*7Zcfa7gT10YR`P!='jcC:?lD4t%-8KBSJcFa>GO,'ig,n`2asU(F=)<A)[?DQt**D5_\D^3*I,)[t[(,(4e!oq-Q;;%1;r75sE:&BAZh+!`jG,_0iQg,)YCF1CcKV=j%./R`5UT'>h8*qAQ2R2uSf@8#aGo[__3aeG(eV9KQ>MkU(ndDY"FQgK2F+rR4QCI#`XtZB:jE"W^c?q?N39IcUG\`:3i?J.U-?NOb%I=AfUC6rbSkbhk3(L!;_.A+jMR)ZPbmsVN9A(iJjl0,LZ1=p!tBhW+V@5bAhf*5q_.A*@DFT],/?rj.P:1g>d,c7?cM0DI=jg,$o%hIW>!oJsD'gi[-E;Gi-\#AHl$(l$OKM%l8Bh;l'irM`"]N8Ac`BoZtEi@pmd4pTpo,AbPuWAG=Dfl`?/\cl3BghJ2p9P`VNHn'n1%j[D,NEAa2Wk_sEXTuL<t\3cB!B0BJ\\4R>U1_A3I0g=:_6htVbds>HD]"IiDo\ujShn>s'c@WJ#l1?JS_QWM^amFG(06Oe"oNm(s%*ZWn1@`QnM9bQ=Uffb>eF2!G(N[je-4hf_"TdoFmCoR?eMb-+&h`M3`^A:I,>+)Hb_d`b&\UWZ][eRQ9_^l,_?&+Z7#HQqbc!og+%bPSIRVFZcn>EPLK&t[/4nlf:?G:T'D__$o.L[%$Sg=.sQn+WBdNDu_KXu)$O+'+`C2'\thRF:3=XU.l;.-BWp$X[L[Gb5aBb6Ob%%ddl5nX,7V50b#XI;ChE2n#c!i]R2P)$F@$?Hmi]!o`2Z9.DMYdnQ(4iW2"[D4JSrIk)6r#o+af-*C(%1VTY^6-DAa=]\_jO--VK;%<$cJA4t2B7iO2=J`@:SilTk^'NKY=GAq57idooB;>DC@#P-d-N6'J["$C`t(^W@qpCC=F*jM*i_Cq[5KDGjKL^!n_?lQD?iYeL<p%)EL8@F#qjACdE-,Q+#As.Z:AbM]J89l))c$8[mpFXFCFOCQo19d4tP79p4j\oD.B.lcssGQHR,3d07\qD`4+=;i?'-&rG35`bNI-%1c$0!$EN1_SLK&0,lmYLc-b,Q@^(jOf"iql@P;/ZXY>dAOUT+MS$2B>MOU5+CQt#b0Ka8pULZ=>m/>tTerAZYO_(j\L/8ZD[YN50%B>lmP(UN^:f$B4X"(`8jdr$'Y=CQ-5*9>=)OYEUPqT-q02QP\VAX%/3S]BI7KZt"=!b,:PKhhqe8;<[4cqYN[iIBH;&.B4nVtPr+%M48.e4e&'ajtr3ZX<a,!/N:_,A4Dt\J'>/i3]Z@gD3AW49;cS@41;Q:2,2fV`Q%q@$7LtmnA$Z+hg$]Eh46KZj(Ga.Vc1$"e8`\@%pg.I">@obnAp'#lbI\WGSQ=F(@^`g0)mh-WHefRY/6=G_VHB+52Z^@Q0!&47h'*6RWHG/rQ1gOq5\a>'joF[Be^uD\ctNt4AbH!F%$d`G^eoCa"G,T;?"_cp`RB;BaQj%.Gl3q_6c1f%8aTAhM/S9>E2U):[U8O./0[$_AQ3HJ/#LL7VhB33QEqPF7!AsG21Sd2"^&%&k%I"/\hD=^Er$o:e*IOUmX<+1QKo!o_INU8@[ULrWf_+XUfQ,N]DQh$hQC!ik"?-7qG%m%rB[\K&^V0j6=?hq`8q:;8IW)9:Cm>P7Z%QPus?ePEouC_p_ORG[;=;'qXK]m^ol%J@bgr=$<HK<q8Yp\J#_L!99?D0E+T$!0a.qJCL9P]Et"FYL]#Cac4UqUt"4mc7]h[,nE=%>#,(o]meNo6X8L(h!=,cPA<\#'b,'R>LP6T][tK@CSn@p%I`sGbIY#@kA'U8rN&(+hp,W\U$]$)5RDY#Vj][pN(p1NbNYTSRsY+8%B.pR1GB'gY[A'G_Z*!HePK1i@<kgkj5dbd=TCpbaZC8#r]ma"oTPqk'mr%RdgHj,sK7!PT\;tQdHi5?@<dUu-J?sO\]6Qm2B(u.)%BAm<6\V#8-9[coWFK;%W3dKP$H4"/-X.La-Fc1VFXO_)`^RE\3h1k7`#5@ssDn%^L8H$H>IRa-;.PDEK\c'3jp9pf]]Ec&qr>a,]%/ar@rdh.RXp%uXTHoBTu3PLRC&,5o<5bY($hm5>Mp\O-f>jW0/m;C[]Z[;YP2n%-hfPU'LZTc]fgrm&&]mePAqC0!rbBs2hf:1$.%&SucsT37U.^V)LrGIgA`aaJQk:EOU!h[Zg.Zoi!Sq<8@Sp\Hn]MU+]-r9[fTPJFVKWumc`]=?I2NP.0XqJDF]p2"fQQ>5PQ=NpAU%*T$*pD<Ap-p"S?hQaXQWDr^`irfi,KINP1NG0hT1k\4;f/ahZR+:He#>-?cKp\/3C*:)@u]me*\1q_?LA(es\[(=cu77_TAYFkJW%-e"I2LA1OI]'Y;_43Mn)^X^Y5gepd"V`@P]Ic\TDqAIC?oiAgJllO)>ZK;GX[/$ilos;sZh8R'Ved8Ts)YoHgqO+1@`U)qGk6\Eh%LeSA[bAdO8qHgoGD4!QElXr>CncFiHlroVK8`/iH\)23bp\J#C#OUg2QTo5X*aYt5_p*i(NXnil([IFeC-Ap3A`f[ll](YMZpin"%>)j2`W%kCGl&><@M9.*<nnCW+RAsGSM;E>CKq?o-*CSGsI*O>?*`+@'T&AAr!>Bl&`^t<;:ZXUH8tSTjho$1F^WlQ+]RNdNO$8_N%%fp$^lp&Ykk*Sd03kPF(b))_aAg[et^+s"<EEmL/&$Kl"mtKZXb?J5-nEn.okrEc%R<sU%RK(Fc%j0(X[4CdH?gh;/^Q6+spVBeZ%cPM'(lM$X_eEGt=g-,%%IQul-hK`]W?@/9Hc]/KE^9Zu$IQKdgYPS-(_=H(LD@-n+cL":ie8(,:8?e6HE4t/Li(<8`_j#2.3MuH)%^0o+CiVe0'Q1W<;M5TsaIR@p'K\"n[OpG/#SjpUnO]XKO-XCsur/&"to>US@>rS,*2jPVUr6jWWl=Vm,^7-;;>.F\Ih']c0@_I>/%VL"p\(+,<iMobu??67DTYlg&iYM,TAIEePTmJc-]4af#P7n\UWhcoK/3h?i(,e];'6TqKsN5%jZeZL5s:80+?Wn4r.6+6rm[o9EN%51<4Jkh9l[NNH+K<iTpXeoZ!V2bR3"U,Th:]U$.Tp]A_<8,<-e]Zt`p1=>4*74,V0*1)ic_qX0L-Ir1&:"&.Nj7@W+,'mDmkODUX%9<QV5Z,'igV)#bA1<3D@*;_BjPO*Nt?">U\Sj%eGa6*g+"Wb;t78VEMLq*+liFS$4-RQFsU"p!H9-T4f6KC]:`VOQ7(ap#h^gfKW%Z[U;Ze_^*1$;Nsu!4:D5*$4\`q86+;<911p!4K`I$R+u=jK"fCZ_=/n-Z1?F\Fe6'P09`n,)BU9][EiqYcYPFe)*"A?0+M>IPK%?%PSYnDU7D*Lf`ft.[1)n0Idjc+lIR2jHB7MC0-^1?6ah#s@?=)@?n:26%)$%7&l"-tjm4$OhGLN1<\K7WH\YDF6^?@1nWY<45SPF9%b-C@'.>oZE;:a0_D4d@DZJA)[gNO/F/BXbOfgjO%U>04ZQ4>m(Qq,_W4\Se5o:KTS&XHq6i-h4:7='OOD>UqK\30N8<0gLH1%SSh%e]@(#EW/Sp"9V).8NR'%=$9R;RM2!r#MnskCSL"_Ao"H"61M@(bFfo^.OT9ZX%"F#BLZ,OqU12AN)o+Ab&`9C\AC'u@8':rE0j)+%n0oh_J1#G&9Y0nJmV.#W-.>q?_O=njI`7OY498;A*fKO_.REuK@hs<Kb29ogatK(C0sjAm+LgMk7Q'h=0K^blLVHD-3rBR\?aMjq%X'uSs!_8@XfG?=V]g`&Nol2e\'q]MJ(HMM/NjAQ$9!66'lK\LAIp_XV=VF#M5u-@e?2\f!Dl;%=Ii\e#F69&5$g?,I,WaSi4cCC,%a%M0W72AdF6-S7-e2U82O1ZQU%U4>,TIeBeO:&j@qai"M&lM4!*PQee*)VQ#K*^jIM-q-k/N4lp7B]*RJh\!0iQ=O4qE@FV+5/XL%bD)D+QQeEkA-ReZ?:?t]L8;*[2F=373rW7'Igr_)0),3]-?3V.atQ0JndN\`i%^2o6InZqL5;Pqb7r-1eFiR;A>#1Y+]:d_D#$1;%ko;45V!LiHHIs?8+[>h1X7=-daabR2XGDRO-qrlqG$MJBcgJV^pIim1;#O74%KZ[iVa5t?73.1lrnslV)C:n,q%?Vc2dEf#QTcoU%*UfeSYaeGjZoJ/q_IB]Jnu<h"m[b!?JTuXXbn:Qf@,TL-Q1>1meORW_pjO1e3HfZF`WDD5+iHI\_o-,Ba!.>GA+>DQq"mAn1S7;L%jnFh3$]hjTS`]DEa]sF;6'k:jZZ?YjHI8<-EMT$VJ[]p+-!MgdQu&FWP8ZWXR=&/NG$,k]Hm(*[(]NM2U%K6B_n_tY_$MFs\YE=k%n)Af?25lbkk$C%rFf;OC.33`dhN&Yh$C\=``G1hXTB#&W&.Q$eQrm>Jc?t=+))^[F%cre05isNBK[C-mi)M%]`Q\2C'nmf%JRR'$%h$nKLK#aXACNUK$VeQ@<U0A+\F>Bq<IJ=T_!9:B]3os<P^=L.!],:l1U>!"@Q2FNN?It'/g(6.G+PE(S+<oR%'(>&X1F=5>3=W!M%6T,@,FS2I,`!mh=N@/AT>g#X/oGDF.f"?]/-XC%/NX9\T.`1As5pr"E9tb4jC=4ANI&jjdSJlpYg["V"!s+i\*Jq.g6NQRa=;OsC%Bn:uFe;4C;O!3n#=So$=rMUKT<!QX^m\k=,U7*l_^,Tss\<)_[S@0l:G(_hl6TApM3,M#BD*th#6no[i!#m;l+QbjgoW%IQQ_/Xn%0r[W/Z&q)0/;]ka6o(+#LLKVWdKqYUk&6V(=<EHM(fP68K%4&klsUEo'1[)E)Le@pASbZ27r2I>gPRt.8#Q*rn<aNGa,`ZUG]^3C%PEW2uVuQ.Iq/0`Y)HSI4\tM0+M0bl'RA^o4XQ!,`7d(Z%dr,R$m50P.cMNJ<jsLMK>hr?V`TnX`?o9-ciI=RKMre(K8X8V?ZLTVQ%1W8CTLfH8JY;lZreaP&mmt.?-CW7R?GSaBp`W::Jp7[G5]85OXM0T6cNktQ#,YYgjK*rs/mFO9tEk#IK_<=m9Lu`!8=Ho=_9IYXo%7gKmMIun'J;9`;R-2lc[1QMbZ>:qlY]*IdNLISl^5dttK@&$K5l@?II_(l^,2S-X_#sK?T`Uj7^SW/,@I$1,r>4Y:Tr:7iV!K&Oq%dD/EGY<#%iCCAPX>icY+k,4$rah=:PA-s%)2hL[;oY=&5<c8EeD<?`Tk,7j0lNmiI+F2u%kA(8fI#Xfkq^M8"WY2e4qcqrMYeU+^%$K&O;[*NpNq,(JfMJLX<qXTMfW`8#Cf7j`2iZOf+pkTG\I*^f_+-7AG2Nt/V'UJnY]MB!`-o$u3m&m!%&O0Qs""SiEK4rdL56_kK%!iC4^o-)B>4>q4u_5^e3S4<h1b6W*B#,,!-bGj.1EUcB)_+r_='0CQR^*NWWr';tW,Vq(opFE$8+U*hQVa7>A\23A3Q8Ljf26C;)%Zo9Gm5`TIE.o$g%S`M+o=AJZ(LL+E3Jlk[-@7&qBK]5m$r`QeP8#2deNY2GlrpR3E_6IfEE$mW*NGsJ2HG:A@k;VuuD_Q0d>fX!\%p7,\9-CnjbhX/n+s&g,7mFA^.=h7Q"BXX3k5>MQ=DL:+%\oC,.pkhuS0lc'GV-H(HX]a[1EK7n[Z955Thk)e7hon`^=olVQeBtAs%lO!66.P@nPfT(2>U!M#R-cD9b*a`Ij6B<e<S6!51*ddhe:([U*L$h(4.L*)V:V&Lpp6_"Mp%#**>C=S9mk`?[mj))Y^0VR]996JS%FNI4].;n0pilJa=#Zj`hFWB(q\9!4^dL(-bfb8[J'Kr.jVe;&Dgt\*Fmci]8-_-1PHG\(IL;uLqV*3eZh)h>u'(sqYo:;9:16]Mu%`2r+l,%bUeK"lRbI`M?sXT'KcTnuRHkJD6fk^A"'PrK8B@+$\MNr,Lr*b:%+85Oit[tR@d!YqB='d6E\q89-LZ_5u2c26!N_/t(=%Pl)^?TI(&P!F/t,<@4NUif;<aC&(1H6G9&O@d,A;^<k+K**c;p,99\-W"ZR)gE5NT=FG`Rm=qo]<"`-k)[=8tJg@c</O+2VS2$;k%1+<5(`^*Tkf]#@UiV#Abqt-q>1hgj.&R5Va"TjbZ%$D)Or99lpB*&i\c6OUQ4V&`c=dP`?OT[4\p/n$@b=r+LM<,AT`,W9Fs3CAX%dS4VDfM>>M%1b$o.ji((4,`28E.E-S<T1L$]7B[lW"?q'do8O.E-V;Gn&I(ofm7i47!(t_bIn&tKR`sfB-i@9O/W.WH@/psPuX8,%2'ZTZ]-i/Z[/J0DIPpj@Yo(JrP,C/Wf+2l3f2r3uoG=SOn1SKh><N#5(F]nTI#+Fl!NUkS_hp2W_h?4*9!&sh3GMU'kSW!Wa33c7%<KR(Jbj=)c]?"G.AL(mK]F\!rj1g'9JQt2:0saL.,$@k7K`#J*"#4k)Wk7?ukdK4">'CXlIXCI!Xh-<R*GBA,h2N`)G1t\["^#(g%-M'[QDlM.pUWQA7r<5u4`JtolC`hpdNq<(gjV&B9bh$&]]a#FAmf/0F.iH9l<tAcj])AHmUT`I,5.^#>I2P[d12cWTMmT2A.fXO)%';1>U^Sr>j,dJ^l'nHp]N+qPJM"?[KETC:!d+VQr`us9f09nGF"&dfk08Kg8:rH$t6[;LR9#T"9?:S$[oas9KOg7Qs:)gD.l/FNt%6t\Y\':Hud8B^cV3!"&TE1BPgOS?[LV>#_.;c_-eUe:7N!@O)H'L!If`(/_8`kgl2*09R9BR/[VNg'>i:$BqQ^.?hJh&*+J&9t<d%/T<3$[umK=^CS6p=mn-SJkK.:FV((5[(&ODn;=Rc\Mac5>IT/)fK[CHaal]]F9@<'AVt1eI-A)4-Fs@"qTLAbToX^#eG_8#S9UeK%O8PlUB,57^0^9oiQWT`g.a'Q36ER)WRV;$_e`@OC<6m!\o('%DqRTB=g<DlQgrD0m5uIIETitH#U]&cAgINT,Y#7"VI9c2o4f?Au%JaM'<m?b8E.$#X7<I%POj$t(cU=NHE>#]qkWn9TeIn;e<H54g#.\LW[!)#tbAH?Yk!nrqD8>o10e?ga!D-)7p9A5.,2GR4,Ga5&%%M2?W$"f7JpYhLInYk4p]%_8.Qk#-'9L3c"i%/flNg&,MX)1@F&;o$9F,#MTq2R3.T?U*@sA6iXD9XV%mA'0S6;^EtX<d>"epHr[E%02S9>4qu9K;nO$>\YSpaB/?NQ0GmQLVadj)T1<TH@)MZCnuE^1FhT-E]6kNi4>dIe3?Ou%:mfZ,0dp6C[HD`Rp%<qQqcNcti70uK%$\3F`n9CF"@=Lnmo!]q3?6KO;k-2]f)u(&eYXeb\gjnd:HP7^^>OM=]!$349ciE>=p)S&.@S4!`88Vi[cH/^Z--V^7"ii6%_hDdq%j=o,R*'KN]MYrO\o1'`;n!"K91n1h:D1kJoj!;AO6mHqkVC"95dM3$)UAlEWQV<W:RA4Z5E8EVJaPP`/X6`KQ6\kZgkIqo?D=Wph%L6tX(?<]A,3KoE1ejEDGr73[A[]8M>q";X!hF=Q^V3C(M^-l2MR/F#&@fXrm%e%<RHR$)';"-$JnA@1SrmaiUX[NI4L7K1SU>^rW%&pO!6lIUsk65DHn#*JV8a_oMF=@*!pOW!'3]>1^8-s(tV%3-9P_&+7/N)AR^P*7)o7.9*@hXPbGa\)\k2-u`d.Gq<kIktM\Q9Uho%YJG>EE@uT&nIr2I)(,6M@IDop,P*OAL>WSbDFtse@7+hLqV>pX\6RGi&YWqN8XR]*Zt#nU)D,3a9Gq-_#-$&`G,.AMlW-%XEt[2m%X*YG]&:P#H:lXa28]s-U&ftCE?Hs^a3rRrMf.jekk:HL5S93t.VT\:ZP$3(?R\:)*B<Ku.9WH?e\oS\R-N>gi+6s]tS05?%8c0+Z%(/S_Qjmk:(s7X(*':8GLR[l)>KD'=>SM]O0\5T?iq5X:1?>ugt^?4U.\C)bS4a-^q--RadL0&g<55g/cIC^8>(B4@3Dq@VX0<g$d%gd##g`CTBHp]&%H"oS.HU49e#pQbXCK5l+^Vt[?5//I1XN8S=DLqq#!pK1?.B9R<o/k@a;<0.Y/*Z#)e4GF3+Cbk6mj,X<d.H7']%6Tu,C$m_8%=o96U38Vme\2k^?=9]lRn?3tGX-t5G8-0UD2_d4IMaYC`[L>;T*%p1%GYBPOO?(ejNiL!ZDC@c[#gY<>Jqn^u(FcKF%,%;0PQC\_Z(oMZ^"\G#V\dN2^=@,@f-plumaX/r@+fnjtM,-&PnAf#F#rsGD!ORMb!*Z)u0e(&6J-?@[Gu=Zp_a_-=)@rYS'8_W0%%7Mn"Xt[+?r^\Z)g/HN98Ss36G`;&*'1oEuVW1Li9=,h[@3S8i60]^.Uqo_u'P1m,[`2H96[lF6@0ZKr8?cVE!Ki7/)/1EA$=#p8%%8;G9`ALXTSej7L(abj$E._>i1e7@8HA][O!nA:t$e8Tj9ZD33&K!97'XA$]K%1E5/l7p$/jc(m84^6^&I^\?&_os/_.+Q#fbii]%-5KMf,c9SKQmm1=M$2TGitGAmYT4+QQ!]jd,M0CTn:60cQqK]bJQP_f;eSi>6+c+rYSSoWO2*q'H,SJTB*9!X#o1AkU^7+l"tE0^%'>3$G.#>bd_Zdj!dRO?L1)1P/Yo"Yj<Q#7FRM5dXnt_'A9(E9^&K[&hbU#PkYe3ka+=AC]4=4h.TRR[n8SFZn?m/lJ,t_+oP8O4^%)bc+l5"6,&iCWN1WnU>mP-IkT"%>>AUkf6Z0nH0W.i1_Y+FSp$5U:Bc%ol>$/BLJ&GVhr6XI5m6)Vf*R]t(WU7plH@(F=bpY!XI]%N-#bX1X>M_JP6H+<JmfFU:A:em1Ea-E)DbuiaN$%LaiEA0JOj*@_b'a+L=Xk1`:s\;ArlP876\=-r,(\'aY1u5J`7tWJF%u&1g":%==tpGOpXBP_",.2Bg=dI[0Sp9,)ZiI(r2jR!-:L'KG8E`!)\W<&VL3..lG=C+>L"8#>i>OerY,&*asVj-uOo4(f=`qH&@E@<2B:e%/Q/I%#R$'l.XM8.M01-<#M]V<Y*gJR?mgube.E=5Sd#g?fq`5Ca@/XTEH-gLU^6#h)ol;3nH8iLU<_^pi=`4i5e$goV!H)a&-HU7%!Z"l<#r'&WU'6naU4qbe!_b4E7L0@\$!N!JJKVrh,6UHN6.?/H0K7u22*qAk8Dl?M,Xc+HKN<o.7EPnPLG<KC"9L!sa(agsTV`t@%-'+,n>*FbbV%,.e-U:(5?BWcrOBP'B$QikIN>rTV0qLs5r;oq)2Fd@E6l[9":^;keELMKXJ4icsQ4#*$-5TO"9J)Fg(_cs#;K>J!%3$lV<`JdcOa>#(Si]JO-TUXT:U?!.&K.mm+$`QOV@L*GoW_s8FJP4!2.4.Fq0h0Xu&Xg0X.AgT@`18ABJX+"u'u#oi`$A"i$pK6<%(f-qVDEs/A.g;^jCm*m;Fb#&f"[t#YQm@RJ,-ZD2184mWQq!aT-q$r6knn,n;FbW-$q/^B2Dke,!+;j\RY3@sP3nE?is6V=,cJ8*%$:L"(dicYlc2pjQ`'210Lq%t0^dA1_4X$.;@Us0B+<f3-'U4/;%;"1FUp#UM"[uh4&Uafk/<-*'"Ipl-:1EYt'sU==3fZWV'X3tJ%@2._LkbE_fr[9*#S>HcH'!@Cj^^ku0'hhLqV';a!]VHaI<g08F&>ORV"\HRl@R;2cO$R-X"@h0;5g*]W(2K1oKn0(U%U+T,"uKX@%KH@cP2M%K10bt]OU=);m&MRthKuj0XVCRf&,(l"f9u'WNM]pW7ck%6@$_3mSW*5u.*^37'JqdeEbL8i_f7kY_WXp3iRuk]@f+G7A%WBfE-e-U+(iRK-K4mHYei;kc2g(QuV*>O*E7G(GTP69OV&i%?]EGT4P-NU'>fHg":5g#+d-]U$A/k@+1KF9a\%p1qHOQhW"('+p`%cl<W:gkRkX?r4YC*%jc-H0#ol"&gd(`0@!rVML(ekUT\C?[..g,m5R?Lk8MiE:\H4Y,Oc,_\*Im'ehb.5D!$q)iXV)-X%%M/6*+6%8MEOOM&\#\Yq.Wn"YaGbDTN@u'I:(M&2ZDm',t,T!dothKp7]b4i>>f-&F#d!N0oG@2@N]jZ2D/+fO$$5g^&ZO-l"3$_]8Tbl2iR%+9`B6-"?D?oF23X4o&7E+INn+fnoRCC+Wrb6MZ;7Agi+jVAdE=8F3YM!bn6^`ui5A(:er7'K9VK0^HhW+soe`&oBp^O:'Da.7HcN%MZQ=skS#2&O-6/ZPlfCUR,efLF\lb'W-,qYCRD+K(t<<a#uO-S;)$Q8&Yf=53/1pCUAu$J8W?StMM,M,2%#uV/02k]J-)=#a(_:K%MF:54J#[UIC_S!O9N!_T=DW=^7KF4APP"@<!hRf,"B5sdJOQ.]l(hJa^*0\r%JDP-3A">CJ.ogH.BeI0$Tk>!*`U&h0M3?>G)<.c%Q6@m=M+`PJP'drkL(9"<X\)uS[3C`/-o)8i#7Cu/Et6,$.Su']NlWXt!iIiRW?[UYP6jhg3&InJ'NEm>V+<Ku0``Si*Li_#JE7HO%R0lAlP,CuV<5?L%2[^3<"aVRA*d'g?FVLuTMe"'(q@ME=#Wi]pN-N8gU8Tg+'t.--+Kq>7NHiBi0i;H!;ahC]`Y([/b!nLFS4laK%4=]9G="<k_"\',.lC`F"TqFO<'H5-udQ$=>k:<[bOQ/u-IdHN`2+>YQb!eji`Xl2?@H4j4K#e;o=hsQ=W;s=?S,eQcWB(+M$7Uc=%nH;hlLj1+iW?U+q"GK,m#R/jd5Qu3&@`]lK@H'<,=n8A*=M#d%_'Vb6P&rO?bT/<*^rBLk2dhb,*>=9sj]JM_PYEnVIj>h=Oc0=]%=Bak1/YT&MLm/[O4&?ah3+_'Qa<j^$rr;]+X@KTA\aC:+J#F.b,6=T\?QM^K)j&j*%G;YHSd'fc6Ao"-?ks+KpWdhT7,GRVX^N#G%Z@S^c#PJt!2qQ-lfOLsOZjl>pS!SY"J3#;.Pj<N,Khj!@hmuoKjPpOiGAr1j#J_2p6.7'/F3JqNrLr0;R6[T,cuL,Sh$KbHYH;hA%/AVm0Lrg*&?ZN2nj+_V:[":TKH_!Ho6BJS_@VOH+IKNEXeOK[l.H5M/UUSNOCj`b&O,Xa`%<OZt`$.GgN3hr8T?E2jpnKn<WAV)?%+s.1[aoS`io_A93SQ?>b6*7'#[6a[F00h6dXfd"*D9P9Y+@!5VOGtQ?P`r7$@A]J/`9AQhVf8P1(MM:@ojNqG9;J`Co=Ser&uA(1%#cM@AjQLTj=d!$,mHUKrQ0O?43ag9e_Wne]as-Z>>goXJhA/7pHEf+J]\'h.9#'br!11E0K._Sm!A`5<!UPM!f#H<hYVq2Om)@YZ%"e:M[(Ki@*XmJL,76>\06(>P9B%_4UVC_F=ihWh;AYF(g2]CajFYGa-OH96uNCfJNirDYLJaTQI9[[Kk!kk-#%N&'AHog!*+PYZ=%`<!.1fH=*mlqUfPYm7l4*IBP3)bp(ljL1dMha.'B7oWkaI(k0QZKkPeei+t%6D,M>0-E7`+:-UF)<D3=)Z`mGU`"qn^];<gU+-HZ%"A*<>HEI;Xp!IF"V-T-^Rrp[c8C.W643dHXUVN!i\,k1.pX6,^#PB\_)R*W#94/<E$1G/g3#?O^p^36.+lsXK<m[iqoP2An]M&=T%/9/)pj+Z)if6Oj!(2n<sh$AKL.muu$a^uq/<O_..0`[nQC3'JW;c&S_JQ<nM)M(o>m*aYh4.C&t?+%LoMJqQ[Eru'<3p>4d(Dq>B%rqY*+^@jn-\Q1mgrs8nmCssg7/BKsoas@H7TVdUE-KG0;AnF@SQ4AoW4dU8(B'.\-]4(tfYq<qn8Z(A/k[`Y-0fGnr3C#bKn@6T)%G,CXX88%j\'JhGc7BN*V6#K,VKLA+5.hu*=FZ$'tb$W.8/dWPAosIbhp6VrDYi"XeMT\%a%-ZfW3K5#O=lQ^2fsjGK',j._)a0!(%YhVLV_D.GJ")%`W#Co'/+e"Y*!7=@.RP5.N!0JB.OldL&a1:+XCJK]V#Jf6&fo;]rdqOjg<37qeooirHjnjjben[OU/;DenlpY#N%?SD#@5FYW9%"?`$\C;Bn.HCiimbQ7ei^CKgjN+h)E3m/r>69L]=AFo9[30XjV6c/"cgE*,eS@:0mt)N\J\q#0Hg!GZg/pk8A)T_`%=lS:['5K$kW*a7OPLq#Y[%t+MDup#[1g+!1+$@9On-:N^d*ddZTm6-UJBTFn(Xf4-kQ`"RFaN29TN"Lj]ZjoEA\s*qF&Bma?j(b'%ZpAK)E4K,b`6cZC))q+<q;e.AC^^iXl'h&.jbgLXX7HL]P7-H=k8PgH+1HLY:_$[@Q5W=`%D\eeWE?;]6*b*c[!2XWWNea.;HgBV%Qa!/\!cc%gM($W?4;WH-'T6g7D>&&f1Pg8=eWO7;b+M%7E^lb6m[51O!H^KP]-U+#4BO:.VI',i_"eTYEiPu%AlK/1Rrl&@bX\i-%n,tcPWTk-!CgI<HF0k6djK&Q#F,Ds<aB$?*Y<\G7@"Xu]"sAT:hFR@]N9nQZYGmL6!CCW#!i0-5\!+dBj`VGH_!0Q/mu6f<EoEjr%Meo+$jc7m_CkmT89/*8SH7n0Q^l.A0Z`j6<ZH\H$J0-]^_SqiDjKg;"#Hp-$1rS6VlPeI/,[\)&qRJ\9]#8;EfP+SMp=KB05R[a#%VcCu;_;pk#Ura)(pr[Pc6]*/_4%M"FS>D[5Tb2$s]qq70*O+>=E3\%a,bqk7)2p(B4*LE%k(^KA@P*ci!Dgc7\Crbl(BA1Wp,/ms%@38k6]S#4\#I06ad%LqSEndocYT3<.CsMG32o5V*_Z9hi,m8A>X^$5t37"k\(dq0Y!P(Ui#C*QD4bb3D_YOF<S8"/8,jc'OGbV5b%omTu3[=*2"iYoo=CVi24I:T"$$c4f$DD$7']:@#W-#2Loh!p?,H%ROX)Rp368jSq?]\e840(cE^eHf@72p,7'j1+lG#<]\mN>Qpq%:2p@m4'HL(2@t'KeQp8GiFE'VWZBp8[IH<?"UYX^l/@BOFod>>3rm&p%,QPHfJcH:g^lKKcLq,<KHqP?J`8`ZCC-)bfABu=D*"Mu%/sQCe5nZD+$T$JPG"fol!LV8r#5eNgIANK,cn@=a:7]L?CKhRijM5"k\J?FoC`&KuF[fcnp@#^6oT4Kn!.oflUk?i.5bQ]?T03I@%"102`lpi"n4tA=n7W=!#],gj)R:(=r5^mGZh'T;HU(Xf(!*uGAf=1(YG`-H*$bdCC^dUJ[+Hf$9QKGFn0PClM>f@]4n`][m#?AZk%!.&"&2DSCcCuUpkkpLooi@EO%Qc\W9[QKU4%^oScglr]0$uk&k?CrGhXAC+1Hs[9$cD1#\!^uIJ5&:e?N1dX<5o@^'r(5"*?&,pX%1V]Y+cOXB6T[eiO+B>:8H3so4Y<3u,cjP$hYlU:k?GuThB(<Ck\0q`h2VE$0P>)U\O@qD(>PK3QC4*K\/e!p/p.rbLF9R]jON<k+%RpB<oLBHmZJuFL5M9lQZ5[Z@fmm]T<T)`nLbR4P8S]lsrkb(.m-K/+#<'akP0-T.8C;Kbu;k=0o,k2&\C@d6bTKl,8WPst:9>UlY%q0"-);[kNgDo$B/$KBtFj^tYh)\gHVj"WT]\4@N$,,&L]HY`/`n9FS0ZWW5Z]eu49661KU-ZN#;4jMN3"*De"dF#=6]KL?l=%2Z[%5FS#q3=*%S"sD?02?qTQYnrB&I*tMITL(;UpY(O-6Da60Ro<d0[CcJc[#*("/-*(p=K`//:tbFsm0[*K6KQYELBEe*<6eeg%lhtr%6J'E#2s34aa?\I:]j2S!*?ImHq)gbN5WsC91``1!o6,L%i`/%n%"E--QUQoN.c68)K<G%.Ze97%3$8UR""h,!XEJaVH]dL"T<oti%YN'+[eXCb*0$4U.g?DuQB>9.-CI!]9E^Kr44Q(7brTaYu70e6gIJ^b3*Y;]^.j%KIe7X'MV#_drl)/%GIC8nGlDnjk65LVpTPn,g%aLOL,TLph.!3uUWejKL@'j+_pFu5q-gnb^2TM/gu?])gHO)_r"OW="=3"EK<"`e@Za!jCP-2A&*0<9d@Dn(rgc<2*2>ikRW6X:g4%]Q%M8:;X=Yr&_&l`)u*T\n5ihL!MI%Mp5BTcaO?gN)73)YlSqTp(9PDi[/^pg7UdD8q:"f^W3eP-<l@E78%^n[TpV2LB2(:RN#HU%lQq'u"_:"+I69fJWW:c\k]r]qi(53N$"L>n3FXhr2TccPZ)[sG7^lq@"?m;NPC`3US=g.M!i&I+f''BWiQNGUp@F^HE:hol'NM=+%_qM.lN]'2;r!i?8)!i8>fB[2JEsMO2Hos]DKY_"d5NEs)_MJOa9\"hJ?lJAt,W8)*T[-iJ5X"3J?=':Q:DRX&fJkQIpj;@O+Li8.%h%Q`!B>(]U;XV3j66>p7-O-RtVgl?EEka6^q"<QQ;l,W9d3Q0a/d!ZOK^n_MZgf0qInJ&\pmPBW-K6BLJd[1V-RbDQE<0YQo:O8-%hPi9`!1Buu*cf?B"0u(-B[I7+A8@Y#n\?bB$dhZAY]I^+.Oq+7*?Kt",<oM-"0F2;TbRQIbR:Ng+H,/oZi[0t-50S!=[<2Ed;!MB%p@q%Vl3MI)<P<@md;")3oC9n2X@P*a-q!HV",A]To#,11+U7#m"g#e%<WEkD=t>>.Z--"<^s!AG]r&]f#ct3\balIXRh^\,(,TY/%]*qc;Fo5;So9:a2KGj.Ye9,Hg<0rW<"rGQ-O!=k]34k,Ul07SW6Na/_J?_r<(\=C/lQAKgVKmj1)e`.lX9Z,uTMTTeB`-q+P99n-%4u/`!NS"\X#Z@,+7/tLg>]"O?Xm-'>gH,KShFscd8PTUsd^*Y%7%@k82D2c7V(&dsCd<]n,eC%EJO6$=.scc,Gma`lWUM;=YR:^g%n_&Z?hTW"W>$/IZgR^@.<>G?<`bUL*F23u]!"'&!j6Ngm_&>%=G3nttq1.,h9@Gm%4u93VNn5(t;30=qqRoq5f,&lDLo*.<?hilA%<pnT6!q"U+4iMTX^9P`mC;7KAIggPV1,"1<olZAFD?GFmha+]4CBBH$kX<T[%*7uN]+?pEk\s;4r/]/^c43)ccJL<"FX%W50:&1W%R0j_CA26IVKRT;*P=]iN12f8P?C]+/hqAH/N4Zp_#PP]X=#X/ra@WNnaN6=;)!\s&!>*;2=r03>>h$?tUt.uAk+pR2)V1*UDpUqT%pP2LV:#0qhiZaGbP?J?.Y9jetE^)Ua#R.ohC58<T#8OQMV[N\C0B(*+Hdaqj?=e(=2[<EacJ/?WcCGoUh`?D1=82@J$"-b>`4Nln%V!AA+d)[ZW!,2Erb615Uc`Q2mRpcuQ8OUM=gC=RXcmWuHZh`$MklCNack,<3Nu&'OIt"e9S#17m6lk5]:EEDa-aV%:6gFBe'XP9r%KF.eh*6aSqT!Y]]I&)[`+gqR^e;4d5"tDYUl>:rH>7h=6@EGFMRPr$3kd07JJ`i$L9.-D'Jl_UX!JnTG4^sUAY8XT:Pa;c:_@5Y_%,N732ns+7c+ktCT2N:;2U@9WiI0K#DHs.P-@1!>hWIYMchoS`gZ2&'Ckg8*dmKEr7q^a'"6FIG^MX0F9g[G^Y<'>G&/r>j%,I2cZ%^0[Q<R+"e"KJ\"LV<\h#dE,NEAq'oi3E0s)D;`^//ku,aah=pcG#MWBWbG\WnuduI#Z*A";.aYFEZn6.g%J(;Sf7Eqb!j[!S<L1`%dF%P1:!hD'(V84fi>`bGQih%>7QdW2VM68_k&pQU"@1?8)WIQ?=i5=RBL>K3hB_T*?\3]sHs?nZ#gPqDA`-:I5G*SZls4**;$L*8%j%bk$dcS'>Yt>Lf1"1;^[g=<W]+_YXqEV?T&p-gF;F_Z"Us7tVF$1;9Yr:31D-NHk;U/ntOJgO!c8Ju>o<nr_#l4Z@l"J@FalpV?%C>9d6&J)f72);X0TGF2^`PKr?]H_>\-5?]T#%5fr?-VO$"Ab$*Mq"lc2=`$6FL4>lmhRRF_EnGm`)$O&kjUuggYSFA$P^oSLL1\l%k`9"mcuJ8JQZ+#_I&lPKAP[PR`7p\Ukb?50g'k='mS8M1n8[S#3bIEE*G7Q0AiS?VB`82BUqguXOA82J=sDYVD87*4ro\-&N,Z^J%64n121pnn8rWPu0f_!59"Q=Sm$Y,Cck,b1Nd,os5:en<Ffo0=F>h]NLDF,lTTE)dN7e<C_;>_?)2Tdl^?uu/\8/Y&7PsDAsoi((>%$V.k1a^p9$kV>C])&LnGKufj#NYl-OfLTdl0djIg.2!b"*=>6F1l8g</g[b)E3%p,c]9'AUS`C\Z*/L$VaAPU.$m88iHmW,8?rnO%`>?;2FFCc#-Y?J281+j2,A0=:ge<XU4480rF2km9>M!kGN5jk9DGL^/B1"hS,?TW:BP3f+nnE-kn_4,</c^mC^m:u*?nuQZbA7<"%&[cA9HcYHg8#%G9@DiK2JGA84^B:#Epl.P**<tS+WW9B5)^:gGGXI2@`iWup$Z9u,.S\&"aXfJtk@EfY#6u:SP83]02upN[O0>aQ%h7CB$_!G.;q9U13p(n8>o7&=,r"K*f%mU*]#:N]M%TtGddP\.G!cR[^ICrr.G8DXp+2.dr?[\s`?%E+*;[[TVX*'-:d7EC66EdRb%#B+m<9OnbcYbJ=Js1`8L?T3+E;FQ`l97d>nrj#A7[XJ4nH3'e=k9;<KE$)B&L;eX)^u-#A1dqiNTO?DD`eB63At,B6=5c3V?IH=`%(^]cC?!`,GOtjdALZ.EC^'2f@!"@u3d"BX5R_A,u,i/4W(U(=6S$f$WS3?Zc%hO+k?j\_:@JaCe^f>&!U9p642\6fA)Q&m;!rscV%f@,\?*XBc*f&?CM[aA4u]f:Nekp(am[?7^i]d3IF?N]Q%51*W<(7OU;`GIn:9H<S$=QQS6rPbs(Z1'jEZ^7i@hRn)]p;Z4[UUP-V%(Vffi@JS5urp=peEqOq[f20.WNRpoN.--NQ[1`qPR)XMJc2e._S8GdQZPNjcU]Up\Gd_B($3Zr>m(!3.1cX6'^.0ic2;PM8c[DL:%$K81rhgqE5q?,^6ZMjsbhm*=hb.hKuIMh5qZ9kWgVR"`8h`r&.?N=3p6mmM^$fiYXYcJ]"8Y/f#Q+#Gom3q_0QNL(."9&:#ACESd%&W;$qe4_b_B!^7eI!76Q2$rGq+q+>pcG*Q[*Ve<gf4T#.s8)*&m!qQPo,df`cGMmS7;@q_qY:>!S]S!hEGZHUaf155N-0;ogj81<%GI<i0T[Sp-/c\DiWB+^gB\=-&QR*0ggIMH\,bN>!j7D*?gt!a@s+r<!P;rSWm<@K$Y?mj7H2U(d2t)8dHh/;+2U3tL+i2@oq$)^.%[qdc,N7Xn4drW<U$<J0NjOMEWi(+)&'W?`>HoQI%2R3imUb"Ogi[oP`]8PEqD@$8T]uiQnmFT5D^s??`JaIAYr.47-^\e2chlm,G%N9Z_Qn>(@HaR3hBnu(eCdgS'N<3O^=F>dh^[Tb*hfL500fi?k!fNl52fei/dbAQ@Hh4<>%,[C@@/G#(HrbCP=i+K6!T=oC?qWb3K%f2lnIJ^;7-)o6TGh,PEd]$3.@PMBmGB+lodm)/pog0Gi5WOn@'TD1*8m&lb$$Vb_mIk9YInNY@-rMt2AJqUma_&#k]A]Y0PJ+fTI%N;h%4s"H30oA;`bZjUDR8qf;&&3q!r'0Ck(o*dXJBPg6e%WE<Q!1@B&4#,.C)J=tAf3EJ<TC)(-[\>-B;u751jsO%(e]R?rcX+4I%HgBtieQ^Y/YMQno0<tIO)c2P=,XJI*o4CB*)mNM(>'7.hRkDHO(^!B,YT*Q"o)jTH,4GP5SWcgUqof!OeKd12=1ZSRN#+2J[:Gla%!JY9+V5VVcb109We5[@;5WPkl!@D<2;FJicW>Wm7n)Y`W\hD8,\**Z.m5\dfF,]rg+V[)g\7^AlS"JdhLJ3U0Nq^]c7@U%Mrn\X1%HbW`8`#+'?adC.\G.%i6k?J5+m5Dkpp&h)h\>Amn7cr8l@Tc+-fB\o?nRi($?JtoPh5Cc\Y4eUSf:W,):h/@4-i3%nWfD9BqL)cg%M?W?gjQ`sdH2O=__moO.Lj%?["?V)?JiF,KH)Q!FLO;Gp>pD,UP/anK#Q01C`Sf7P%0A/aQX@l9HO?+jI?Dia4o\iQ*8m9Tf2&qE%NhcW/<;AE=foF&U%T4trGBYl%88XrY:d32oi@FQK*!42E,Qb#t>"&aA+$X#'plu*/_K1oiJDmPc4N$ge&)+s.M_[.:jAQ5T9_[`=%8A@_mP"R\8j3Yu*9'=6&=Sj\?jPt2:)9O72JqQuFWEiXrq*)r"+5mhBdNQNMo]TqfS:C]pVeIaBC4deGekaUK;B_sgW#P5JKqDUe%P4F<9[mF!@l]cCDa9tt1+f[e`S?G"R#r`S(;;b0@j@#]Z)sWgP([Nsfh[S"W%$Z7kB%9E./LqB<6W_7&W>h.^-uqKBOJo.Je<j5:%$(8F%;:utCpqXWI*IA9=WeckM%bfr3-7/^$BXe<RYUpVP.lrH\NMkT$g1YYmPUM]D:WG`ER9@ur)<<>[KWn5gp^,hC?daeM[W#Z[%,<q@mT@\^8UG))cj19`4XBQG]rp"F9rIYHB4Zn/er7g]>q!Du@IfGJDrpA;Jcen]`l_A24\%<dF(qs!3#IWPj/[_8B?Yb@RA1F%,%:D]=%P:*5u%6icjrNh1@=q2PP/='`h0d4,f,Pfk4#j?"0gST")0)SDZP$';qFWp+YN7\Tm\8a6,oShU"s1iDP'rj]PVMiOm1@[&Z%k_ODbr$,,_Y+n>E1#"-7#a2(%jGUa:1WklVma6h)D4WOmPRhBeZY#ZfRBL`f"gpPRg9hq&Pq2CdT^O=R0bqk?:"$<@\aRGhB0kG*%H(A$4f4;NhF>)+orqLg$fFFakNsP.uVj'<o[icpiiboT;OU>h.=MFO;`X+m9(.VJhfH).-k)j\XJAVOTg%>hVV"30>9sX$hpaFRe%msrWP4G'j_;]r]oMO.R8ZJWK/0uOk2P-'eb:;e5!!Z86BcP6j@J>qd>Y549Z@5*@>.=],:Tf^c7'C`1Do@Sno!7bj4OKurb+S\\S%2,%f+:1OmHp3!R"&6Nsj"YtadFP@.u5b$fd$;5;XD$=qsP^2#@K!`)Mg5848[>1*l^24%de'gFg!koTC[M)5X8$8D=f6aBcLf_h7%h[-02m)MjTP>XDa!\r67I9?L[,,?9GM)J%]ZhGUm:[>D!&MJOFp47H6Nt:-',j+g^R^EZsrhg^C'ScmjduAba;OmEs:N4?1DA:[H%1WY@n6CD;Of1h&NHaBm_n%='Xf*MQbR1].X!s_rgE@E?7?2%Cl`ZW3?OW4-lmsEFCm<Dp$(FssGD1eP4Yml_=HQ*q`IF3e`a#4cp%q`a(dh#lO>^F4FNY043H_(QdoA7T"JdT::pp=KU;nRE[7-1H?8\)bMkn,$L+jnmCXbhN$Q\EU%PoKDo!(k1n)hZ;U<^Ee.BY)BZ2%+^U,-YedN<Y?;\8fEB+\@h\PFn4hP:jMcG;D?@XKHMlB:'\#oD)1cuR@TeGpF`d2sYUcM.8p1A@BbT0r7Q4M)^ac8mAo\J[hQTG6%^*FApEsA:[j$Vs<mJqb>N6.&-8BDiTp5rmg_ITJRYGV%BnMiZ/h,^TSk7<B?cY2u)<8lgpZg_TEjqAJl,n6N7jD^:ph1-b=IE8%_%6j,#+W77e#b=Nq74=\g=KHpP4@"-E[!HC^30a'!]L/r.\<p_:^Ugl#%,plD^q+rej$HhBp<XF%r>#mMbEs7UHIfE#uoIo"2"pQtA%n#!i'%3.<BbYGjK346Dp]J==W1]P`;0-(%FaB5q&*or8jprm2*']2U1AWDt4+#Rpi;lU#%(4sU.!g40,'Srsr=;]"F*mY;C44WN]%S(iPm_4*lcOZV)C;:-+7Nj5(RTl?EXBPTNMU$CC*)=pi.W)W"/G]NjUh729=[<KIZ#XOa;R+0:d$^EL@>[C-b1PV>#&aYl,_U+kX%dY*PKA?;8h/ObIffG(JN(ZUWT,cERPC)6lm6#3^YEshtf"Ft/j7R=`uN&3+@:f,OJJkTQ^Yq&SQMAs(M(Q8&%[jrs0@SY'&V.+"p%o1)8*<M;crk9>'%&pQ+"&pS'iRce^#SJW]nbA'pQi\u94V,M-574:Bn(CM0T^(VnD1D8`.!Ee+V9/c#_Ob]&SF6tM^P6q=J2\d/[%4Er-$BG,\)`g@#]WTp6),R_DL_O%>&f<6H"U7#r,P>]D.HD+kTV[&Je[d06iC`\X62'jgo_,JAR%"2&Rc3O_hq0Ua%54uGHj@P:X%UQIQOf?M(TbV:t_:tBHSh(U_'>agikK*nXV`,k48Q_\;<@iD5MdR7.31\P!<FYMW`jd3dE&08^h,V(I:O7HN@,Hba*iMtYfS/<ql%KnZ/JI]@_CAk5mn+Q6LMWCBpWp6111Zs@P43%Y2UW\Op.0c@RK:j"C9fLI1q!0*q"0r2WuUZqFZ?pl[6pl@<n]`9$fqLRr;9ADRA%pfi9JPqA8(Bil]ARXH0G>r%BV!Ka&s+?SaO&JosKAJXU'_G)75!>=[hTEqNrLKI\)!`FVM\n!^/B#U2gY/iX)$\5HhHgFj'(Ypnu%2TZ5,PbggUb,Z99C2p>d80):Cr7*%+fX1@f[sP,q/7T(XG,n^^nu++p:6tFe*cY:9cSjQi["Xf2O#ZI)E<((Z>q8[/]$`PY\[8Tr%T^.>.,'mtGNDBHRnPS)mm(>VN?;i1%1XGcN&e)ojAcT'B!!Ga9EK<3EX/_:&W`K+"h<pUKoAmLeSAJ=8mV^sfCI2(,XW*R*6[A=.%2Lni7X30ik7[V8/YK$hlXt>dIG*T;K7soWnQ:X?&<bSn#_I:"Ze-"2&QPk[%2hSl?Van?n?Pnl9d(t+GL?Y8NOL^P9Q!ppe0UQ*D%0e0<_?JZeRm/TC`mmEhc`^MU1p6Y+^1(GG,:71F[<!J_h7Fjp^%1agFeHlu6Y@ag]0Zolea?[j.9XPg["kG#9,@3c#>L5]d03dqa%*Z(mP"9<qjC.SSaCj.HKVi%>?"2!uk-5RBmN:r63Ll?HL9gPp_r(4=cF:u*-XI@8!+Yo@6\uW;8CVrQl03@pA/t5:JBRsYf1o5Q#%$'_/<Ufn9fW'XAP!Tm-FSdR[+71*Hep4HRJN2]ptAa9$$$K$?[;]`L?1@/tHN*tHmJ/EkD!<lCE%h(]?)B7?&C;)el'J)U\&f+q.%d_6UT"4m!75spI$<7VIX8MurgJ58^H.+&Mr]`B$/LkT(h6t)Qq<Q(gOAPpk=+)*Md__7jjK\ego$@?s.j<pTHW/V63Lf+Z0L:<3>%m,POI-Te?`)OEjmUlGdC$=?_@jp]MDg+ei9J]NH-TGD;g:f*Q[Ap3":-*e<s*Kr9aXIR#&Rk2lWaso'@K7f'5l[lj>lh<LgLmVr_%P1?inL*15c_1`p;kK%P-9^nES;hD3?^[9+"$.,g\VfsX/L6?DkWpi];c)B1I-fg4a13>eK[l#O:B=`-dbVR)7$nE2#2@=sq?"Q89%jKt#7Ae$,q#J6'S*S0"Dg:anEW4J\;?k_[QKVaH92Y7;S.SQl+>A]I/R&cBu-Snm*LRLN)mPad6D``DE]bf\jF0UAVWkq=6&/mc2%?3#N7O>fLMOg#s-<>IO$TidD.f[X?_/qX`BL'V=>7oRH_lXNnS7&@Mu"&h.OWiP]r$o*53=R%;HUL65^O[SgLQ%kRp@m,+;71G)k%/&jKCLVJ7.&-#=@Fs9og4;_OH5$ATHS;%E"8g977$G[WsoO$6o**-qZW;2r.V9Q)s$8!C<:e\7G@k!etBN`;Z0$eMuat\L)q9bDu%i_4EEWJi*d&duWt.b1rCXR6LY>O!Yk1-)hq/4Gt=MPkOIbAFBaQtBA!a-Nina=l5$A;"[3P8(qKWER]qZpM(FF?qa$os1ZrW<kMa%OD7sZOA)7[m6>:=):=CFfY:_9oKV*"$loGU\YO+]EeBc2ULm'*2`XE4NF7cr5oqA+8._oVA?!JBfO7H`K@9sg3:u>Ej29?&-A/uO%q\Kqjs+<&dTE;!d&6%KK_Kr#/<pn-Xf2?.(:/-oR_q(eX8u!7?g2OF?eJQ8.<?t.)a.YNZRM(8Udq-01r"jOmBp->6-RYquKS:bq%@(IV.Ku7OJAg*oTDq]q0+CBfCOJF8!XB7dOU\H)95\FJ%n(kB(;%P6u3)rM7a1bUI]kMP0)gAtjcH;%T^Kc:fXde+I2go.;VIXUG%LGVRd\,8ca71ACVe#"&li=83mfj,,EpQfl5W/^umG'`GbL:70WLR]%T0X[C'qOti[VX?0bORu7;@:DA8.GhFY2pL.,s"2Kc^1f`r%4Z5l:d]0poIlAt7duVnn\U@#kZ1T@[&e3TrSkUSPlH5\l=#SdI\#rCH;2#$IO=kIG_Ehe]6BOR24iELmp"J%1:4Ct\[:l*_<*TP+%?k3/)ZBJh]MTM.eSH*%G!8Y_5Jo(]\+gP&_M04EK4&7#5U]S(/JDOk9bddVSl$p""ZLmqBm(/E)WODPqip_]D``(VE,RlAR`_M(D%LOh_4=+^!>UO5Oeh0#5b9B`352#pMheXD[_WmHDQ;r"CJf%FZ\kk"nR<g=/aJ:If&jh;AeZ'55Rbt<SO^LLOW;]AU/,bSBYd+^D'%d5f^7ge3C-!d_="%T9R`Y:N*e'')aa?DL1OUPTD\\[%BNPq$?&!J&%o6IiWOhaOg2+Z51(A\)Q'`$0fcX-$pAUTuZ(*C7B[IhWVP%HSOj9@^!@,C6gjpniq:Rb8njW'0*L:N]0Y]Sr9,1A<#m@K\X0d6eM`i-/QV`ck=_u0ipai1BC$)7&Zr8N!8F@_5Y"sZ,_j6l6LI%%Fq!=U>IAuORJELe`)S8.8cr/BXso!?&eQ&09E@jJOY[Ad>G^@/lIM-2J!_)[2_,iJ?gZqK-ros\]>=8&oEJ:I]:\^%6jh:l@3p$k%No=,SQ:$n%8+:K)jrR5@>=j,BDAmG=18]q37SU4)b04Hc'p=E=h5**t!:;qU!?H$QlSM\X@;fOk^0DG#"*^N9WD.,1!0Hs?HQG3;%)R"SWL)$+=DfX0%We)p:b$L:@RkhXH(1M5ddFe!q%:Y>qdbBI2Y%\IeZ_&GZg#f=8-sZdu0)^L$6Q#\X%lF.QAhXWNS(J0-/1@We%lDB.A:=-ga:2%^(oDD`t?e]l^K<>lZm$HDD8UGbq0/^.O0:[uJ4D\MH;Q[8!c$AO&c/<g!K2<"Mf:>^"R(XQc;5VL?8=f'"m7Ap@%&P$pH23`WZGp&lqj)XcE@;E7o"(QZ"4Zu4F=XV-;Zb*c2C/E[Abb=2VZIf8G=L&[2(UmmS\4f,L#?R-8%5+rReV6h2,(dXCUA"[2%;P*Y`2C_73%Lf^>^9a]^3Y?-[X*'YV_*to/q,2eg6>6Wh'":FGIU\r"8Zdr#X?YMMpMC[eGhmFeaV%[dOf?jVSSlXT7_fXUm%2Y"%9hZu#\=kr?pFut>5q1:Qe@jOG+,?]HDUn0ORe(?4\hYh'DAtl<OH@YH8.jWPNL`@%9OQ3!DCg8+PhNVZi9(-^QBn$t#_4ru:GbiK%-#TT^>G>4rS-=6?O2-W3`W]76O_b]U6][`ngJm"m"NJpR+p;AL0XRg&lZmj(9:aX,da6L;CEsH_a?&A8.7cMM]I52Q!\g010i]rk%&WE[EjXZhY&Re9qB%[7$$Z?QP]a&6'e<nVk8Iq[+&QD%j^.fqA@,om-P@&>b>H"&G]FQO3Zoji@bk=j<gY*gM$@k,/k]67qaSme&%Gj$A_GM8=T)&1Yf+KE\d!]7q37rIV6@'YVp0.Ku=0^AjgaCsoW,&-hL8F;(h-sbAr3IA89W,=OW-"6^cntJL_k9-f*CX<'Ch(6pp%>ZomaAA_mo=>(%JL$?pInpMn]jm__X8V:0?><20u+&^fWK"=[-"s>Y,8H):W:fhMs-dI]cmum&ckE".&ek"lj!\+`(QY2S<Ou$f^%WFpdS0t7LB;\.n*?kc8@pN`4tKmmlshK1^a\gseoggmK/m7i$j1s2b1P8m2/aWnJ+SmPV'X?.eF=i"7:M&dCHl(IVZQWfUmT1Y2g%-+##<Sgc+R2T&bOYP&QC7>tH^f7g)k&nuYhZ<:4Wbe`Ud7l*k7W*&gh1je.[nT8?DXh6c^Z8ic5_8^?6H%T"I1K9o%g6@3iV!3/l%)n4C>OeQA@]1kSZH"DtF?Hskte;:[t:t7f$MdVl,8I5fBbTO_-6,07**O86#)eh!]UgHk+U_/pCdT'Y!;=YnroCYdrd`LPV(;ij%%RjpKFG,=IK-F\B`c:."\E0[Pq06<QP,D@nG@k(oB\-,jZKuSd(>6G-1J6=-B-CRZPQ'YVWl]>*`7Nu#7XV\#20.WiA\+*cN:Fsa)%n'#>WFcJ5*R(`0Los&(<l<d]BH&2Kp=#!kR@7l3K4UOQ-:'h%I=\&fRXX<N^=@,h!lUKtc7`ocAR$Q,4CSClK*N<jFDTt)k..#G[%Ju`T3HEk<169:CdSX/Q_Pci/5MrTjJ.DeW20k=@@i`L=EGdN_;M'lbTo(p:8Xe\CY2jQN`&._%%LsAihOBQhh7=S2V>ODn7K/t<i%M+DcVm:ZSRd,!^aiAf`IVT[66$=pc@RaPFORb>B[$M$R5L5J6nBI2YHdD1K0RP6=,Oqm8EhaC[[9hdXEAP=.#5-U66%23qkH.a*j%*^(+"-kCqiPiA4520:pWImj!hLL;@#*-F#t(M9k*$&gh!`489sb@HnA-+qfFVq&H3>;UFT22ictR%?+(HHICBaA0L1?7iE3kT@+G%o?#;7EFt]&Z<f6A6ZNBC#=p1lLTBQ#]bDp.`1p-3fMA`qU@:1"_TUSaI%*Z;$XpiicY?,h`>X0C&6CVr;]54AIcH%poOq*\#JKhO%&k,b#"C%*)(;VP"Wu;[@o!IkE?<#4)mNkH.Y.$uo]UhM!Uqj!9oACNa;'cqin#W+$4#R,.1;MX!)9=f>\29E>8GV60e"0Eb6GFD:%rT@"Z#K@e%7]mQ8(j]7dnfC"$"LB]>M7XNTKJ/Wh^=ZI%g!u)DiE;pDX0Ej*6,PsVM?%ZA.:PEHF0PYZQ6.qBV?BAHfn:?XVmN+d%AdF,U=kBS:Lh)W^b\\-U[>IZ7A.LPX2Pu:SAI/cu&R`$s:Qf;HTom%bZ-q#$-?Rt)=;F7NE,$gSc7dB.6jNpaQEj$\'if7)aa&("%,/Q#^9]NMIQB+d!90\gXRbha*ikTe)&iI'T2qhAtTcPRSGGQi$D$'KYS):0QY01i+K%O13Abpb4A:1LqgIqXLjcJe(m^^>!dptKT%C00e1;D)Z^Y[k(3F&*NYQ=Z9JaaupCYoG@b6u!CFLFQHiS6dopYQQci<,>rY2TH(Y0i[t1(jTL&g>?Z80I40d5t<I6DDN?V.N_JB%!<)t['V7sK.5i&MU817qqsFV;SOlJ5=#+>@B:qh_)DN[8JbS-(2GG1fIpg]9)tGQM/$%P]H0qPGmqs2Hr.ZK<,WTfK=E$#I0an*X%bsK+u/L1\lll1h&;>N!"T`Xt[DY<-<MP%0?$;s`nd'5s@h+_`k+*=i6rFhC#6$*NTaui2#&2VJ_5#jehUI@mS%Rk*;7ph-o?%HD3%CdkQ1m=<;iAe=/63JS%&f=90.;urkq--'(<G6%R7D=[pn"&q^fOnT=38E0R6:$2Sn6NN:(n+H\gf+*BVI9M:*']-1U>%A5@muU`b%'3AUqea*]deE@Zj6rtV;8:Jf#=9XM]$Zp>nEr6Ie,it;q*L;=b;?@+EMs**8d0mQ".3RrmC7HdBUtG&Y1,hE;:klqRrS-.nI]WR7%\@1`B6`3E,AK0M0HYc+!GcDb<K"h"FChnjo:rofc_LD'KK.5)j0I0FL8-n*bhh"(Z+HIq=!iWuP(,]%#;cDqAQ+/\#5I+d$Q+<!Q%P*92n[4'd@&,f=6/Uln!Th>&?dkQr6W*eq<0\o]5<Ca]sNOEaJ!#X+S..&7b.4fMU?;6p,i[e;Za@ntSlO8[@JhMh3DgNG&GFEeg%_25\6\VE(epf9pKD'<"hk^r1c.t1nV.JX!9cNe++BM)7F'.da2\kY_eA'(FV.Sqlc]fN%Ee#Of'&B>"=UG`cM@P%sjncniOfgCR6%d/GfF9_7$D'SugiG4Tu@Wp]?T>u^g^TE`BgLEW3!4X-r_%6h$c'[k'RTgFUR0L+d1?>A"SUo.aE_kb5r,'J[tn.@6i2BD?40'_2i%5nHrVSUVsTP8MO9b2S,s\7uUOm5;P!ZT7R)96]ui'B6imhk[*2JF+YH7'tbBRPf&X]XJY9dH#KWF:u8u!'@@:E&YN]ng4_He?@j^%l0"g[l838<*h.PWN>%ZIT_b<Mj2kP.R_0MP5n=SmP/U_K$-RSMAj5;lfoN,.Rd;7Z4Bbd!L.(NfU%7XAMOijuP3&?%WL)\FQu<*j%N0DmAc#3'&,$<OI>Ng2SJWe'*pg=GCNup"$*[n$H>k3[aoKlpCUuTflN:Od%Ra"8E`kdf%m6dM"U7k6'mX@Fi*.XbD6V*!'b]]=d%Q.126-+6DqrNVtbVAS6<@d[C@r/@qK4af\9BWa*nNXW->/876>;9j1r-!br[7n%@+Kt&q?W*QJ+e'mM<TN(MnkrH[6'[P\lTYY8R%<h&gFRJHX<4>Z(BY;:`;,JS@_UcHp2[@M]G<:kqV3=f?c+C3334lT.6(FE5TC9tDgJ>Rf_XJJUNh^rlD^!%'l(,[8ML&4Gsodlh'%^\s\+PL)7QQ+.9/:;e=>L"'T;^bj>I\?A,RP,#.,Q)gM0qC+A`a3S`]rc'R<\VN&H@#HnMU4"!gK0`1Q^&V>WD`JhT5RA^P8gYf0%0O_Q7e46uTnc7Cq5[iG1K]'jL/q@dhT:2M+SeFbC"CuY#ksGFFj':f_oF\$g0Q^U(9>(?SaAGZoI!W1kF)c$tmMVc?RP"WrSM?BH%]sr=.;PK8+W.MT;+qh\I`8SEUOM4hX-/h2"ILThnH7F6fD4m\[ClrVkXqY'PX[q%Q):;DQN?%@/2o;S;"E^mra^SAt@$AVQ'l7>j%fu8I:25E)M.Ou5i:C>07.YVMWWMIh59@Q-[eJ=0fg87:*gTD4o+()">P.BS;=dh+FR;80,fqN+Fc]*2=b+No<hC1R@J]?h`=#@>`%%>2CR1932%BVXK7(#[%r]XU[&L-:9IT4VJn\KoI45u?%C5,aVf@*>]noPZ@q9\fhnm/.78$t)\3g>8@,RHt!36[F'YhC[r`&o(=h%j/p'-8$&.SPkg)\8J_0J4Ep$>.SFD5p+,2Yh5sS&>)!b"+erZ3d9cR5'NJ`b!'QMHnFRf?nYFfT$k'_sTN_#q:(6*8]gT[=DI"+6%$HJ3<S$>42Pc-609&4BF/Oc@i'\kQ/NW@N4ob_';B&kksq!e_H)e@a^X),mK&jo@DCneHl1?8u^PE7moNO6-31SO\k@iN>1BGT6D%YsQj*Q=aI)e:^@>g"GItlY*G%@6?u>[jJI]U6B7)./%,`p<B8G]``\bk<-km&Nak]!1gVSrDNQi26.8tP5JV]`>V1[9+F#I;4Q10%FUoX>QM.?ii??`n,[sL3cM-$1JB0XJ%hW);?CCBZ&1Njk!qb-BCG4q4/h3]gUkSR&=.3$L)$QQ40qQL3%kL;IB!+@ec]IH#BYQ$c%4S)W_:meo19Y.^PC:Z\=?.b`nrM<(H+<ko[!ATr)`AA9TV-(P"r.Jd&/ipmhnP(&]%$uoUj=&Si+_;:?k^#UkKnjh-=sc05+;aL!%@]"8AF&jDh$rPGmQA5aBas%DiSH*c*)-n]uQl7p;1Jjp)W2`7g(*^/\3G=Md7=BJSfOVjrnY2,%Wu`PV0)t[?#72kSVO-4Xb350D%#(TtRNmX%f*=i;71CR5WA0c!:#ZYH@o@RQT^n6>q'EnLP3l'-p</G(SFS!0.*`cuN.PP(A"W:7r-hrrm[?NA7#NE2Zk#*bR#_PJ]%f0*qf)3,`-P/X>P/3=X]i+]N]LgM2ET-?E/k[@HAk:d<0RiuD^k@n>A83O@*4M&Y1Q^W^.1fOAl5T`]`WR_3pU98-e3na66L&TIS%ir7GqPfaWXUt+VNmWp8]im("WA>$-^P%nVm=[cI)RN*(sQ)UdDam)eO;^(^*^uFkn(`"9*,ecZF$WK/i_CSlGP/UBp<^)Q.I:DVe%+bG9FBEo2oihL>AWl_Rjm0(qcVW%>`dTjaHbE[bC"m9"dQ.AH`i6.ujG)Js^4ol%N9L_s$ikBR$Usf)0&tt72^Pae1.YOcEPA,C:%e8-M@mQr:#9ABUW(2(u"9[Yp2HTgQAP-'<eU]Pc0(h+"Z2P\#"^)3bBa+i!QKio2gaMZNlnF!uWTOSiXHIZPPX`Ji]:g3-nV-<J'%8)3L9YXaR,RZ!D\'P=_jhG$3;(]>h-'ZI0hGueso3Lb74jS'o1?jrUfB?5bRP2,78OP<Nt,+[@?56:?G<@34ZPSD/uXLq,IL@ms]%E%n+&,(ODJG[\Oqhn1;nYM,9"Kpc#eUQP!l@Ys$(OJcFsGnNfIqrY]Cr&slnG0N'r/CN>GP"K$P)_=c`b4<Hkg$Y8-P#DX^H_j0J%-e":QB,`iGq`VJXMJi-I3D0cridRF%F8GmGH.+c_IljPU<ik;[i7XQ^^VD*W%_=:MPeSI30>4*Wo"5h@U'I!rG>NN^Rne)Y,oV'h%\aLXH%"bJbZ<*'XD4I2O52IIh+$VQ/YmH9FOA[[t<DkTS[6pIT4G%dkHY2%8-l]EjbXIV#2Rf>p:sp1t;pT_q^,5$WOg+o%(RVfV%eLb'd*BCDfl[opfaI64J=m&Nl"+W,KhPDQSlB&%5&q<q,_=*HjN(kFA_"5U<*JLM^6U+EZ=qE`qqb-%u#5Z89:gb!KifHcVI^80f%mkl0o3cZ-^0f'FC_77EohYOYT7>+kiqG"qu.%l/@`sJ[_k^!Z;iZ@Y-rkp4T69^%)c_,KrHqjZnDCq@6RuE?HD;@7`L"U3U59/Ze%^J_9CZNP<S9%2giUeEurb!HNBe$MR9<$8/4g=MoI3>H*Y9Ipl*a%B_Sc(gA;\qM\gActkK"6=etphApD5r,7MNH:;G.D88dA\-6t%VR5>5KO=u-L*e,00tRK8,T7FjWuff!da6?\`7FPtkG5<_,m'b';gF_SToc;/A=(Zmd`fY!K*T2Z,8B?38m>!6:%W7D=&p,_:U>u\%<UN:tZb)*%*7m$6+3"lXZ*9@cp5me+\KZS*Fid<PPe2^`IOUd8RJ'H"7$hn^+ON,@*1IW\_G#L1&oKME'O3>UkGb?ZQRsJT.LW$:%[L]ktg6d$+W_KZaa`:6'W"qe)Cr7J<@W71Dn0Rb$GTn2pF<arI3&BihguQ&;\qflmEq"K+;B)`0$IH,d40?WrgmrPcHr=e3PjntM%OLUccq57WF,a5<4M43klib&tY)HsF7>Gg^b]W#HMPO=89Qj9a5G!QGQ9Tp-S;8?,)kp$t!,,eZ$]jY(-Or:OMlt3-UH;euCknM7I%0S>jk+<*"l!Y?nVm$:uEaip1QroqDoOeS;*2Asmc*'2%*oA`F,oZc-RdbSsua9r6n;^M0%+!?K0r8tnH]7:X]UiL6P(Oh><U)A30%IVW!RTWacX*NGh5m6a;$LJN?G(#\F$7VIA;/dqc:#Cq@IT&EnHm[f2.-5DaP:?G27;da<Snb?P)%MVRS7K<c&+DJd@2tWdITU=bP%Zha].R@3:q#_`\e5:MAD"/bWu4aktU)HBFarY!S8g?-*(9Hj0:.alQWe2#$eFl@j\QjrVc5T^B!g7E,d4ZsS!Y^IeTogJr__/\oN%n!;*Mqp*"Y&H9=hG8UXhD:/?$^i`*cjQFUHqK^LBYi1G<3%RQ*4@ijD/PYKKT'b%Zj&K@[JC#<U7Krc3rV/NT#"/\e&BE.c;aR\G%eQP0a@0#[,<Be$S)dL#hs*]j45rKHh$7OM2V=-'a4ceo@S6'c(]m=!F#:0[@\oS?<T7`nEWQ`H+B$!$jUUpt-db*@/U$r]m*fbEQ%mNU'Lm*-YMYubS=dM4]f[CUJaXBk;Ffp@7\1m60991aH<1XNg@On[_cc9O&;c$A2S#8M;_;*.<.q:<b46.2!$+X0&*pX_].@8ZcB%GiR5S?%GVg8ZA%)5PoLu;G*!s4%L,K-)4O#YIM&V#QLE9?\X3-lLN`b"m!sGB=hX09PS4j/C+57"QIe_I?t<S3M^cOjV%s-V1i*S%CQ!+*I%.]h!p@k"c)s\0F9FW`jCj:0VKP2-%6F78JOao'FH5X5KQ,a$DqfFno,8aUc)D&s"s(t(BXU!;3iG`_2lL#H]>E7H5W;Yt%_\h%%F0Q4dd1Q[*[)>5=]ed^HHZoP-ES.1ue"L-UA:r1qReH+7c9^sNcLKcZ+=A+MFsdmllqNT=QC(>%fuu_UG4>(4;\KDlg>P>O%g%]7DTR216?7",d4#sGlbO`Cf!rgq6gEd$NgmUOF&GrRE4T5,7;<c&iDU$D]qVEbPmI/^\b/edF(ZcZd[R1nn@chV(KIeY&MPW;R%,l2jLMblRk+Y?uJfj@Rq[A.#*\Db+Aon\nqha-D_H#G&PU9e!eA9>_!c^Jn4EAiOE]q&_A457Sa,K(DcU(gU?4%+hS([VcHf@''c%5\GnSW:tJtr-Yr2M@dC*TU_k<3\CtBift;rP&aEY0A<6BkIhnR6GooGC]iV(n*RCpFD&36\%2+m6I-5qF8gouAB3A\)HF\+%:S&M%X]:]QHF-QWm2HYQc"j'-#DfWe[rrh*GdL*pc2+/!fY1PQ[s"'0leX6E2>c&ZW=mjCpgbm?om?ir`qn8HdB&WLeNob_V"\Iq-A8^.%<MhX]ZetutqKkCk<FMH-G#V>m[Q#\Vh-99@V<J</9^mF\YZ#tr0?@YH6cu#3OC`7A[i;UUT'_uj;n'6*#"#q7%Vgm!]s5q^'^Qr8%fQM2"P\KAu(I-F[C?AXDFu9-B(ZRgu4B-'3K>?0;Ep(QXKZComZT^eF0A7_?@uba)?YT,gNfFr:hV'9DPY^un=!>PHabQ#e$G9TD%+IDf&<ANh7C]u\,e581NaY\@."^hinf$$GOjE_h[0#2,3,3S`jbQ,j;.`C?i(s2?,Afe^72D[[GDc[ZGo6^Wp5L$lIOiuD10$ESB%h@;i<j$bbmJ8Pu/[Dr"hd1Gd?q)]-"jsCHQ#a>],A%-V&]mmJ+$FRLTbF8t]TNaKA*][Ou_$rfu=aM<3RG%(G2WVW%D[*[+A+Uek%UsD28#!<AQSUq^o^a\/EH)cS!'jUi4]_;Tmrcn-jB-u2V=&T.t[mp"4\B-1A63oM1jeOrYJ#]fl:qTmk&c1t!&*S4:Q(p4Pjb$<s%i"&rd2Z]#.)5JrqPZhC^Ga,+^rHuL,[`iIf2MK.1!$]jD?ooif-^HZl8e:XfH90qc5#ddnU4sMrE%6L1`[IgLJZu^]Q=9\/eD$\C%p(n6hp##c<]79\N+!,n)f73bjVl)aCs4qmKpbeM3Po-ia-@*\Wn/TS9mlAnA//Lq][)`oO`#\KQ6a9\Z7*8+pTMIqPJ_kIDTmFLr%;UIY%9>?,9or-Rsi['i83F&6O*%>"'kIC1/<'iY0h1pS8GYTlmKACau]+5'4?A^*!&"%AXoSu;Dg?W3k.S>F7Wl+]%TQ_B5rZ]Q<%3]=-n[s-1\%MalrTol3:6.DPhkhUuN?^YnKf&3B2(ATU&oSt0hkfFg>f1_s[OFuD0-md/sdhn2r[poZVf0GTX4eD*I69:MSq46E(%9$;*7hiBqM422l;TNoe:,?i=YHbUX>MFg(:#:)',WkS?4Jt]cUdea,uZp*%*Hb\_GU's!FHpNjG%(t5>^E?pOXGiph+Ho-/IeOYS%1/g\'?]a5ogH3.m:i>>Sc52/:^gXtS$W?5%Qd6HNa:@[cpO5Dq$*!Rg"c;C-o$.b:[2aJDqZ0Y<A\@p;!=.I0#6KB?JEg(I(@V*M%^r)>iG<I(/lL4\%1^2;J08O-7HbU]]Pusf6Aq2.H.5MEfKAL;jLhL.a@dIuA)>u6kIPaftDHkFW@P4F::<9Q4O%ZSNb<N_LlA>2/%.D?p'9P3DDRoRWsKl2^=B]NHIgm'Ff'$d7(I$%06U=fu?IS`j2;(FV*H&lN@&jO+uMTbel:[`IOpoD1*p(%Zuqt]-fnF6)+o5DD@%j0udKq#*GVqR9fr4Fd*pYA^=bfsd?ViA>gc`go?JJ+;L\^\q-.a%<JLJlU4SpA"njY#Wec=JKN+F1\%FSj"Rgj?i%9%C6?,?4Hs*%dROB+EkpO)qFZV00*<GJ5@'Zm]u?SEGO]]>/?A]4=QSH3D#`[:4uDkepu5AI=SNp3fh5\ErKtRiZSsM/;ge0@I.=7U(J=_okMLk8%Yr;4ph=i:nWJoI#%E.6mHed&^m)Wb_-K%.@ZOL!GHT;'Gks,;0(9&42pOXg7E9t+;%Q)gTp3aQ?QYX0@qk*aPrtN=WCVKs9Hh@W\%^Ld?K_S9Xe%[;Id*rI/+,F9d`oGm>P!FhQR'7`uU3@tbY["KV5GiD42R2X@/bX$4AiW,"7NuV,eqr6hY8uZ)@2:$/fc"=HTq<hR,%CEh((<#5<ZS:A6G47KRXYKu(<IXUqP*RJG;hLcoiq5Cr"2(/mpq$(T5.5*QB,?491"sA&6R1\q!iq-]LcSj!^F8"UDDRP&t`&OHs%(Bt\H,8$T0HoATrcZf,(>Ea%*-aM)pir#jbhgqE5H@>MLp$8qCmsmTKo,`9;cGLY6Z#%`F:dj"+4`E]oW?l3?oGhhC_V'[%4F;&J%7ljITJQS`Em%r>n5#>)kY[]<B_C)t-\1Qp!n:0#ir);6s/c6+Vm%kfVrg(MFf`(]i5B-Q1)t8KYXssJFUj<8:pD$QB+nb.jUTtD>%4V+QJX>Pf1gMIZ"&[,LNJ5a,`Uq:sFU>('SjAbT8NORU4oj7'%,.@MN(A]J5J%bP;n?Z3BcecBbo&FZG!DW.0Hgo]JIh9<rUg*-e%msFHN3s_H3@CPbqmTpBR'>=RE97-;/2"D^/#i@?QCU#8Q?/-6<6hin3<W4F`^QJ74Zh+@Shm3"ZgHU2`#HkgM"+Cg346r-g1p7-T%,"VHJ>tF3RVAi;sXu#Ob"^5sR/8_hB3<1\Q*?^1\7kYKONfdS.4(dMip3aQ?qjN?.5F$qO$K5?qr=8bleap,VYFi?%p)VL*hn01I%EW1huqp`B42"c@-0?&G?!/4=*gYBR%&.8"Z*Te(Ah1Dk5<2eV^6oO6;_j[ZOE=:CNTJI!l"0XC0#Mm8$%b7h><upS//%j%'O72$q%!hJ:M)gI'<3Tq5bjo3Y?Ih"NWX,bHqn>ZpY@Ua_gG'qgE*0'Xr>QIkEFH;s?I'6AE%6C!3FH97r%6BuH_t^c=".c,\J,)T;j'K`=%WAtX&+,7"(d$?rQ4>]7LlBSmg`KoGHIVRbHi5%p$+fBOObKpUX#S2:8bJ)iV??U.JgWMM=g>;-:If/LB?i9h?lEC3I\%hb6li6qV%n%S_j_\Z\Xf3eQqfDken^](-L^AcrDJ,&uG^]4/hfAD#b46Y;2?%7.pLYmOYq`fK&]<Bg#^AA^3egK>PM_G(iJ,)k^rXUR00e*~>%AI9_PrivateDataEnd